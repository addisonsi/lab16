
/Users/addisonsimon/lab16/target/3.0.0/argon/lab16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004fd4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8ff0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e504  000d8ff4  0001e504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000284  2003e56c  2003e56c  0002e56c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d905c  000d905c  0002905c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9084  000d9084  00029084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001be597  00000000  00000000  00029088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000191c7  00000000  00000000  001e761f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003d159  00000000  00000000  002007e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000030a8  00000000  00000000  0023d93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000097b0  00000000  00000000  002409e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d2de  00000000  00000000  0024a197  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000457c2  00000000  00000000  00287475  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00128665  00000000  00000000  002ccc37  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008dac  00000000  00000000  003f529c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ff5d 	bl	d7eec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ff7f 	bl	d7f3c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e504 	.word	0x2003e504
   d4048:	000d8ff4 	.word	0x000d8ff4
   d404c:	2003e56c 	.word	0x2003e56c
   d4050:	2003e56c 	.word	0x2003e56c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 fd1d 	bl	d7a9c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d8fcc 	.word	0x000d8fcc
   d407c:	000d8ff0 	.word	0x000d8ff0

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b858 	b.w	d4134 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8d5 	bl	d4234 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 bcc7 	b.w	d7a20 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bdb5 	b.w	d5c00 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bdb3 	b.w	d5c00 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bdb9 	b.w	d5c10 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fd06 	bl	d5ab8 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d57b9 	.word	0x000d57b9

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const size_t UART_TX_BUF_SIZE = 50;
bool firstConnected = false;

OledWingAdafruit display;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (size_t i = 0; i < len; i++) {
        if ((char) data[i] == '1')
        {
          display.clearDisplay();
   d40c8:	4e14      	ldr	r6, [pc, #80]	; (d411c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58>)
          display.setTextSize(1);
          display.setTextColor(WHITE);
          display.setCursor(0,0);
          display.println("1 was sent");
   d40ca:	4f15      	ldr	r7, [pc, #84]	; (d4120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c>)
   d40cc:	4604      	mov	r4, r0
   d40ce:	1845      	adds	r5, r0, r1
    for (size_t i = 0; i < len; i++) {
   d40d0:	42ac      	cmp	r4, r5
   d40d2:	d021      	beq.n	d4118 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54>
        if ((char) data[i] == '1')
   d40d4:	7823      	ldrb	r3, [r4, #0]
   d40d6:	2b31      	cmp	r3, #49	; 0x31
   d40d8:	46a0      	mov	r8, r4
   d40da:	d112      	bne.n	d4102 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e>
          display.clearDisplay();
   d40dc:	480f      	ldr	r0, [pc, #60]	; (d411c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58>)
   d40de:	f000 ff15 	bl	d4f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
          display.setTextSize(1);
   d40e2:	480e      	ldr	r0, [pc, #56]	; (d411c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58>)
   d40e4:	2101      	movs	r1, #1
   d40e6:	f000 fd52 	bl	d4b8e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40ea:	2200      	movs	r2, #0
   d40ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          display.println("1 was sent");
   d40f0:	480a      	ldr	r0, [pc, #40]	; (d411c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58>)
   d40f2:	4639      	mov	r1, r7
   d40f4:	e9c6 2304 	strd	r2, r3, [r6, #16]
   d40f8:	f003 f931 	bl	d735e <_ZN5Print7printlnEPKc>
          display.display();
   d40fc:	4807      	ldr	r0, [pc, #28]	; (d411c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58>)
   d40fe:	f001 f971 	bl	d53e4 <_ZN16Adafruit_SSD13067displayEv>
        }
        if ((char) data[i] == '0')
   d4102:	f898 3000 	ldrb.w	r3, [r8]
   d4106:	2b30      	cmp	r3, #48	; 0x30
   d4108:	f104 0401 	add.w	r4, r4, #1
   d410c:	d1e0      	bne.n	d40d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc>
          BLE.disconnect();
   d410e:	f002 f99d 	bl	d644c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4112:	f002 fb2b 	bl	d676c <_ZNK8particle14BleLocalDevice10disconnectEv>
    for (size_t i = 0; i < len; i++) {
   d4116:	e7db      	b.n	d40d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc>
    }
}
   d4118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d411c:	2003e5b8 	.word	0x2003e5b8
   d4120:	000d800c 	.word	0x000d800c

000d4124 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4124:	b510      	push	{r4, lr}
   d4126:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4128:	6800      	ldr	r0, [r0, #0]
   d412a:	b108      	cbz	r0, d4130 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d412c:	f001 fd70 	bl	d5c10 <free>
class SystemClass {
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}

000d4134 <setup>:
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);


// setup() runs once, when the device is first turned on.
void setup() {
   d4134:	b530      	push	{r4, r5, lr}
   d4136:	b097      	sub	sp, #92	; 0x5c
  BLE.on();
   d4138:	f002 f988 	bl	d644c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d413c:	f002 f9d4 	bl	d64e8 <_ZNK8particle14BleLocalDevice2onEv>

  BLE.addCharacteristic(txCharacteristic);
   d4140:	f002 f984 	bl	d644c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4144:	4a36      	ldr	r2, [pc, #216]	; (d4220 <setup+0xec>)
   d4146:	4601      	mov	r1, r0
   d4148:	a80d      	add	r0, sp, #52	; 0x34
   d414a:	f002 fde9 	bl	d6d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d414e:	a80d      	add	r0, sp, #52	; 0x34
   d4150:	f002 fa51 	bl	d65f6 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4154:	f002 f97a 	bl	d644c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4158:	4a32      	ldr	r2, [pc, #200]	; (d4224 <setup+0xf0>)
   d415a:	4601      	mov	r1, r0
   d415c:	a80d      	add	r0, sp, #52	; 0x34
   d415e:	f002 fddf 	bl	d6d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4162:	a80d      	add	r0, sp, #52	; 0x34
   d4164:	f002 fa47 	bl	d65f6 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d4168:	a80d      	add	r0, sp, #52	; 0x34
   d416a:	f002 f800 	bl	d616e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d416e:	492e      	ldr	r1, [pc, #184]	; (d4228 <setup+0xf4>)
   d4170:	a803      	add	r0, sp, #12
   d4172:	f001 feff 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4176:	a903      	add	r1, sp, #12
   d4178:	a808      	add	r0, sp, #32
   d417a:	f001 fefb 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d417e:	a808      	add	r0, sp, #32
   d4180:	f001 ff3e 	bl	d6000 <_ZNK8particle7BleUuid4typeEv>
   d4184:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4186:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4188:	2c00      	cmp	r4, #0
   d418a:	d141      	bne.n	d4210 <setup+0xdc>
            uint16_t uuid16 = tempUUID.shorted();
   d418c:	f001 ff57 	bl	d603e <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4190:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4192:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4196:	2302      	movs	r3, #2
   d4198:	f10d 020a 	add.w	r2, sp, #10
   d419c:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d419e:	a80d      	add	r0, sp, #52	; 0x34
   d41a0:	f001 ffda 	bl	d6158 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);

  RGB.control(true);

  display.setup();
   d41a4:	4c21      	ldr	r4, [pc, #132]	; (d422c <setup+0xf8>)
  BLE.advertise(&data);
   d41a6:	f002 f951 	bl	d644c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41aa:	2200      	movs	r2, #0
   d41ac:	a90d      	add	r1, sp, #52	; 0x34
   d41ae:	f002 f9bb 	bl	d6528 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  RGB.control(true);
   d41b2:	2001      	movs	r0, #1
   d41b4:	f003 f932 	bl	d741c <_ZN8RGBClass7controlEb>
  display.setup();
   d41b8:	4620      	mov	r0, r4
   d41ba:	f001 fa17 	bl	d55ec <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d41be:	4620      	mov	r0, r4
   d41c0:	f000 fea4 	bl	d4f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d41c4:	2101      	movs	r1, #1
   d41c6:	4620      	mov	r0, r4
   d41c8:	f000 fce1 	bl	d4b8e <_ZN12Adafruit_GFX11setTextSizeEh>
   d41cc:	2500      	movs	r5, #0
   d41ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41d2:	e9c4 5304 	strd	r5, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("");
   d41d6:	4916      	ldr	r1, [pc, #88]	; (d4230 <setup+0xfc>)
   d41d8:	4620      	mov	r0, r4
   d41da:	f003 f8c0 	bl	d735e <_ZN5Print7printlnEPKc>
  display.display();
   d41de:	4620      	mov	r0, r4
   d41e0:	f001 f900 	bl	d53e4 <_ZN16Adafruit_SSD13067displayEv>
  RGB.color(255, 255, 0);
   d41e4:	21ff      	movs	r1, #255	; 0xff
   d41e6:	4608      	mov	r0, r1
   d41e8:	462a      	mov	r2, r5
   d41ea:	f003 f927 	bl	d743c <_ZN8RGBClass5colorEiii>
  RGB.brightness(255);
   d41ee:	2101      	movs	r1, #1
   d41f0:	20ff      	movs	r0, #255	; 0xff
   d41f2:	f003 f936 	bl	d7462 <_ZN8RGBClass10brightnessEhb>
  while(!BLE.connected());
   d41f6:	f002 f929 	bl	d644c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41fa:	f002 f9a8 	bl	d654e <_ZNK8particle14BleLocalDevice9connectedEv>
   d41fe:	2800      	cmp	r0, #0
   d4200:	d0f9      	beq.n	d41f6 <setup+0xc2>
  RGB.color(0, 0, 255);
   d4202:	2100      	movs	r1, #0
   d4204:	22ff      	movs	r2, #255	; 0xff
   d4206:	4608      	mov	r0, r1
   d4208:	f003 f918 	bl	d743c <_ZN8RGBClass5colorEiii>
}
   d420c:	b017      	add	sp, #92	; 0x5c
   d420e:	bd30      	pop	{r4, r5, pc}
   d4210:	f001 ff1a 	bl	d6048 <_ZNK8particle7BleUuid8rawBytesEv>
   d4214:	2300      	movs	r3, #0
   d4216:	9300      	str	r3, [sp, #0]
   d4218:	4602      	mov	r2, r0
   d421a:	2310      	movs	r3, #16
   d421c:	2107      	movs	r1, #7
   d421e:	e7be      	b.n	d419e <setup+0x6a>
   d4220:	2003e630 	.word	0x2003e630
   d4224:	2003e628 	.word	0x2003e628
   d4228:	2003e57c 	.word	0x2003e57c
   d422c:	2003e5b8 	.word	0x2003e5b8
   d4230:	000d8608 	.word	0x000d8608

000d4234 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4234:	b500      	push	{lr}
   d4236:	b093      	sub	sp, #76	; 0x4c
      uint8_t txBuf[UART_TX_BUF_SIZE];
      String message = "Elephants are pretty cool";
   d4238:	490b      	ldr	r1, [pc, #44]	; (d4268 <loop+0x34>)
   d423a:	a801      	add	r0, sp, #4
   d423c:	f003 fa27 	bl	d768e <_ZN6StringC1EPKc>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4240:	9a03      	ldr	r2, [sp, #12]
   d4242:	a905      	add	r1, sp, #20
   d4244:	a801      	add	r0, sp, #4
   d4246:	2300      	movs	r3, #0
   d4248:	3201      	adds	r2, #1
   d424a:	f003 fa46 	bl	d76da <_ZNK6String8getBytesEPhjj>
      message.toCharArray((char *)txBuf, message.length() + 1);
      txCharacteristic.setValue(txBuf, message.length() + 1);  
   d424e:	9a03      	ldr	r2, [sp, #12]
   d4250:	4806      	ldr	r0, [pc, #24]	; (d426c <loop+0x38>)
   d4252:	2300      	movs	r3, #0
   d4254:	3201      	adds	r2, #1
   d4256:	a905      	add	r1, sp, #20
   d4258:	f001 fff0 	bl	d623c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      String message = "Elephants are pretty cool";
   d425c:	a801      	add	r0, sp, #4
   d425e:	f003 f9cb 	bl	d75f8 <_ZN6StringD1Ev>
   d4262:	b013      	add	sp, #76	; 0x4c
   d4264:	f85d fb04 	ldr.w	pc, [sp], #4
   d4268:	000d8017 	.word	0x000d8017
   d426c:	2003e630 	.word	0x2003e630

000d4270 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4270:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4272:	4616      	mov	r6, r2
   d4274:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4276:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4278:	e9c0 2200 	strd	r2, r2, [r0]
   d427c:	4604      	mov	r4, r0
   d427e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4280:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4282:	4619      	mov	r1, r3
   d4284:	a806      	add	r0, sp, #24
   d4286:	f001 fe75 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d428a:	9916      	ldr	r1, [sp, #88]	; 0x58
   d428c:	4638      	mov	r0, r7
   d428e:	f001 fe71 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4292:	7833      	ldrb	r3, [r6, #0]
   d4294:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4298:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d429a:	9302      	str	r3, [sp, #8]
   d429c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d429e:	4620      	mov	r0, r4
   d42a0:	e9cd 7300 	strd	r7, r3, [sp]
   d42a4:	aa05      	add	r2, sp, #20
   d42a6:	ab06      	add	r3, sp, #24
   d42a8:	4629      	mov	r1, r5
   d42aa:	f002 fc17 	bl	d6adc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d42ae:	4620      	mov	r0, r4
   d42b0:	b011      	add	sp, #68	; 0x44
   d42b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d42b4 <_GLOBAL__sub_I_SystemMode>:
   d42b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
SYSTEM_THREAD(ENABLED);
   d42b8:	2100      	movs	r1, #0
   d42ba:	b091      	sub	sp, #68	; 0x44
              error_(SYSTEM_ERROR_NONE) {
   d42bc:	4d34      	ldr	r5, [pc, #208]	; (d4390 <_GLOBAL__sub_I_SystemMode+0xdc>)
SYSTEM_MODE(MANUAL);
   d42be:	4e35      	ldr	r6, [pc, #212]	; (d4394 <_GLOBAL__sub_I_SystemMode+0xe0>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d42c0:	f8df 810c 	ldr.w	r8, [pc, #268]	; d43d0 <_GLOBAL__sub_I_SystemMode+0x11c>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d42c4:	4f34      	ldr	r7, [pc, #208]	; (d4398 <_GLOBAL__sub_I_SystemMode+0xe4>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d42c6:	f8df 910c 	ldr.w	r9, [pc, #268]	; d43d4 <_GLOBAL__sub_I_SystemMode+0x120>
SYSTEM_THREAD(ENABLED);
   d42ca:	2001      	movs	r0, #1
   d42cc:	f001 fc14 	bl	d5af8 <system_thread_set_state>
   d42d0:	2400      	movs	r4, #0
    SleepResult() {}
   d42d2:	4b32      	ldr	r3, [pc, #200]	; (d439c <_GLOBAL__sub_I_SystemMode+0xe8>)
   d42d4:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d42d6:	602c      	str	r4, [r5, #0]
   d42d8:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d42da:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42dc:	2003      	movs	r0, #3
   d42de:	f001 fbfb 	bl	d5ad8 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d42e2:	4628      	mov	r0, r5
OledWingAdafruit display;
   d42e4:	4d2e      	ldr	r5, [pc, #184]	; (d43a0 <_GLOBAL__sub_I_SystemMode+0xec>)
SYSTEM_MODE(MANUAL);
   d42e6:	492f      	ldr	r1, [pc, #188]	; (d43a4 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d42e8:	4632      	mov	r2, r6
   d42ea:	f003 fcc5 	bl	d7c78 <__aeabi_atexit>
OledWingAdafruit display;
   d42ee:	2107      	movs	r1, #7
   d42f0:	4628      	mov	r0, r5
   d42f2:	f001 f94d 	bl	d5590 <_ZN16OledWingAdafruitC1Ei>
   d42f6:	4628      	mov	r0, r5
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d42f8:	4d2b      	ldr	r5, [pc, #172]	; (d43a8 <_GLOBAL__sub_I_SystemMode+0xf4>)
OledWingAdafruit display;
   d42fa:	492c      	ldr	r1, [pc, #176]	; (d43ac <_GLOBAL__sub_I_SystemMode+0xf8>)
   d42fc:	4632      	mov	r2, r6
   d42fe:	f003 fcbb 	bl	d7c78 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4302:	492b      	ldr	r1, [pc, #172]	; (d43b0 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d4304:	4628      	mov	r0, r5
   d4306:	f001 ff1b 	bl	d6140 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d430a:	492a      	ldr	r1, [pc, #168]	; (d43b4 <_GLOBAL__sub_I_SystemMode+0x100>)
   d430c:	4640      	mov	r0, r8
   d430e:	f001 ff17 	bl	d6140 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4312:	4929      	ldr	r1, [pc, #164]	; (d43b8 <_GLOBAL__sub_I_SystemMode+0x104>)
   d4314:	4638      	mov	r0, r7
   d4316:	f001 ff13 	bl	d6140 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d431a:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d431c:	4639      	mov	r1, r7
   d431e:	a806      	add	r0, sp, #24
   d4320:	f88d 3014 	strb.w	r3, [sp, #20]
   d4324:	f001 fe26 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
   d4328:	4629      	mov	r1, r5
   d432a:	a80b      	add	r0, sp, #44	; 0x2c
   d432c:	f001 fe22 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
   d4330:	4f22      	ldr	r7, [pc, #136]	; (d43bc <_GLOBAL__sub_I_SystemMode+0x108>)
   d4332:	4923      	ldr	r1, [pc, #140]	; (d43c0 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4334:	ab0b      	add	r3, sp, #44	; 0x2c
   d4336:	9300      	str	r3, [sp, #0]
   d4338:	aa05      	add	r2, sp, #20
   d433a:	ab06      	add	r3, sp, #24
   d433c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4340:	4648      	mov	r0, r9
   d4342:	f7ff ff95 	bl	d4270 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4346:	4632      	mov	r2, r6
   d4348:	4639      	mov	r1, r7
   d434a:	4648      	mov	r0, r9
   d434c:	f003 fc94 	bl	d7c78 <__aeabi_atexit>
   d4350:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4352:	4641      	mov	r1, r8
   d4354:	a806      	add	r0, sp, #24
   d4356:	f88d 3014 	strb.w	r3, [sp, #20]
   d435a:	f001 fe0b 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
   d435e:	4629      	mov	r1, r5
   d4360:	a80b      	add	r0, sp, #44	; 0x2c
   d4362:	f001 fe07 	bl	d5f74 <_ZN8particle7BleUuidC1ERKS0_>
   d4366:	4d17      	ldr	r5, [pc, #92]	; (d43c4 <_GLOBAL__sub_I_SystemMode+0x110>)
   d4368:	4b17      	ldr	r3, [pc, #92]	; (d43c8 <_GLOBAL__sub_I_SystemMode+0x114>)
   d436a:	9301      	str	r3, [sp, #4]
   d436c:	ab0b      	add	r3, sp, #44	; 0x2c
   d436e:	9300      	str	r3, [sp, #0]
   d4370:	aa05      	add	r2, sp, #20
   d4372:	ab06      	add	r3, sp, #24
   d4374:	4915      	ldr	r1, [pc, #84]	; (d43cc <_GLOBAL__sub_I_SystemMode+0x118>)
   d4376:	9402      	str	r4, [sp, #8]
   d4378:	4628      	mov	r0, r5
   d437a:	f7ff ff79 	bl	d4270 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d437e:	4632      	mov	r2, r6
   d4380:	4639      	mov	r1, r7
   d4382:	4628      	mov	r0, r5
   d4384:	f003 fc78 	bl	d7c78 <__aeabi_atexit>
   d4388:	b011      	add	sp, #68	; 0x44
   d438a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d438e:	bf00      	nop
   d4390:	2003e570 	.word	0x2003e570
   d4394:	2003e56c 	.word	0x2003e56c
   d4398:	2003e5a4 	.word	0x2003e5a4
   d439c:	ffff0000 	.word	0xffff0000
   d43a0:	2003e5b8 	.word	0x2003e5b8
   d43a4:	000d4125 	.word	0x000d4125
   d43a8:	2003e57c 	.word	0x2003e57c
   d43ac:	000d555d 	.word	0x000d555d
   d43b0:	000d8031 	.word	0x000d8031
   d43b4:	000d8056 	.word	0x000d8056
   d43b8:	000d807b 	.word	0x000d807b
   d43bc:	000d65f7 	.word	0x000d65f7
   d43c0:	000d80a0 	.word	0x000d80a0
   d43c4:	2003e628 	.word	0x2003e628
   d43c8:	000d40c5 	.word	0x000d40c5
   d43cc:	000d80a3 	.word	0x000d80a3
   d43d0:	2003e590 	.word	0x2003e590
   d43d4:	2003e630 	.word	0x2003e630

000d43d8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d43d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43dc:	b085      	sub	sp, #20
   d43de:	461f      	mov	r7, r3
   d43e0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d43e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d43e8:	eba8 0902 	sub.w	r9, r8, r2
   d43ec:	eba7 0a01 	sub.w	sl, r7, r1
   d43f0:	f1b9 0f00 	cmp.w	r9, #0
   d43f4:	bfb8      	it	lt
   d43f6:	f1c9 0900 	rsblt	r9, r9, #0
   d43fa:	f1ba 0f00 	cmp.w	sl, #0
   d43fe:	bfb8      	it	lt
   d4400:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4404:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4406:	4683      	mov	fp, r0
   d4408:	460c      	mov	r4, r1
   d440a:	4615      	mov	r5, r2
    if (steep) {
   d440c:	dd04      	ble.n	d4418 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d440e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4410:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4412:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4414:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4416:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4418:	42bc      	cmp	r4, r7
   d441a:	dd05      	ble.n	d4428 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d441c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d441e:	4645      	mov	r5, r8
   d4420:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4422:	4622      	mov	r2, r4
   d4424:	463c      	mov	r4, r7
   d4426:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4428:	1b3e      	subs	r6, r7, r4
   d442a:	b2b2      	uxth	r2, r6
   d442c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d442e:	eba8 0205 	sub.w	r2, r8, r5
   d4432:	2a00      	cmp	r2, #0
   d4434:	bfb8      	it	lt
   d4436:	4252      	neglt	r2, r2
   d4438:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d443a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d443e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4442:	4545      	cmp	r5, r8
   d4444:	bfb4      	ite	lt
   d4446:	2201      	movlt	r2, #1
   d4448:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    int16_t err = dx / 2;
   d444c:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d444e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4450:	42bc      	cmp	r4, r7
   d4452:	dc1c      	bgt.n	d448e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4454:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4458:	9303      	str	r3, [sp, #12]
        if (steep) {
   d445a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d445c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4460:	bfc7      	ittee	gt
   d4462:	4629      	movgt	r1, r5
   d4464:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4466:	462a      	movle	r2, r5
   d4468:	4621      	movle	r1, r4
   d446a:	4658      	mov	r0, fp
   d446c:	47c0      	blx	r8
        }
        err -= dy;
   d446e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4470:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4472:	1ab6      	subs	r6, r6, r2
   d4474:	b2b1      	uxth	r1, r6
   d4476:	b236      	sxth	r6, r6
        if (err < 0) {
   d4478:	2e00      	cmp	r6, #0
   d447a:	da05      	bge.n	d4488 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d447c:	9a02      	ldr	r2, [sp, #8]
   d447e:	4415      	add	r5, r2
            err += dx;
   d4480:	9a00      	ldr	r2, [sp, #0]
   d4482:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4484:	b22d      	sxth	r5, r5
            err += dx;
   d4486:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4488:	3401      	adds	r4, #1
   d448a:	b224      	sxth	r4, r4
   d448c:	e7e0      	b.n	d4450 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d448e:	b005      	add	sp, #20
   d4490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4494 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4494:	4770      	bx	lr

000d4496 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4496:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4498:	6804      	ldr	r4, [r0, #0]
   d449a:	6924      	ldr	r4, [r4, #16]
   d449c:	46a4      	mov	ip, r4
}
   d449e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d44a2:	4760      	bx	ip

000d44a4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d44a4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d44a6:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d44a8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d44ac:	9502      	str	r5, [sp, #8]
   d44ae:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d44b0:	46a4      	mov	ip, r4
}
   d44b2:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d44b4:	4760      	bx	ip

000d44b6 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d44b6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d44b8:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d44ba:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d44be:	9502      	str	r5, [sp, #8]
   d44c0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d44c2:	46a4      	mov	ip, r4
}
   d44c4:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d44c6:	4760      	bx	ip

000d44c8 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d44c8:	b470      	push	{r4, r5, r6}
   d44ca:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d44ce:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d44d2:	6804      	ldr	r4, [r0, #0]
   d44d4:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d44d8:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d44da:	46a4      	mov	ip, r4
}
   d44dc:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d44de:	4760      	bx	ip

000d44e0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d44e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44e4:	461c      	mov	r4, r3
    startWrite();
   d44e6:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d44e8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d44ec:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d44ee:	4605      	mov	r5, r0
   d44f0:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d44f2:	3c01      	subs	r4, #1
   d44f4:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d44f6:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d44f8:	b224      	sxth	r4, r4
    startWrite();
   d44fa:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d44fc:	682b      	ldr	r3, [r5, #0]
   d44fe:	f8cd 8004 	str.w	r8, [sp, #4]
   d4502:	9400      	str	r4, [sp, #0]
   d4504:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4506:	4628      	mov	r0, r5
   d4508:	463b      	mov	r3, r7
   d450a:	4632      	mov	r2, r6
   d450c:	4639      	mov	r1, r7
   d450e:	47a0      	blx	r4
    endWrite();
   d4510:	682b      	ldr	r3, [r5, #0]
   d4512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4514:	4628      	mov	r0, r5
}
   d4516:	b002      	add	sp, #8
   d4518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d451c:	4718      	bx	r3

000d451e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d451e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4522:	461d      	mov	r5, r3
    startWrite();
   d4524:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4526:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d452a:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d452c:	4604      	mov	r4, r0
   d452e:	4617      	mov	r7, r2
   d4530:	460e      	mov	r6, r1
    startWrite();
   d4532:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4534:	e9cd 7800 	strd	r7, r8, [sp]
   d4538:	6822      	ldr	r2, [r4, #0]
   d453a:	1e6b      	subs	r3, r5, #1
   d453c:	4433      	add	r3, r6
   d453e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4540:	4620      	mov	r0, r4
   d4542:	b21b      	sxth	r3, r3
   d4544:	463a      	mov	r2, r7
   d4546:	4631      	mov	r1, r6
   d4548:	47a8      	blx	r5
    endWrite();
   d454a:	6823      	ldr	r3, [r4, #0]
   d454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d454e:	4620      	mov	r0, r4
}
   d4550:	b002      	add	sp, #8
   d4552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4556:	4718      	bx	r3

000d4558 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4558:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d455c:	461e      	mov	r6, r3
    startWrite();
   d455e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4560:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4564:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4566:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d456a:	460c      	mov	r4, r1
   d456c:	4605      	mov	r5, r0
   d456e:	4617      	mov	r7, r2
    startWrite();
   d4570:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4572:	4426      	add	r6, r4
   d4574:	42b4      	cmp	r4, r6
   d4576:	682b      	ldr	r3, [r5, #0]
   d4578:	da0b      	bge.n	d4592 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d457a:	f8cd 8000 	str.w	r8, [sp]
   d457e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4582:	4621      	mov	r1, r4
   d4584:	464b      	mov	r3, r9
   d4586:	463a      	mov	r2, r7
   d4588:	4628      	mov	r0, r5
   d458a:	3401      	adds	r4, #1
   d458c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d458e:	b224      	sxth	r4, r4
   d4590:	e7f0      	b.n	d4574 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4594:	4628      	mov	r0, r5
}
   d4596:	b002      	add	sp, #8
   d4598:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d459c:	4718      	bx	r3

000d459e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d459e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d45a0:	6802      	ldr	r2, [r0, #0]
   d45a2:	9101      	str	r1, [sp, #4]
   d45a4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d45a8:	9100      	str	r1, [sp, #0]
   d45aa:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d45ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d45b0:	2200      	movs	r2, #0
   d45b2:	4611      	mov	r1, r2
   d45b4:	47a0      	blx	r4
}
   d45b6:	b002      	add	sp, #8
   d45b8:	bd10      	pop	{r4, pc}

000d45ba <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d45ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d45be:	461d      	mov	r5, r3
    startWrite();
   d45c0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d45c2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d45c6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d45c8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d45cc:	4604      	mov	r4, r0
   d45ce:	460f      	mov	r7, r1
   d45d0:	4616      	mov	r6, r2
    startWrite();
   d45d2:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d45d4:	6823      	ldr	r3, [r4, #0]
   d45d6:	f8cd 8000 	str.w	r8, [sp]
   d45da:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d45de:	4632      	mov	r2, r6
   d45e0:	462b      	mov	r3, r5
   d45e2:	4639      	mov	r1, r7
   d45e4:	4620      	mov	r0, r4
   d45e6:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d45e8:	6823      	ldr	r3, [r4, #0]
   d45ea:	f8cd 8000 	str.w	r8, [sp]
   d45ee:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d45f2:	4432      	add	r2, r6
   d45f4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d45f8:	4639      	mov	r1, r7
   d45fa:	462b      	mov	r3, r5
   d45fc:	4620      	mov	r0, r4
   d45fe:	b212      	sxth	r2, r2
   d4600:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4602:	6823      	ldr	r3, [r4, #0]
   d4604:	f8cd 8000 	str.w	r8, [sp]
   d4608:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d460c:	4632      	mov	r2, r6
   d460e:	464b      	mov	r3, r9
   d4610:	4639      	mov	r1, r7
   d4612:	4620      	mov	r0, r4
   d4614:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4616:	1e6b      	subs	r3, r5, #1
   d4618:	19d9      	adds	r1, r3, r7
   d461a:	6823      	ldr	r3, [r4, #0]
   d461c:	f8cd 8000 	str.w	r8, [sp]
   d4620:	6a1d      	ldr	r5, [r3, #32]
   d4622:	4620      	mov	r0, r4
   d4624:	464b      	mov	r3, r9
   d4626:	4632      	mov	r2, r6
   d4628:	b209      	sxth	r1, r1
   d462a:	47a8      	blx	r5
    endWrite();
   d462c:	6823      	ldr	r3, [r4, #0]
   d462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4630:	4620      	mov	r0, r4
}
   d4632:	b002      	add	sp, #8
   d4634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4638:	4718      	bx	r3

000d463a <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d463a:	4770      	bx	lr

000d463c <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d463c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4640:	4299      	cmp	r1, r3
        uint16_t color) {
   d4642:	4616      	mov	r6, r2
   d4644:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4648:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d464c:	6802      	ldr	r2, [r0, #0]
   d464e:	4680      	mov	r8, r0
   d4650:	460d      	mov	r5, r1
   d4652:	461c      	mov	r4, r3
    if(x0 == x1){
   d4654:	d113      	bne.n	d467e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4656:	42be      	cmp	r6, r7
   d4658:	bfc8      	it	gt
   d465a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d465c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4660:	bfc4      	itt	gt
   d4662:	463e      	movgt	r6, r7
   d4664:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4666:	1c7b      	adds	r3, r7, #1
   d4668:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d466a:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d466c:	b21b      	sxth	r3, r3
   d466e:	4632      	mov	r2, r6
   d4670:	4629      	mov	r1, r5
   d4672:	4640      	mov	r0, r8
   d4674:	46a4      	mov	ip, r4
}
   d4676:	b003      	add	sp, #12
   d4678:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d467c:	4760      	bx	ip
    } else if(y0 == y1){
   d467e:	42be      	cmp	r6, r7
   d4680:	d10a      	bne.n	d4698 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4682:	4299      	cmp	r1, r3
   d4684:	bfc2      	ittt	gt
   d4686:	460b      	movgt	r3, r1
   d4688:	4625      	movgt	r5, r4
   d468a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d468c:	1c63      	adds	r3, r4, #1
   d468e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4692:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4694:	1b5b      	subs	r3, r3, r5
   d4696:	e7e9      	b.n	d466c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4698:	6953      	ldr	r3, [r2, #20]
   d469a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d469c:	e9cd 7900 	strd	r7, r9, [sp]
   d46a0:	f8d8 3000 	ldr.w	r3, [r8]
   d46a4:	4640      	mov	r0, r8
   d46a6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d46a8:	4632      	mov	r2, r6
   d46aa:	4623      	mov	r3, r4
   d46ac:	4629      	mov	r1, r5
   d46ae:	47b8      	blx	r7
        endWrite();
   d46b0:	f8d8 3000 	ldr.w	r3, [r8]
   d46b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46b6:	4640      	mov	r0, r8
}
   d46b8:	b003      	add	sp, #12
   d46ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d46be:	4718      	bx	r3

000d46c0 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d46c0:	f001 0303 	and.w	r3, r1, #3
   d46c4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d46c8:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d46ca:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d46cc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d46d0:	bf59      	ittee	pl
   d46d2:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d46d4:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d46d6:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d46d8:	81c3      	strhmi	r3, [r0, #14]
}
   d46da:	4770      	bx	lr

000d46dc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d46dc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d46de:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d46e0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d46e2:	4a07      	ldr	r2, [pc, #28]	; (d4700 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d46e4:	4d07      	ldr	r5, [pc, #28]	; (d4704 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d46e6:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   d46e8:	2400      	movs	r4, #0
    _width    = WIDTH;
   d46ea:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d46ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d46f0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d46f4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d46f6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d46f8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d46fa:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d46fc:	6204      	str	r4, [r0, #32]
}
   d46fe:	bd30      	pop	{r4, r5, pc}
   d4700:	01000101 	.word	0x01000101
   d4704:	000d85b0 	.word	0x000d85b0

000d4708 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d470c:	b089      	sub	sp, #36	; 0x24
   d470e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d4712:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4714:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4718:	9304      	str	r3, [sp, #16]
   d471a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d471e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4720:	9305      	str	r3, [sp, #20]
   d4722:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d4726:	4604      	mov	r4, r0
    startWrite();
   d4728:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d472a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d472e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4732:	bf48      	it	mi
   d4734:	f108 020e 	addmi.w	r2, r8, #14
   d4738:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d473c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d473e:	4635      	mov	r5, r6
   d4740:	9b03      	ldr	r3, [sp, #12]
   d4742:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4744:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4748:	189a      	adds	r2, r3, r2
   d474a:	9b05      	ldr	r3, [sp, #20]
   d474c:	428b      	cmp	r3, r1
   d474e:	b212      	sxth	r2, r2
   d4750:	dd27      	ble.n	d47a2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4752:	9b04      	ldr	r3, [sp, #16]
   d4754:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d4756:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d475a:	9306      	str	r3, [sp, #24]
   d475c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d4760:	4580      	cmp	r8, r0
   d4762:	fa1f f189 	uxth.w	r1, r9
   d4766:	dd17      	ble.n	d4798 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4768:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d476a:	bf05      	ittet	eq
   d476c:	9b06      	ldreq	r3, [sp, #24]
   d476e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d4770:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4772:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4774:	bf18      	it	ne
   d4776:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d4778:	062b      	lsls	r3, r5, #24
   d477a:	d50a      	bpl.n	d4792 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d477c:	9b02      	ldr	r3, [sp, #8]
   d477e:	6820      	ldr	r0, [r4, #0]
   d4780:	9207      	str	r2, [sp, #28]
   d4782:	4419      	add	r1, r3
   d4784:	6983      	ldr	r3, [r0, #24]
   d4786:	b209      	sxth	r1, r1
   d4788:	461f      	mov	r7, r3
   d478a:	4620      	mov	r0, r4
   d478c:	4653      	mov	r3, sl
   d478e:	47b8      	blx	r7
   d4790:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d4792:	f109 0901 	add.w	r9, r9, #1
   d4796:	e7e1      	b.n	d475c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4798:	9b01      	ldr	r3, [sp, #4]
   d479a:	3301      	adds	r3, #1
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	445e      	add	r6, fp
   d47a0:	e7ce      	b.n	d4740 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d47a2:	6823      	ldr	r3, [r4, #0]
   d47a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47a6:	4620      	mov	r0, r4
}
   d47a8:	b009      	add	sp, #36	; 0x24
   d47aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d47ae:	4718      	bx	r3

000d47b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d47b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47b4:	ed2d 8b02 	vpush	{d8}
   d47b8:	b091      	sub	sp, #68	; 0x44
   d47ba:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d47bc:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d47be:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d47c2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d47c6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d47ca:	9103      	str	r1, [sp, #12]
   d47cc:	461f      	mov	r7, r3
   d47ce:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d47d2:	9304      	str	r3, [sp, #16]
   d47d4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d47d6:	2a00      	cmp	r2, #0
   d47d8:	f040 80c5 	bne.w	d4966 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d47dc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d47e0:	428b      	cmp	r3, r1
   d47e2:	f340 814c 	ble.w	d4a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d47e6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d47ea:	42b3      	cmp	r3, r6
   d47ec:	f340 8147 	ble.w	d4a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d47f0:	2306      	movs	r3, #6
   d47f2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d47f6:	2b00      	cmp	r3, #0
   d47f8:	f340 8141 	ble.w	d4a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d47fc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4800:	2b00      	cmp	r3, #0
   d4802:	f340 813c 	ble.w	d4a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4806:	7f03      	ldrb	r3, [r0, #28]
   d4808:	b91b      	cbnz	r3, d4812 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d480a:	2faf      	cmp	r7, #175	; 0xaf
   d480c:	bf84      	itt	hi
   d480e:	3701      	addhi	r7, #1
   d4810:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d4812:	f8db 3000 	ldr.w	r3, [fp]
   d4816:	4658      	mov	r0, fp
   d4818:	695b      	ldr	r3, [r3, #20]
   d481a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d481c:	2205      	movs	r2, #5
   d481e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4820:	2200      	movs	r2, #0
   d4822:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4824:	4a98      	ldr	r2, [pc, #608]	; (d4a88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d4826:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d482a:	18d3      	adds	r3, r2, r3
   d482c:	930c      	str	r3, [sp, #48]	; 0x30
   d482e:	b2b3      	uxth	r3, r6
   d4830:	9306      	str	r3, [sp, #24]
   d4832:	9a05      	ldr	r2, [sp, #20]
   d4834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4836:	5c9b      	ldrb	r3, [r3, r2]
   d4838:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d483a:	b2ab      	uxth	r3, r5
   d483c:	930b      	str	r3, [sp, #44]	; 0x2c
   d483e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4842:	9308      	str	r3, [sp, #32]
   d4844:	9b03      	ldr	r3, [sp, #12]
   d4846:	fb02 f905 	mul.w	r9, r2, r5
   d484a:	fa19 f983 	uxtah	r9, r9, r3
   d484e:	fa0f f389 	sxth.w	r3, r9
   d4852:	ee08 3a10 	vmov	s16, r3
   d4856:	2308      	movs	r3, #8
   d4858:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d485a:	9b03      	ldr	r3, [sp, #12]
   d485c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4860:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4864:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d4868:	9a07      	ldr	r2, [sp, #28]
   d486a:	f8db 3000 	ldr.w	r3, [fp]
   d486e:	07d2      	lsls	r2, r2, #31
   d4870:	d552      	bpl.n	d4918 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d4872:	2d01      	cmp	r5, #1
   d4874:	fa1f f289 	uxth.w	r2, r9
   d4878:	d13e      	bne.n	d48f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d487a:	2c01      	cmp	r4, #1
   d487c:	d13c      	bne.n	d48f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d487e:	699b      	ldr	r3, [r3, #24]
   d4880:	9906      	ldr	r1, [sp, #24]
   d4882:	461f      	mov	r7, r3
   d4884:	9b04      	ldr	r3, [sp, #16]
   d4886:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d4888:	b212      	sxth	r2, r2
   d488a:	4651      	mov	r1, sl
   d488c:	4658      	mov	r0, fp
   d488e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4890:	f109 0301 	add.w	r3, r9, #1
   d4894:	fa4f f983 	sxtb.w	r9, r3
   d4898:	9b07      	ldr	r3, [sp, #28]
   d489a:	085b      	lsrs	r3, r3, #1
   d489c:	9307      	str	r3, [sp, #28]
   d489e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d48a0:	3b01      	subs	r3, #1
   d48a2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d48a6:	930a      	str	r3, [sp, #40]	; 0x28
   d48a8:	d1de      	bne.n	d4868 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d48aa:	9f05      	ldr	r7, [sp, #20]
   d48ac:	3701      	adds	r7, #1
   d48ae:	b27b      	sxtb	r3, r7
   d48b0:	9305      	str	r3, [sp, #20]
   d48b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d48b4:	3b01      	subs	r3, #1
   d48b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d48ba:	9309      	str	r3, [sp, #36]	; 0x24
   d48bc:	d1b9      	bne.n	d4832 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d48be:	9b04      	ldr	r3, [sp, #16]
   d48c0:	4543      	cmp	r3, r8
   d48c2:	d00f      	beq.n	d48e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d48c4:	2d01      	cmp	r5, #1
   d48c6:	f8db 3000 	ldr.w	r3, [fp]
   d48ca:	d13b      	bne.n	d4944 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d48cc:	2c01      	cmp	r4, #1
   d48ce:	d139      	bne.n	d4944 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d48d0:	9908      	ldr	r1, [sp, #32]
   d48d2:	f8cd 8000 	str.w	r8, [sp]
   d48d6:	3105      	adds	r1, #5
   d48d8:	6a1c      	ldr	r4, [r3, #32]
   d48da:	4632      	mov	r2, r6
   d48dc:	2308      	movs	r3, #8
   d48de:	b209      	sxth	r1, r1
   d48e0:	4658      	mov	r0, fp
   d48e2:	47a0      	blx	r4
        endWrite();
   d48e4:	f8db 3000 	ldr.w	r3, [fp]
   d48e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48ea:	4658      	mov	r0, fp
}
   d48ec:	b011      	add	sp, #68	; 0x44
   d48ee:	ecbd 8b02 	vpop	{d8}
   d48f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d48f6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d48f8:	9906      	ldr	r1, [sp, #24]
   d48fa:	fb14 f202 	smulbb	r2, r4, r2
   d48fe:	440a      	add	r2, r1
   d4900:	9904      	ldr	r1, [sp, #16]
   d4902:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4904:	9400      	str	r4, [sp, #0]
   d4906:	69db      	ldr	r3, [r3, #28]
   d4908:	ee18 1a10 	vmov	r1, s16
   d490c:	461f      	mov	r7, r3
   d490e:	b212      	sxth	r2, r2
   d4910:	462b      	mov	r3, r5
   d4912:	4658      	mov	r0, fp
   d4914:	47b8      	blx	r7
   d4916:	e7bb      	b.n	d4890 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d4918:	9a04      	ldr	r2, [sp, #16]
   d491a:	4542      	cmp	r2, r8
   d491c:	d0b8      	beq.n	d4890 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d491e:	2d01      	cmp	r5, #1
   d4920:	fa1f f289 	uxth.w	r2, r9
   d4924:	d107      	bne.n	d4936 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d4926:	2c01      	cmp	r4, #1
   d4928:	d105      	bne.n	d4936 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d492a:	699b      	ldr	r3, [r3, #24]
   d492c:	9906      	ldr	r1, [sp, #24]
   d492e:	461f      	mov	r7, r3
   d4930:	440a      	add	r2, r1
   d4932:	4643      	mov	r3, r8
   d4934:	e7a8      	b.n	d4888 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4936:	9906      	ldr	r1, [sp, #24]
   d4938:	f8cd 8004 	str.w	r8, [sp, #4]
   d493c:	fb14 f202 	smulbb	r2, r4, r2
   d4940:	440a      	add	r2, r1
   d4942:	e7df      	b.n	d4904 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4946:	f8cd 8004 	str.w	r8, [sp, #4]
   d494a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d494e:	9a08      	ldr	r2, [sp, #32]
   d4950:	00e4      	lsls	r4, r4, #3
   d4952:	440a      	add	r2, r1
   d4954:	4611      	mov	r1, r2
   d4956:	9400      	str	r4, [sp, #0]
   d4958:	69dc      	ldr	r4, [r3, #28]
   d495a:	4632      	mov	r2, r6
   d495c:	462b      	mov	r3, r5
   d495e:	b209      	sxth	r1, r1
   d4960:	4658      	mov	r0, fp
   d4962:	47a0      	blx	r4
        endWrite();
   d4964:	e7be      	b.n	d48e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4966:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d4968:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d496a:	6812      	ldr	r2, [r2, #0]
   d496c:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d496e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d4970:	b2ff      	uxtb	r7, r7
   d4972:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d4976:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d497a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d497c:	789a      	ldrb	r2, [r3, #2]
   d497e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d4980:	78da      	ldrb	r2, [r3, #3]
   d4982:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4984:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4986:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d498a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d498e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d4990:	d801      	bhi.n	d4996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d4992:	2c01      	cmp	r4, #1
   d4994:	d957      	bls.n	d4a46 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d4996:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d499a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d499c:	fa0f f38a 	sxth.w	r3, sl
   d49a0:	9307      	str	r3, [sp, #28]
        startWrite();
   d49a2:	f8db 3000 	ldr.w	r3, [fp]
   d49a6:	4658      	mov	r0, fp
   d49a8:	695b      	ldr	r3, [r3, #20]
   d49aa:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49ac:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d49ae:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49b2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d49b4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d49b8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d49ba:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d49bc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d49be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d49c0:	429f      	cmp	r7, r3
   d49c2:	d28f      	bcs.n	d48e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49c4:	9b07      	ldr	r3, [sp, #28]
   d49c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d49c8:	443b      	add	r3, r7
   d49ca:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d49ce:	2200      	movs	r2, #0
   d49d0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d49d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49d4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d49d6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49da:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d49de:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d49e2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d49e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d49e6:	9905      	ldr	r1, [sp, #20]
   d49e8:	4291      	cmp	r1, r2
   d49ea:	d241      	bcs.n	d4a70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d49ec:	1c5a      	adds	r2, r3, #1
   d49ee:	b2d2      	uxtb	r2, r2
   d49f0:	075b      	lsls	r3, r3, #29
   d49f2:	920c      	str	r2, [sp, #48]	; 0x30
   d49f4:	d107      	bne.n	d4a06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d49f6:	9b06      	ldr	r3, [sp, #24]
   d49f8:	9906      	ldr	r1, [sp, #24]
   d49fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d49fc:	3301      	adds	r3, #1
   d49fe:	b29b      	uxth	r3, r3
   d4a00:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4a04:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d4a06:	f019 0f80 	tst.w	r9, #128	; 0x80
   d4a0a:	d012      	beq.n	d4a32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4a0c:	2d01      	cmp	r5, #1
   d4a0e:	f8db 3000 	ldr.w	r3, [fp]
   d4a12:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4a16:	d11a      	bne.n	d4a4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4a18:	2c01      	cmp	r4, #1
   d4a1a:	d118      	bne.n	d4a4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4a1e:	699b      	ldr	r3, [r3, #24]
   d4a20:	4411      	add	r1, r2
   d4a22:	9a05      	ldr	r2, [sp, #20]
   d4a24:	4411      	add	r1, r2
   d4a26:	461e      	mov	r6, r3
   d4a28:	4652      	mov	r2, sl
   d4a2a:	9b04      	ldr	r3, [sp, #16]
   d4a2c:	b209      	sxth	r1, r1
   d4a2e:	4658      	mov	r0, fp
   d4a30:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4a32:	9e05      	ldr	r6, [sp, #20]
   d4a34:	3601      	adds	r6, #1
   d4a36:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4a38:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4a3c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4a3e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4a44:	e7ce      	b.n	d49e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4a46:	2300      	movs	r3, #0
   d4a48:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4a4c:	e7a9      	b.n	d49a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a4e:	9805      	ldr	r0, [sp, #20]
   d4a50:	9a08      	ldr	r2, [sp, #32]
   d4a52:	4402      	add	r2, r0
   d4a54:	fb02 1105 	mla	r1, r2, r5, r1
   d4a58:	9a04      	ldr	r2, [sp, #16]
   d4a5a:	e9cd 4200 	strd	r4, r2, [sp]
   d4a5e:	69db      	ldr	r3, [r3, #28]
   d4a60:	ee18 2a10 	vmov	r2, s16
   d4a64:	461e      	mov	r6, r3
   d4a66:	b209      	sxth	r1, r1
   d4a68:	462b      	mov	r3, r5
   d4a6a:	4658      	mov	r0, fp
   d4a6c:	47b0      	blx	r6
   d4a6e:	e7e0      	b.n	d4a32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4a72:	3701      	adds	r7, #1
   d4a74:	4498      	add	r8, r3
   d4a76:	fa5f f888 	uxtb.w	r8, r8
   d4a7a:	b2ff      	uxtb	r7, r7
   d4a7c:	e79f      	b.n	d49be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4a7e:	b011      	add	sp, #68	; 0x44
   d4a80:	ecbd 8b02 	vpop	{d8}
   d4a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a88:	000d80a6 	.word	0x000d80a6

000d4a8c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4a8e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4a90:	b085      	sub	sp, #20
   d4a92:	4604      	mov	r4, r0
   d4a94:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4a96:	2a00      	cmp	r2, #0
   d4a98:	d134      	bne.n	d4b04 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4a9a:	290a      	cmp	r1, #10
   d4a9c:	d108      	bne.n	d4ab0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4a9e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4aa0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4aa2:	7e42      	ldrb	r2, [r0, #25]
   d4aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4aa8:	8263      	strh	r3, [r4, #18]
}
   d4aaa:	2001      	movs	r0, #1
   d4aac:	b005      	add	sp, #20
   d4aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4ab0:	290d      	cmp	r1, #13
   d4ab2:	d0fa      	beq.n	d4aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4ab4:	7ee1      	ldrb	r1, [r4, #27]
   d4ab6:	7e00      	ldrb	r0, [r0, #24]
   d4ab8:	7e65      	ldrb	r5, [r4, #25]
   d4aba:	b171      	cbz	r1, d4ada <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4abc:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4ac0:	2106      	movs	r1, #6
   d4ac2:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4ac6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4aca:	42b1      	cmp	r1, r6
   d4acc:	bfc1      	itttt	gt
   d4ace:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4ad2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4ad4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4ad8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4ada:	8ae2      	ldrh	r2, [r4, #22]
   d4adc:	9201      	str	r2, [sp, #4]
   d4ade:	8aa2      	ldrh	r2, [r4, #20]
   d4ae0:	9200      	str	r2, [sp, #0]
   d4ae2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4ae6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4aea:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4aee:	4620      	mov	r0, r4
   d4af0:	f7ff fe5e 	bl	d47b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4af4:	7e23      	ldrb	r3, [r4, #24]
   d4af6:	8a22      	ldrh	r2, [r4, #16]
   d4af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4afc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4b00:	8223      	strh	r3, [r4, #16]
   d4b02:	e7d2      	b.n	d4aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4b04:	290a      	cmp	r1, #10
   d4b06:	d107      	bne.n	d4b18 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4b08:	2300      	movs	r3, #0
   d4b0a:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4b0c:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4b0e:	7e41      	ldrb	r1, [r0, #25]
   d4b10:	8a42      	ldrh	r2, [r0, #18]
   d4b12:	fb01 2303 	mla	r3, r1, r3, r2
   d4b16:	e7c7      	b.n	d4aa8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4b18:	290d      	cmp	r1, #13
   d4b1a:	d0c6      	beq.n	d4aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4b1c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4b1e:	42a9      	cmp	r1, r5
   d4b20:	d3c3      	bcc.n	d4aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4b22:	7a51      	ldrb	r1, [r2, #9]
   d4b24:	4299      	cmp	r1, r3
   d4b26:	d3c0      	bcc.n	d4aaa <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4b28:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4b2a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4b2c:	b2ed      	uxtb	r5, r5
   d4b2e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4b32:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4b34:	b32f      	cbz	r7, d4b82 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4b36:	78e9      	ldrb	r1, [r5, #3]
   d4b38:	b319      	cbz	r1, d4b82 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4b3a:	7ee1      	ldrb	r1, [r4, #27]
   d4b3c:	7e00      	ldrb	r0, [r0, #24]
   d4b3e:	7e66      	ldrb	r6, [r4, #25]
   d4b40:	b191      	cbz	r1, d4b68 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4b42:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4b46:	4439      	add	r1, r7
   d4b48:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4b4c:	fb00 7101 	mla	r1, r0, r1, r7
   d4b50:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4b54:	42b9      	cmp	r1, r7
   d4b56:	dd07      	ble.n	d4b68 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4b58:	2700      	movs	r7, #0
   d4b5a:	8227      	strh	r7, [r4, #16]
   d4b5c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4b60:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4b62:	fb02 1206 	mla	r2, r2, r6, r1
   d4b66:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4b68:	8ae2      	ldrh	r2, [r4, #22]
   d4b6a:	9201      	str	r2, [sp, #4]
   d4b6c:	8aa2      	ldrh	r2, [r4, #20]
   d4b6e:	9200      	str	r2, [sp, #0]
   d4b70:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4b74:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4b78:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	f7ff fe17 	bl	d47b0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4b82:	7929      	ldrb	r1, [r5, #4]
   d4b84:	7e23      	ldrb	r3, [r4, #24]
   d4b86:	8a22      	ldrh	r2, [r4, #16]
   d4b88:	fb01 2303 	mla	r3, r1, r3, r2
   d4b8c:	e7b8      	b.n	d4b00 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4b8e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4b8e:	2901      	cmp	r1, #1
   d4b90:	bf38      	it	cc
   d4b92:	2101      	movcc	r1, #1
   d4b94:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4b96:	7641      	strb	r1, [r0, #25]
}
   d4b98:	4770      	bx	lr

000d4b9a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4b9a:	4770      	bx	lr

000d4b9c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4b9c:	b510      	push	{r4, lr}
  }
   d4b9e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4ba0:	4604      	mov	r4, r0
  }
   d4ba2:	f003 f86e 	bl	d7c82 <_ZdlPvj>
   d4ba6:	4620      	mov	r0, r4
   d4ba8:	bd10      	pop	{r4, pc}

000d4baa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4baa:	b40e      	push	{r1, r2, r3}
   d4bac:	b503      	push	{r0, r1, lr}
   d4bae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4bb0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4bb2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4bb6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4bb8:	f002 fbf9 	bl	d73ae <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4bbc:	b002      	add	sp, #8
   d4bbe:	f85d eb04 	ldr.w	lr, [sp], #4
   d4bc2:	b003      	add	sp, #12
   d4bc4:	4770      	bx	lr
	...

000d4bc8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4bc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4bca:	4604      	mov	r4, r0
   d4bcc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4bce:	7922      	ldrb	r2, [r4, #4]
   d4bd0:	68a3      	ldr	r3, [r4, #8]
   d4bd2:	b132      	cbz	r2, d4be2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4bd4:	b9a3      	cbnz	r3, d4c00 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4bd6:	490b      	ldr	r1, [pc, #44]	; (d4c04 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4bd8:	b002      	add	sp, #8
   d4bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4bde:	f002 bbab 	b.w	d7338 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4be2:	4a09      	ldr	r2, [pc, #36]	; (d4c08 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4be4:	7b26      	ldrb	r6, [r4, #12]
   d4be6:	4d09      	ldr	r5, [pc, #36]	; (d4c0c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4be8:	4909      	ldr	r1, [pc, #36]	; (d4c10 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4bea:	7b64      	ldrb	r4, [r4, #13]
   d4bec:	2e01      	cmp	r6, #1
   d4bee:	bf18      	it	ne
   d4bf0:	4629      	movne	r1, r5
   d4bf2:	e9cd 1400 	strd	r1, r4, [sp]
   d4bf6:	4907      	ldr	r1, [pc, #28]	; (d4c14 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4bf8:	f7ff ffd7 	bl	d4baa <_ZN5Print6printfEPKcz>
  }
   d4bfc:	b002      	add	sp, #8
   d4bfe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4c00:	4a05      	ldr	r2, [pc, #20]	; (d4c18 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4c02:	e7ef      	b.n	d4be4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4c04:	000d8611 	.word	0x000d8611
   d4c08:	000d8608 	.word	0x000d8608
   d4c0c:	000d860d 	.word	0x000d860d
   d4c10:	000d8609 	.word	0x000d8609
   d4c14:	000d8627 	.word	0x000d8627
   d4c18:	000d8600 	.word	0x000d8600

000d4c1c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c1c:	b510      	push	{r4, lr}
   d4c1e:	4b04      	ldr	r3, [pc, #16]	; (d4c30 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4c20:	6003      	str	r3, [r0, #0]
   d4c22:	4604      	mov	r4, r0
  if(buffer) {
   d4c24:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c26:	b108      	cbz	r0, d4c2c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4c28:	f000 fff2 	bl	d5c10 <free>
    buffer = NULL;
  }
}
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	bd10      	pop	{r4, pc}
   d4c30:	000d8b00 	.word	0x000d8b00

000d4c34 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c34:	b510      	push	{r4, lr}
   d4c36:	4604      	mov	r4, r0
}
   d4c38:	f7ff fff0 	bl	d4c1c <_ZN16Adafruit_SSD1306D1Ev>
   d4c3c:	4620      	mov	r0, r4
   d4c3e:	2150      	movs	r1, #80	; 0x50
   d4c40:	f003 f81f 	bl	d7c82 <_ZdlPvj>
   d4c44:	4620      	mov	r0, r4
   d4c46:	bd10      	pop	{r4, pc}

000d4c48 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c48:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c4a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c4c:	db4b      	blt.n	d4ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c4e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4c52:	428c      	cmp	r4, r1
   d4c54:	dd47      	ble.n	d4ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c56:	2a00      	cmp	r2, #0
   d4c58:	db45      	blt.n	d4ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c5a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4c5e:	4294      	cmp	r4, r2
   d4c60:	dd41      	ble.n	d4ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4c62:	7e84      	ldrb	r4, [r0, #26]
   d4c64:	2c02      	cmp	r4, #2
   d4c66:	d01f      	beq.n	d4ca8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4c68:	2c03      	cmp	r4, #3
   d4c6a:	d026      	beq.n	d4cba <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4c6c:	2c01      	cmp	r4, #1
   d4c6e:	d104      	bne.n	d4c7a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4c70:	8904      	ldrh	r4, [r0, #8]
   d4c72:	43d2      	mvns	r2, r2
   d4c74:	4414      	add	r4, r2
      break;
   d4c76:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4c78:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4c7a:	2b01      	cmp	r3, #1
   d4c7c:	d023      	beq.n	d4cc6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4c7e:	2b02      	cmp	r3, #2
   d4c80:	d032      	beq.n	d4ce8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4c82:	bb83      	cbnz	r3, d4ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4c84:	2a00      	cmp	r2, #0
   d4c86:	4613      	mov	r3, r2
   d4c88:	8904      	ldrh	r4, [r0, #8]
   d4c8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c8c:	bfb8      	it	lt
   d4c8e:	1dd3      	addlt	r3, r2, #7
   d4c90:	10db      	asrs	r3, r3, #3
   d4c92:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4c96:	f002 0207 	and.w	r2, r2, #7
   d4c9a:	2301      	movs	r3, #1
   d4c9c:	4093      	lsls	r3, r2
   d4c9e:	5c42      	ldrb	r2, [r0, r1]
   d4ca0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4ca4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4ca6:	e01e      	b.n	d4ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4ca8:	8904      	ldrh	r4, [r0, #8]
   d4caa:	43c9      	mvns	r1, r1
   d4cac:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4cae:	8944      	ldrh	r4, [r0, #10]
   d4cb0:	43d2      	mvns	r2, r2
   d4cb2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4cb4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4cb6:	b212      	sxth	r2, r2
      break;
   d4cb8:	e7df      	b.n	d4c7a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4cba:	8944      	ldrh	r4, [r0, #10]
   d4cbc:	43c9      	mvns	r1, r1
   d4cbe:	440c      	add	r4, r1
      break;
   d4cc0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4cc2:	b222      	sxth	r2, r4
      break;
   d4cc4:	e7d9      	b.n	d4c7a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4cc6:	2a00      	cmp	r2, #0
   d4cc8:	8904      	ldrh	r4, [r0, #8]
   d4cca:	4613      	mov	r3, r2
   d4ccc:	bfb8      	it	lt
   d4cce:	1dd3      	addlt	r3, r2, #7
   d4cd0:	10db      	asrs	r3, r3, #3
   d4cd2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cd6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4cd8:	f002 0007 	and.w	r0, r2, #7
   d4cdc:	2201      	movs	r2, #1
   d4cde:	4082      	lsls	r2, r0
   d4ce0:	5c58      	ldrb	r0, [r3, r1]
   d4ce2:	4302      	orrs	r2, r0
   d4ce4:	545a      	strb	r2, [r3, r1]
}
   d4ce6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4ce8:	2a00      	cmp	r2, #0
   d4cea:	4613      	mov	r3, r2
   d4cec:	8904      	ldrh	r4, [r0, #8]
   d4cee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4cf0:	bfb8      	it	lt
   d4cf2:	1dd3      	addlt	r3, r2, #7
   d4cf4:	10db      	asrs	r3, r3, #3
   d4cf6:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cfa:	f002 0207 	and.w	r2, r2, #7
   d4cfe:	2301      	movs	r3, #1
   d4d00:	fa03 f202 	lsl.w	r2, r3, r2
   d4d04:	5c43      	ldrb	r3, [r0, r1]
   d4d06:	405a      	eors	r2, r3
   d4d08:	e7cc      	b.n	d4ca4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4d0a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4d0a:	b510      	push	{r4, lr}
   d4d0c:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4d0e:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4d12:	2101      	movs	r1, #1
   d4d14:	b280      	uxth	r0, r0
   d4d16:	f002 ff42 	bl	d7b9e <digitalWrite>
   d4d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d1c:	b118      	cbz	r0, d4d26 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4d22:	f002 bbdc 	b.w	d74de <_ZN8SPIClass14endTransactionEv>
}
   d4d26:	bd10      	pop	{r4, pc}

000d4d28 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4d28:	b570      	push	{r4, r5, r6, lr}
   d4d2a:	4604      	mov	r4, r0
   d4d2c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d2e:	2600      	movs	r6, #0
   d4d30:	f7ff fcd4 	bl	d46dc <_ZN12Adafruit_GFXC1Ess>
   d4d34:	4b11      	ldr	r3, [pc, #68]	; (d4d7c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4d36:	6023      	str	r3, [r4, #0]
   d4d38:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4d3a:	b915      	cbnz	r5, d4d42 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4d3c:	f002 ff74 	bl	d7c28 <_Z19__fetch_global_Wirev>
   d4d40:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d42:	23ff      	movs	r3, #255	; 0xff
   d4d44:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4d48:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4d4c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4d50:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4d54:	4b0a      	ldr	r3, [pc, #40]	; (d4d80 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4d56:	63a3      	str	r3, [r4, #56]	; 0x38
   d4d58:	2301      	movs	r3, #1
   d4d5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4d5e:	9b05      	ldr	r3, [sp, #20]
   d4d60:	64a3      	str	r3, [r4, #72]	; 0x48
   d4d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4d66:	9b06      	ldr	r3, [sp, #24]
   d4d68:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4d6a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4d6e:	6426      	str	r6, [r4, #64]	; 0x40
   d4d70:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4d74:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4d76:	4620      	mov	r0, r4
   d4d78:	bd70      	pop	{r4, r5, r6, pc}
   d4d7a:	bf00      	nop
   d4d7c:	000d8b00 	.word	0x000d8b00
   d4d80:	000d864c 	.word	0x000d864c

000d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d86:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4d88:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4d8a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4d8c:	b190      	cbz	r0, d4db4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4d8e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4d92:	f002 f96b 	bl	d706c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4d96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d98:	6803      	ldr	r3, [r0, #0]
   d4d9a:	2100      	movs	r1, #0
   d4d9c:	689b      	ldr	r3, [r3, #8]
   d4d9e:	4798      	blx	r3
    WIRE_WRITE(c);
   d4da0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4da2:	6803      	ldr	r3, [r0, #0]
   d4da4:	4629      	mov	r1, r5
   d4da6:	689b      	ldr	r3, [r3, #8]
   d4da8:	4798      	blx	r3
    wire->endTransmission();
   d4daa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4db0:	f002 b963 	b.w	d707a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4db4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4db8:	4601      	mov	r1, r0
   d4dba:	b298      	uxth	r0, r3
   d4dbc:	f002 feef 	bl	d7b9e <digitalWrite>
  if(spi) {
   d4dc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4dc2:	b120      	cbz	r0, d4dce <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4dc4:	4629      	mov	r1, r5
}
   d4dc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4dca:	f002 bc0f 	b.w	d75ec <_ZN8SPIClass8transferEh>
   d4dce:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4dd0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4dd2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4dd6:	ea05 0107 	and.w	r1, r5, r7
   d4dda:	b280      	uxth	r0, r0
   d4ddc:	f002 fedf 	bl	d7b9e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4de0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4de4:	2101      	movs	r1, #1
   d4de6:	b280      	uxth	r0, r0
   d4de8:	f002 fed9 	bl	d7b9e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4dec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4df0:	2100      	movs	r1, #0
   d4df2:	b280      	uxth	r0, r0
   d4df4:	f002 fed3 	bl	d7b9e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4df8:	3e01      	subs	r6, #1
   d4dfa:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4dfe:	d1e8      	bne.n	d4dd2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e02 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e02:	b538      	push	{r3, r4, r5, lr}
   d4e04:	4604      	mov	r4, r0
  TRANSACTION_START
   d4e06:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e08:	460d      	mov	r5, r1
  TRANSACTION_START
   d4e0a:	b180      	cbz	r0, d4e2e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4e0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4e0e:	f002 f91f 	bl	d7050 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4e12:	2d00      	cmp	r5, #0
   d4e14:	4620      	mov	r0, r4
   d4e16:	bf14      	ite	ne
   d4e18:	21a7      	movne	r1, #167	; 0xa7
   d4e1a:	21a6      	moveq	r1, #166	; 0xa6
   d4e1c:	f7ff ffb2 	bl	d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4e20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e22:	b188      	cbz	r0, d4e48 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4e24:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e2a:	f002 b911 	b.w	d7050 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e30:	b118      	cbz	r0, d4e3a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4e32:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4e36:	f002 fb6b 	bl	d7510 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4e3a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4e3e:	2100      	movs	r1, #0
   d4e40:	b280      	uxth	r0, r0
   d4e42:	f002 feac 	bl	d7b9e <digitalWrite>
   d4e46:	e7e4      	b.n	d4e12 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4e48:	4620      	mov	r0, r4
}
   d4e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e4e:	f7ff bf5c 	b.w	d4d0a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e56:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4e58:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e5a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4e5c:	188f      	adds	r7, r1, r2
   d4e5e:	b340      	cbz	r0, d4eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4e60:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e64:	f002 f902 	bl	d706c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e6a:	6803      	ldr	r3, [r0, #0]
   d4e6c:	2100      	movs	r1, #0
   d4e6e:	689b      	ldr	r3, [r3, #8]
   d4e70:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4e72:	2601      	movs	r6, #1
    while(n--) {
   d4e74:	42bd      	cmp	r5, r7
   d4e76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e78:	d017      	beq.n	d4eaa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4e7a:	2e1f      	cmp	r6, #31
   d4e7c:	d90c      	bls.n	d4e98 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4e7e:	f002 f8fc 	bl	d707a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4e82:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e88:	f002 f8f0 	bl	d706c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e8e:	6803      	ldr	r3, [r0, #0]
   d4e90:	2100      	movs	r1, #0
   d4e92:	689b      	ldr	r3, [r3, #8]
   d4e94:	4798      	blx	r3
        bytesOut = 1;
   d4e96:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4e98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e9a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e9e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4ea0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4ea2:	689b      	ldr	r3, [r3, #8]
   d4ea4:	4798      	blx	r3
      bytesOut++;
   d4ea6:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4ea8:	e7e4      	b.n	d4e74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4eaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4eae:	f002 b8e4 	b.w	d707a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4eb2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4eb6:	4601      	mov	r1, r0
   d4eb8:	b298      	uxth	r0, r3
   d4eba:	f002 fe70 	bl	d7b9e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ebe:	42af      	cmp	r7, r5
   d4ec0:	d022      	beq.n	d4f08 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ec4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4ec8:	b118      	cbz	r0, d4ed2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4eca:	4649      	mov	r1, r9
   d4ecc:	f002 fb8e 	bl	d75ec <_ZN8SPIClass8transferEh>
   d4ed0:	e7f5      	b.n	d4ebe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4ed2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4ed4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4ed8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4edc:	ea09 0108 	and.w	r1, r9, r8
   d4ee0:	b280      	uxth	r0, r0
   d4ee2:	f002 fe5c 	bl	d7b9e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4ee6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4eea:	2101      	movs	r1, #1
   d4eec:	b280      	uxth	r0, r0
   d4eee:	f002 fe56 	bl	d7b9e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4ef2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4ef6:	2100      	movs	r1, #0
   d4ef8:	b280      	uxth	r0, r0
   d4efa:	f002 fe50 	bl	d7b9e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4efe:	3e01      	subs	r6, #1
   d4f00:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4f04:	d1e8      	bne.n	d4ed8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4f06:	e7da      	b.n	d4ebe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f0c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4f0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f10:	1dda      	adds	r2, r3, #7
   d4f12:	bf48      	it	mi
   d4f14:	f103 020e 	addmi.w	r2, r3, #14
   d4f18:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4f1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4f1e:	10d2      	asrs	r2, r2, #3
   d4f20:	435a      	muls	r2, r3
   d4f22:	2100      	movs	r1, #0
   d4f24:	f003 b80a 	b.w	d7f3c <memset>

000d4f28 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4f28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4f2c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4f30:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4f34:	4604      	mov	r4, r0
   d4f36:	460f      	mov	r7, r1
   d4f38:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f3a:	b1b3      	cbz	r3, d4f6a <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4f3c:	4620      	mov	r0, r4
   d4f3e:	f7ff ffe5 	bl	d4f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4f42:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4f46:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4f4a:	2820      	cmp	r0, #32
   d4f4c:	dc1f      	bgt.n	d4f8e <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4f4e:	2320      	movs	r3, #32
   d4f50:	2201      	movs	r2, #1
   d4f52:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4f56:	3820      	subs	r0, #32
   d4f58:	2373      	movs	r3, #115	; 0x73
   d4f5a:	3973      	subs	r1, #115	; 0x73
   d4f5c:	9300      	str	r3, [sp, #0]
   d4f5e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4f62:	4b89      	ldr	r3, [pc, #548]	; (d5188 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4f64:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4f68:	e01f      	b.n	d4faa <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f6a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f6e:	1dd8      	adds	r0, r3, #7
   d4f70:	bf48      	it	mi
   d4f72:	f103 000e 	addmi.w	r0, r3, #14
   d4f76:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4f7a:	10c0      	asrs	r0, r0, #3
   d4f7c:	4358      	muls	r0, r3
   d4f7e:	f000 fe3f 	bl	d5c00 <malloc>
   d4f82:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4f84:	2800      	cmp	r0, #0
   d4f86:	d1d9      	bne.n	d4f3c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4f88:	b004      	add	sp, #16
   d4f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4f8e:	2340      	movs	r3, #64	; 0x40
   d4f90:	f04f 0c01 	mov.w	ip, #1
   d4f94:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d4f98:	2352      	movs	r3, #82	; 0x52
   d4f9a:	3840      	subs	r0, #64	; 0x40
   d4f9c:	3952      	subs	r1, #82	; 0x52
   d4f9e:	9300      	str	r3, [sp, #0]
   d4fa0:	4b7a      	ldr	r3, [pc, #488]	; (d518c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d4fa2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4fa6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4faa:	f340 024f 	sbfx	r2, r0, #1, #16
   d4fae:	f341 014f 	sbfx	r1, r1, #1, #16
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	f7ff fba8 	bl	d4708 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d4fb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d4fba:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d4fbe:	2800      	cmp	r0, #0
   d4fc0:	d078      	beq.n	d50b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4fc2:	2d00      	cmp	r5, #0
   d4fc4:	d174      	bne.n	d50b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d4fc6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4fca:	2b20      	cmp	r3, #32
   d4fcc:	bf0c      	ite	eq
   d4fce:	253c      	moveq	r5, #60	; 0x3c
   d4fd0:	253d      	movne	r5, #61	; 0x3d
   d4fd2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d4fd6:	f1b8 0f00 	cmp.w	r8, #0
   d4fda:	d001      	beq.n	d4fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d4fdc:	f002 f83c 	bl	d7058 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d4fe0:	b1fe      	cbz	r6, d5022 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d4fe2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4fe6:	2800      	cmp	r0, #0
   d4fe8:	db1b      	blt.n	d5022 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d4fea:	2101      	movs	r1, #1
   d4fec:	b280      	uxth	r0, r0
   d4fee:	f002 fdc5 	bl	d7b7c <pinMode>
    digitalWrite(rstPin, HIGH);
   d4ff2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4ff6:	2101      	movs	r1, #1
   d4ff8:	b280      	uxth	r0, r0
   d4ffa:	f002 fdd0 	bl	d7b9e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d4ffe:	2001      	movs	r0, #1
   d5000:	f000 fe2e 	bl	d5c60 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5004:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5008:	2100      	movs	r1, #0
   d500a:	b280      	uxth	r0, r0
   d500c:	f002 fdc7 	bl	d7b9e <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5010:	200a      	movs	r0, #10
   d5012:	f000 fe25 	bl	d5c60 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5016:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d501a:	2101      	movs	r1, #1
   d501c:	b280      	uxth	r0, r0
   d501e:	f002 fdbe 	bl	d7b9e <digitalWrite>
  TRANSACTION_START
   d5022:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5024:	2800      	cmp	r0, #0
   d5026:	d074      	beq.n	d5112 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5028:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d502a:	f002 f811 	bl	d7050 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d502e:	2204      	movs	r2, #4
   d5030:	4957      	ldr	r1, [pc, #348]	; (d5190 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d5032:	4620      	mov	r0, r4
   d5034:	f7ff ff0d 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5038:	7aa1      	ldrb	r1, [r4, #10]
   d503a:	3901      	subs	r1, #1
   d503c:	b2c9      	uxtb	r1, r1
   d503e:	4620      	mov	r0, r4
   d5040:	f7ff fea0 	bl	d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5044:	4953      	ldr	r1, [pc, #332]	; (d5194 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d5046:	2204      	movs	r2, #4
   d5048:	4620      	mov	r0, r4
   d504a:	f7ff ff02 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d504e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5052:	2b01      	cmp	r3, #1
   d5054:	bf0c      	ite	eq
   d5056:	2110      	moveq	r1, #16
   d5058:	2114      	movne	r1, #20
   d505a:	4620      	mov	r0, r4
   d505c:	f7ff fe92 	bl	d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5060:	2204      	movs	r2, #4
   d5062:	494d      	ldr	r1, [pc, #308]	; (d5198 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5064:	4620      	mov	r0, r4
   d5066:	f7ff fef4 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d506a:	68a3      	ldr	r3, [r4, #8]
   d506c:	4a4b      	ldr	r2, [pc, #300]	; (d519c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d506e:	4293      	cmp	r3, r2
   d5070:	d15c      	bne.n	d512c <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5072:	494b      	ldr	r1, [pc, #300]	; (d51a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5074:	2204      	movs	r2, #4
   d5076:	4620      	mov	r0, r4
   d5078:	f7ff feeb 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d507c:	21d9      	movs	r1, #217	; 0xd9
   d507e:	4620      	mov	r0, r4
   d5080:	f7ff fe80 	bl	d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5084:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5088:	2b01      	cmp	r3, #1
   d508a:	bf0c      	ite	eq
   d508c:	2122      	moveq	r1, #34	; 0x22
   d508e:	21f1      	movne	r1, #241	; 0xf1
   d5090:	4620      	mov	r0, r4
   d5092:	f7ff fe77 	bl	d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5096:	4620      	mov	r0, r4
   d5098:	4942      	ldr	r1, [pc, #264]	; (d51a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d509a:	2206      	movs	r2, #6
   d509c:	f7ff fed9 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d50a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d50a2:	2800      	cmp	r0, #0
   d50a4:	d063      	beq.n	d516e <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d50a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d50a8:	f001 ffd2 	bl	d7050 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d50ac:	2001      	movs	r0, #1
   d50ae:	e76b      	b.n	d4f88 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d50b0:	b26d      	sxtb	r5, r5
   d50b2:	e78e      	b.n	d4fd2 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d50b4:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d50b8:	2101      	movs	r1, #1
   d50ba:	b280      	uxth	r0, r0
   d50bc:	f002 fd5e 	bl	d7b7c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d50c0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50c4:	2101      	movs	r1, #1
   d50c6:	b280      	uxth	r0, r0
   d50c8:	f002 fd58 	bl	d7b7c <pinMode>
    SSD1306_DESELECT
   d50cc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50d0:	2101      	movs	r1, #1
   d50d2:	b280      	uxth	r0, r0
   d50d4:	f002 fd63 	bl	d7b9e <digitalWrite>
    if(spi) { // Hardware SPI
   d50d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d50da:	b13d      	cbz	r5, d50ec <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d50dc:	f1b8 0f00 	cmp.w	r8, #0
   d50e0:	f43f af7e 	beq.w	d4fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d50e4:	4628      	mov	r0, r5
   d50e6:	f002 f9e9 	bl	d74bc <_ZN8SPIClass5beginEv>
   d50ea:	e779      	b.n	d4fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d50ec:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d50f0:	2101      	movs	r1, #1
   d50f2:	b280      	uxth	r0, r0
   d50f4:	f002 fd42 	bl	d7b7c <pinMode>
      pinMode(clkPin , OUTPUT);
   d50f8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d50fc:	2101      	movs	r1, #1
   d50fe:	b280      	uxth	r0, r0
   d5100:	f002 fd3c 	bl	d7b7c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5104:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5108:	4629      	mov	r1, r5
   d510a:	b280      	uxth	r0, r0
   d510c:	f002 fd47 	bl	d7b9e <digitalWrite>
   d5110:	e766      	b.n	d4fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5112:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5114:	b118      	cbz	r0, d511e <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5116:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d511a:	f002 f9f9 	bl	d7510 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d511e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5122:	2100      	movs	r1, #0
   d5124:	b280      	uxth	r0, r0
   d5126:	f002 fd3a 	bl	d7b9e <digitalWrite>
   d512a:	e780      	b.n	d502e <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d512c:	4a1e      	ldr	r2, [pc, #120]	; (d51a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d512e:	4293      	cmp	r3, r2
   d5130:	d10e      	bne.n	d5150 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5132:	491e      	ldr	r1, [pc, #120]	; (d51ac <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5134:	2203      	movs	r2, #3
   d5136:	4620      	mov	r0, r4
   d5138:	f7ff fe8b 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d513c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5140:	2b01      	cmp	r3, #1
   d5142:	bf0c      	ite	eq
   d5144:	219f      	moveq	r1, #159	; 0x9f
   d5146:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5148:	4620      	mov	r0, r4
   d514a:	f7ff fe1b 	bl	d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d514e:	e795      	b.n	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5150:	4a17      	ldr	r2, [pc, #92]	; (d51b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5152:	4293      	cmp	r3, r2
   d5154:	d192      	bne.n	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5156:	4917      	ldr	r1, [pc, #92]	; (d51b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5158:	2203      	movs	r2, #3
   d515a:	4620      	mov	r0, r4
   d515c:	f7ff fe79 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5160:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5164:	2b01      	cmp	r3, #1
   d5166:	bf0c      	ite	eq
   d5168:	2110      	moveq	r1, #16
   d516a:	21af      	movne	r1, #175	; 0xaf
   d516c:	e7ec      	b.n	d5148 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d516e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5172:	2101      	movs	r1, #1
   d5174:	b280      	uxth	r0, r0
   d5176:	f002 fd12 	bl	d7b9e <digitalWrite>
   d517a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d517c:	2800      	cmp	r0, #0
   d517e:	d095      	beq.n	d50ac <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5180:	f002 f9ad 	bl	d74de <_ZN8SPIClass14endTransactionEv>
   d5184:	e792      	b.n	d50ac <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5186:	bf00      	nop
   d5188:	000d8918 	.word	0x000d8918
   d518c:	000d8658 	.word	0x000d8658
   d5190:	000d8b60 	.word	0x000d8b60
   d5194:	000d8b64 	.word	0x000d8b64
   d5198:	000d8b68 	.word	0x000d8b68
   d519c:	00200080 	.word	0x00200080
   d51a0:	000d8b72 	.word	0x000d8b72
   d51a4:	000d8b6c 	.word	0x000d8b6c
   d51a8:	00400080 	.word	0x00400080
   d51ac:	000d8b76 	.word	0x000d8b76
   d51b0:	00100060 	.word	0x00100060
   d51b4:	000d8b79 	.word	0x000d8b79

000d51b8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51b8:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51ba:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51bc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51c0:	db3d      	blt.n	d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d51c2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d51c6:	4294      	cmp	r4, r2
   d51c8:	dd39      	ble.n	d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d51ca:	2900      	cmp	r1, #0
      w += x;
   d51cc:	bfbe      	ittt	lt
   d51ce:	185b      	addlt	r3, r3, r1
   d51d0:	b21b      	sxthlt	r3, r3
      x  = 0;
   d51d2:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d51d4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d51d8:	18ce      	adds	r6, r1, r3
   d51da:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d51dc:	bfc4      	itt	gt
   d51de:	1a63      	subgt	r3, r4, r1
   d51e0:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d51e2:	2b00      	cmp	r3, #0
   d51e4:	dd2b      	ble.n	d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d51e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d51e8:	10d6      	asrs	r6, r2, #3
   d51ea:	fb14 1106 	smlabb	r1, r4, r6, r1
   d51ee:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d51f0:	f002 0007 	and.w	r0, r2, #7
   d51f4:	2201      	movs	r2, #1
   d51f6:	4082      	lsls	r2, r0
      switch(color) {
   d51f8:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d51fa:	b2d2      	uxtb	r2, r2
      switch(color) {
   d51fc:	d016      	beq.n	d522c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d51fe:	2d02      	cmp	r5, #2
   d5200:	d00b      	beq.n	d521a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5202:	b9e5      	cbnz	r5, d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5204:	43d2      	mvns	r2, r2
   d5206:	b2d2      	uxtb	r2, r2
   d5208:	440b      	add	r3, r1
   d520a:	4299      	cmp	r1, r3
   d520c:	d017      	beq.n	d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d520e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5212:	4010      	ands	r0, r2
   d5214:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5218:	e7f7      	b.n	d520a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d521a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d521c:	4299      	cmp	r1, r3
   d521e:	d00e      	beq.n	d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5220:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5224:	4050      	eors	r0, r2
   d5226:	f801 0c01 	strb.w	r0, [r1, #-1]
   d522a:	e7f7      	b.n	d521c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d522c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d522e:	4299      	cmp	r1, r3
   d5230:	d005      	beq.n	d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5232:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5236:	4310      	orrs	r0, r2
   d5238:	f801 0c01 	strb.w	r0, [r1, #-1]
   d523c:	e7f7      	b.n	d522e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d523e:	bd70      	pop	{r4, r5, r6, pc}

000d5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5240:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5242:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5244:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5248:	db76      	blt.n	d5338 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d524a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d524e:	42a9      	cmp	r1, r5
   d5250:	da72      	bge.n	d5338 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5252:	2a00      	cmp	r2, #0
      __h += __y;
   d5254:	bfbc      	itt	lt
   d5256:	18d2      	addlt	r2, r2, r3
   d5258:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d525a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d525e:	bfb8      	it	lt
   d5260:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5262:	18d7      	adds	r7, r2, r3
   d5264:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5266:	bfc4      	itt	gt
   d5268:	1aa3      	subgt	r3, r4, r2
   d526a:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d526c:	2b00      	cmp	r3, #0
   d526e:	dd63      	ble.n	d5338 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5270:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5274:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5276:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d527a:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d527e:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5280:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5284:	d023      	beq.n	d52ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5286:	f1c2 0208 	rsb	r2, r2, #8
   d528a:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d528c:	4d2c      	ldr	r5, [pc, #176]	; (d5340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d528e:	4293      	cmp	r3, r2
   d5290:	bf3c      	itt	cc
   d5292:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5296:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d529a:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d529c:	bf3c      	itt	cc
   d529e:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d52a2:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d52a6:	2e01      	cmp	r6, #1
   d52a8:	d007      	beq.n	d52ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d52aa:	2e02      	cmp	r6, #2
   d52ac:	d02e      	beq.n	d530c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d52ae:	b94e      	cbnz	r6, d52c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d52b0:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52b4:	ea2c 0505 	bic.w	r5, ip, r5
   d52b8:	e003      	b.n	d52c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d52ba:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52be:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d52c2:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d52c4:	4293      	cmp	r3, r2
   d52c6:	d337      	bcc.n	d5338 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d52c8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d52cc:	440c      	add	r4, r1
        h -= mod;
   d52ce:	1a9a      	subs	r2, r3, r2
   d52d0:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d52d2:	2a07      	cmp	r2, #7
   d52d4:	d90e      	bls.n	d52f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d52d6:	2e02      	cmp	r6, #2
   d52d8:	d11d      	bne.n	d5316 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d52da:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d52dc:	7821      	ldrb	r1, [r4, #0]
   d52de:	43c9      	mvns	r1, r1
   d52e0:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d52e2:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d52e4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d52e8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d52ea:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d52ec:	440c      	add	r4, r1
            } while(h >= 8);
   d52ee:	d8f5      	bhi.n	d52dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d52f0:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d52f4:	b302      	cbz	r2, d5338 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d52f6:	4b13      	ldr	r3, [pc, #76]	; (d5344 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d52f8:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d52fa:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d52fc:	d019      	beq.n	d5332 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d52fe:	2e02      	cmp	r6, #2
   d5300:	d01b      	beq.n	d533a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5302:	b9ce      	cbnz	r6, d5338 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5304:	7822      	ldrb	r2, [r4, #0]
   d5306:	ea22 0303 	bic.w	r3, r2, r3
   d530a:	e014      	b.n	d5336 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d530c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5310:	ea85 050c 	eor.w	r5, r5, ip
   d5314:	e7d5      	b.n	d52c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5316:	2e00      	cmp	r6, #0
   d5318:	bf14      	ite	ne
   d531a:	25ff      	movne	r5, #255	; 0xff
   d531c:	2500      	moveq	r5, #0
   d531e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5320:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5322:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5324:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5328:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d532a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d532c:	440c      	add	r4, r1
            } while(h >= 8);
   d532e:	d8f7      	bhi.n	d5320 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5330:	e7de      	b.n	d52f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5332:	7822      	ldrb	r2, [r4, #0]
   d5334:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5336:	7023      	strb	r3, [r4, #0]
}
   d5338:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d533a:	7822      	ldrb	r2, [r4, #0]
   d533c:	4053      	eors	r3, r2
   d533e:	e7fa      	b.n	d5336 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5340:	000d8b50 	.word	0x000d8b50
   d5344:	000d8b58 	.word	0x000d8b58

000d5348 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5348:	b470      	push	{r4, r5, r6}
   d534a:	4614      	mov	r4, r2
  switch(rotation) {
   d534c:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d534e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5352:	2a02      	cmp	r2, #2
   d5354:	d00d      	beq.n	d5372 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5356:	2a03      	cmp	r2, #3
   d5358:	d018      	beq.n	d538c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d535a:	2a01      	cmp	r2, #1
   d535c:	d111      	bne.n	d5382 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d535e:	8902      	ldrh	r2, [r0, #8]
   d5360:	43e4      	mvns	r4, r4
   d5362:	4414      	add	r4, r2
   d5364:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5366:	9603      	str	r6, [sp, #12]
   d5368:	460a      	mov	r2, r1
   d536a:	4621      	mov	r1, r4
}
   d536c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d536e:	f7ff bf67 	b.w	d5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5372:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5374:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5376:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5378:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d537a:	4414      	add	r4, r2
    x -= (w-1);
   d537c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d537e:	b224      	sxth	r4, r4
    x -= (w-1);
   d5380:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5382:	9603      	str	r6, [sp, #12]
   d5384:	4622      	mov	r2, r4
}
   d5386:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5388:	f7ff bf16 	b.w	d51b8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d538c:	8945      	ldrh	r5, [r0, #10]
   d538e:	4419      	add	r1, r3
   d5390:	1a69      	subs	r1, r5, r1
   d5392:	b209      	sxth	r1, r1
    break;
   d5394:	e7e7      	b.n	d5366 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5396 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5396:	b430      	push	{r4, r5}
   d5398:	4614      	mov	r4, r2
  switch(rotation) {
   d539a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d539c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d53a0:	2a02      	cmp	r2, #2
   d53a2:	d00d      	beq.n	d53c0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d53a4:	2a03      	cmp	r2, #3
   d53a6:	d018      	beq.n	d53da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d53a8:	2a01      	cmp	r2, #1
   d53aa:	d111      	bne.n	d53d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d53ac:	18e2      	adds	r2, r4, r3
   d53ae:	8904      	ldrh	r4, [r0, #8]
   d53b0:	1aa4      	subs	r4, r4, r2
   d53b2:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53b4:	9502      	str	r5, [sp, #8]
   d53b6:	460a      	mov	r2, r1
   d53b8:	4621      	mov	r1, r4
}
   d53ba:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53bc:	f7ff befc 	b.w	d51b8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d53c0:	8902      	ldrh	r2, [r0, #8]
   d53c2:	43c9      	mvns	r1, r1
   d53c4:	4411      	add	r1, r2
    y -= (h-1);
   d53c6:	18e2      	adds	r2, r4, r3
   d53c8:	8944      	ldrh	r4, [r0, #10]
   d53ca:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d53cc:	b209      	sxth	r1, r1
    y -= (h-1);
   d53ce:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d53d0:	9502      	str	r5, [sp, #8]
   d53d2:	4622      	mov	r2, r4
}
   d53d4:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d53d6:	f7ff bf33 	b.w	d5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d53da:	8942      	ldrh	r2, [r0, #10]
   d53dc:	43c9      	mvns	r1, r1
   d53de:	4411      	add	r1, r2
   d53e0:	b209      	sxth	r1, r1
    break;
   d53e2:	e7e7      	b.n	d53b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d53e4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d53e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d53e8:	4604      	mov	r4, r0
  TRANSACTION_START
   d53ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d53ec:	2800      	cmp	r0, #0
   d53ee:	d042      	beq.n	d5476 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d53f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d53f2:	f001 fe2d 	bl	d7050 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d53f6:	4947      	ldr	r1, [pc, #284]	; (d5514 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d53f8:	2205      	movs	r2, #5
   d53fa:	4620      	mov	r0, r4
   d53fc:	f7ff fd29 	bl	d4e52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5400:	7a21      	ldrb	r1, [r4, #8]
   d5402:	3901      	subs	r1, #1
   d5404:	4620      	mov	r0, r4
   d5406:	b2c9      	uxtb	r1, r1
   d5408:	f7ff fcbc 	bl	d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d540c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5410:	1dde      	adds	r6, r3, #7
   d5412:	bf48      	it	mi
   d5414:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5418:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d541c:	8923      	ldrh	r3, [r4, #8]
   d541e:	10f6      	asrs	r6, r6, #3
   d5420:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5424:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5428:	2800      	cmp	r0, #0
   d542a:	d03a      	beq.n	d54a2 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d542c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5430:	f001 fe1c 	bl	d706c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5434:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5436:	6803      	ldr	r3, [r0, #0]
   d5438:	2140      	movs	r1, #64	; 0x40
   d543a:	689b      	ldr	r3, [r3, #8]
   d543c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d543e:	2701      	movs	r7, #1
    while(count--) {
   d5440:	42b5      	cmp	r5, r6
   d5442:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5444:	d024      	beq.n	d5490 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5446:	2f1f      	cmp	r7, #31
   d5448:	d90c      	bls.n	d5464 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d544a:	f001 fe16 	bl	d707a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d544e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5454:	f001 fe0a 	bl	d706c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5458:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d545a:	6803      	ldr	r3, [r0, #0]
   d545c:	2140      	movs	r1, #64	; 0x40
   d545e:	689b      	ldr	r3, [r3, #8]
   d5460:	4798      	blx	r3
        bytesOut = 1;
   d5462:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5464:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5466:	f815 1b01 	ldrb.w	r1, [r5], #1
   d546a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d546c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d546e:	689b      	ldr	r3, [r3, #8]
   d5470:	4798      	blx	r3
      bytesOut++;
   d5472:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5474:	e7e4      	b.n	d5440 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5476:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5478:	b118      	cbz	r0, d5482 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d547a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d547e:	f002 f847 	bl	d7510 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5482:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5486:	2100      	movs	r1, #0
   d5488:	b280      	uxth	r0, r0
   d548a:	f002 fb88 	bl	d7b9e <digitalWrite>
   d548e:	e7b2      	b.n	d53f6 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5490:	f001 fdf3 	bl	d707a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5494:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5496:	b378      	cbz	r0, d54f8 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5498:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d549a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d549e:	f001 bdd7 	b.w	d7050 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d54a2:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d54a6:	2101      	movs	r1, #1
   d54a8:	b280      	uxth	r0, r0
   d54aa:	f002 fb78 	bl	d7b9e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d54ae:	42b5      	cmp	r5, r6
   d54b0:	d0f0      	beq.n	d5494 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d54b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d54b4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d54b8:	b118      	cbz	r0, d54c2 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d54ba:	4649      	mov	r1, r9
   d54bc:	f002 f896 	bl	d75ec <_ZN8SPIClass8transferEh>
   d54c0:	e7f5      	b.n	d54ae <_ZN16Adafruit_SSD13067displayEv+0xca>
   d54c2:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d54c4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d54c8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d54cc:	ea09 0108 	and.w	r1, r9, r8
   d54d0:	b280      	uxth	r0, r0
   d54d2:	f002 fb64 	bl	d7b9e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d54d6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d54da:	2101      	movs	r1, #1
   d54dc:	b280      	uxth	r0, r0
   d54de:	f002 fb5e 	bl	d7b9e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d54e2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d54e6:	2100      	movs	r1, #0
   d54e8:	b280      	uxth	r0, r0
   d54ea:	f002 fb58 	bl	d7b9e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d54ee:	3f01      	subs	r7, #1
   d54f0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d54f4:	d1e8      	bne.n	d54c8 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d54f6:	e7da      	b.n	d54ae <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d54f8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54fc:	2101      	movs	r1, #1
   d54fe:	b280      	uxth	r0, r0
   d5500:	f002 fb4d 	bl	d7b9e <digitalWrite>
   d5504:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5506:	b118      	cbz	r0, d5510 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5508:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d550c:	f001 bfe7 	b.w	d74de <_ZN8SPIClass14endTransactionEv>
}
   d5510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5514:	000d8b7c 	.word	0x000d8b7c

000d5518 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5518:	2100      	movs	r1, #0
   d551a:	220a      	movs	r2, #10
   d551c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5520:	4770      	bx	lr

000d5522 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5522:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5524:	b510      	push	{r4, lr}
   d5526:	4604      	mov	r4, r0
    this->pin = pin;
   d5528:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d552a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d552c:	b288      	uxth	r0, r1
   d552e:	f002 fb4f 	bl	d7bd0 <digitalRead>
   d5532:	b108      	cbz	r0, d5538 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5534:	2303      	movs	r3, #3
   d5536:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5538:	f000 f946 	bl	d57c8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d553c:	6020      	str	r0, [r4, #0]
#endif
}
   d553e:	bd10      	pop	{r4, pc}

000d5540 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5540:	b538      	push	{r3, r4, r5, lr}
   d5542:	460c      	mov	r4, r1
   d5544:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5546:	4611      	mov	r1, r2
   d5548:	b2a0      	uxth	r0, r4
   d554a:	f002 fb17 	bl	d7b7c <pinMode>
  
  this->attach(pin);
   d554e:	4621      	mov	r1, r4
   d5550:	4628      	mov	r0, r5
}
   d5552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5556:	f7ff bfe4 	b.w	d5522 <_ZN8Debounce6attachEi>
	...

000d555c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d555c:	b510      	push	{r4, lr}
   d555e:	4b06      	ldr	r3, [pc, #24]	; (d5578 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d5560:	6003      	str	r3, [r0, #0]
   d5562:	4604      	mov	r4, r0
	if (mutex) {
   d5564:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d5566:	b108      	cbz	r0, d556c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d5568:	f000 f8f6 	bl	d5758 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d556c:	4620      	mov	r0, r4
   d556e:	f7ff fb55 	bl	d4c1c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d5572:	4620      	mov	r0, r4
   d5574:	bd10      	pop	{r4, pc}
   d5576:	bf00      	nop
   d5578:	000d8b8c 	.word	0x000d8b8c

000d557c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d557c:	b510      	push	{r4, lr}
   d557e:	4604      	mov	r4, r0
}
   d5580:	f7ff ffec 	bl	d555c <_ZN16OledWingAdafruitD1Ev>
   d5584:	4620      	mov	r0, r4
   d5586:	2170      	movs	r1, #112	; 0x70
   d5588:	f002 fb7b 	bl	d7c82 <_ZdlPvj>
   d558c:	4620      	mov	r0, r4
   d558e:	bd10      	pop	{r4, pc}

000d5590 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5590:	b530      	push	{r4, r5, lr}
   d5592:	b085      	sub	sp, #20
   d5594:	4604      	mov	r4, r0
   d5596:	460d      	mov	r5, r1
   d5598:	f002 fb46 	bl	d7c28 <_Z19__fetch_global_Wirev>
   d559c:	4a10      	ldr	r2, [pc, #64]	; (d55e0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d559e:	4911      	ldr	r1, [pc, #68]	; (d55e4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d55a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d55a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d55a8:	2180      	movs	r1, #128	; 0x80
   d55aa:	4603      	mov	r3, r0
   d55ac:	9200      	str	r2, [sp, #0]
   d55ae:	4620      	mov	r0, r4
   d55b0:	2220      	movs	r2, #32
   d55b2:	f7ff fbb9 	bl	d4d28 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d55b6:	4b0c      	ldr	r3, [pc, #48]	; (d55e8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d55b8:	6023      	str	r3, [r4, #0]
   d55ba:	2300      	movs	r3, #0
   d55bc:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d55c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d55c4:	f7ff ffa8 	bl	d5518 <_ZN8DebounceC1Ev>
   d55c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d55cc:	f7ff ffa4 	bl	d5518 <_ZN8DebounceC1Ev>
   d55d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d55d4:	f7ff ffa0 	bl	d5518 <_ZN8DebounceC1Ev>
}
   d55d8:	4620      	mov	r0, r4
   d55da:	b005      	add	sp, #20
   d55dc:	bd30      	pop	{r4, r5, pc}
   d55de:	bf00      	nop
   d55e0:	00061a80 	.word	0x00061a80
   d55e4:	000186a0 	.word	0x000186a0
   d55e8:	000d8b8c 	.word	0x000d8b8c

000d55ec <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d55ec:	b513      	push	{r0, r1, r4, lr}
   d55ee:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d55f0:	3050      	adds	r0, #80	; 0x50
   d55f2:	f000 f8a9 	bl	d5748 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d55f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d55f8:	07d9      	lsls	r1, r3, #31
   d55fa:	d505      	bpl.n	d5608 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d55fc:	2202      	movs	r2, #2
   d55fe:	2104      	movs	r1, #4
   d5600:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5604:	f7ff ff9c 	bl	d5540 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d5608:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d560a:	079a      	lsls	r2, r3, #30
   d560c:	d505      	bpl.n	d561a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d560e:	2200      	movs	r2, #0
   d5610:	2103      	movs	r1, #3
   d5612:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5616:	f7ff ff93 	bl	d5540 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d561a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d561c:	075b      	lsls	r3, r3, #29
   d561e:	d505      	bpl.n	d562c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d5620:	2202      	movs	r2, #2
   d5622:	4611      	mov	r1, r2
   d5624:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5628:	f7ff ff8a 	bl	d5540 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d562c:	2301      	movs	r3, #1
   d562e:	9300      	str	r3, [sp, #0]
   d5630:	223c      	movs	r2, #60	; 0x3c
   d5632:	2102      	movs	r1, #2
   d5634:	4620      	mov	r0, r4
   d5636:	f7ff fc77 	bl	d4f28 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d563a:	b002      	add	sp, #8
   d563c:	bd10      	pop	{r4, pc}
	...

000d5640 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <hal_ble_stack_init+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	689b      	ldr	r3, [r3, #8]
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	00030278 	.word	0x00030278

000d5650 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <hal_ble_gap_set_advertising_data+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030278 	.word	0x00030278

000d5660 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <hal_ble_gap_set_scan_response_data+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	00030278 	.word	0x00030278

000d5670 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <hal_ble_gap_start_advertising+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	00030278 	.word	0x00030278

000d5680 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b03      	ldr	r3, [pc, #12]	; (d5690 <hal_ble_gap_disconnect+0x10>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d568a:	9301      	str	r3, [sp, #4]
   d568c:	bd08      	pop	{r3, pc}
   d568e:	0000      	.short	0x0000
   d5690:	00030278 	.word	0x00030278

000d5694 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b03      	ldr	r3, [pc, #12]	; (d56a4 <hal_ble_gatt_server_add_service+0x10>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d569e:	9301      	str	r3, [sp, #4]
   d56a0:	bd08      	pop	{r3, pc}
   d56a2:	0000      	.short	0x0000
   d56a4:	00030278 	.word	0x00030278

000d56a8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b03      	ldr	r3, [pc, #12]	; (d56b8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d56b2:	9301      	str	r3, [sp, #4]
   d56b4:	bd08      	pop	{r3, pc}
   d56b6:	0000      	.short	0x0000
   d56b8:	00030278 	.word	0x00030278

000d56bc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b03      	ldr	r3, [pc, #12]	; (d56cc <hal_ble_gatt_client_write_with_response+0x10>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d56c6:	9301      	str	r3, [sp, #4]
   d56c8:	bd08      	pop	{r3, pc}
   d56ca:	0000      	.short	0x0000
   d56cc:	00030278 	.word	0x00030278

000d56d0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b03      	ldr	r3, [pc, #12]	; (d56e0 <hal_ble_gatt_client_write_without_response+0x10>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d56da:	9301      	str	r3, [sp, #4]
   d56dc:	bd08      	pop	{r3, pc}
   d56de:	0000      	.short	0x0000
   d56e0:	00030278 	.word	0x00030278

000d56e4 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b03      	ldr	r3, [pc, #12]	; (d56f4 <hal_ble_gap_get_connection_info+0x10>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d56ee:	9301      	str	r3, [sp, #4]
   d56f0:	bd08      	pop	{r3, pc}
   d56f2:	0000      	.short	0x0000
   d56f4:	00030278 	.word	0x00030278

000d56f8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b03      	ldr	r3, [pc, #12]	; (d5708 <hal_ble_gatt_server_add_characteristic+0x10>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5702:	9301      	str	r3, [sp, #4]
   d5704:	bd08      	pop	{r3, pc}
   d5706:	0000      	.short	0x0000
   d5708:	00030278 	.word	0x00030278

000d570c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b03      	ldr	r3, [pc, #12]	; (d571c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5716:	9301      	str	r3, [sp, #4]
   d5718:	bd08      	pop	{r3, pc}
   d571a:	0000      	.short	0x0000
   d571c:	00030278 	.word	0x00030278

000d5720 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b03      	ldr	r3, [pc, #12]	; (d5730 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d572a:	9301      	str	r3, [sp, #4]
   d572c:	bd08      	pop	{r3, pc}
   d572e:	0000      	.short	0x0000
   d5730:	00030278 	.word	0x00030278

000d5734 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b03      	ldr	r3, [pc, #12]	; (d5744 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d573e:	9301      	str	r3, [sp, #4]
   d5740:	bd08      	pop	{r3, pc}
   d5742:	0000      	.short	0x0000
   d5744:	00030278 	.word	0x00030278

000d5748 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <os_mutex_create+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030248 	.word	0x00030248

000d5758 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <os_mutex_destroy+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030248 	.word	0x00030248

000d5768 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <os_mutex_recursive_create+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030248 	.word	0x00030248

000d5778 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <os_mutex_recursive_destroy+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030248 	.word	0x00030248

000d5788 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <os_mutex_recursive_lock+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030248 	.word	0x00030248

000d5798 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <os_mutex_recursive_unlock+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030248 	.word	0x00030248

000d57a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <HAL_RNG_GetRandomNumber+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	685b      	ldr	r3, [r3, #4]
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030218 	.word	0x00030218

000d57b8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <HAL_Delay_Microseconds+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	68db      	ldr	r3, [r3, #12]
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030218 	.word	0x00030218

000d57c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	695b      	ldr	r3, [r3, #20]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030218 	.word	0x00030218

000d57d8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <HAL_Pin_Mode+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	689b      	ldr	r3, [r3, #8]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	0003022c 	.word	0x0003022c

000d57e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <HAL_Get_Pin_Mode+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	68db      	ldr	r3, [r3, #12]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	0003022c 	.word	0x0003022c

000d57f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <HAL_GPIO_Write+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	691b      	ldr	r3, [r3, #16]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	0003022c 	.word	0x0003022c

000d5808 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <HAL_GPIO_Read+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	695b      	ldr	r3, [r3, #20]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	0003022c 	.word	0x0003022c

000d5818 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <hal_i2c_set_speed+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	681b      	ldr	r3, [r3, #0]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030228 	.word	0x00030228

000d5828 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <hal_i2c_begin+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	68db      	ldr	r3, [r3, #12]
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030228 	.word	0x00030228

000d5838 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <hal_i2c_begin_transmission+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	699b      	ldr	r3, [r3, #24]
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030228 	.word	0x00030228

000d5848 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <hal_i2c_end_transmission+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	69db      	ldr	r3, [r3, #28]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030228 	.word	0x00030228

000d5858 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <hal_i2c_write+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	6a1b      	ldr	r3, [r3, #32]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	00030228 	.word	0x00030228

000d5868 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <hal_i2c_available+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	00030228 	.word	0x00030228

000d5878 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <hal_i2c_read+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	00030228 	.word	0x00030228

000d5888 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <hal_i2c_peek+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	00030228 	.word	0x00030228

000d5898 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <hal_i2c_flush+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	00030228 	.word	0x00030228

000d58a8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <hal_i2c_is_enabled+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	00030228 	.word	0x00030228

000d58b8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <hal_i2c_init+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	00030228 	.word	0x00030228

000d58c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <inet_inet_ntop+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	695b      	ldr	r3, [r3, #20]
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	00030264 	.word	0x00030264

000d58d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <netdb_freeaddrinfo+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	689b      	ldr	r3, [r3, #8]
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	00030268 	.word	0x00030268

000d58e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <netdb_getaddrinfo+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	68db      	ldr	r3, [r3, #12]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030268 	.word	0x00030268

000d58f8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <hal_spi_begin+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	681b      	ldr	r3, [r3, #0]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030230 	.word	0x00030230

000d5908 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <hal_spi_transfer+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	695b      	ldr	r3, [r3, #20]
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	00030230 	.word	0x00030230

000d5918 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <hal_spi_init+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	69db      	ldr	r3, [r3, #28]
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	00030230 	.word	0x00030230

000d5928 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <hal_spi_is_enabled+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	6a1b      	ldr	r3, [r3, #32]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030230 	.word	0x00030230

000d5938 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <hal_spi_info+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030230 	.word	0x00030230

000d5948 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <hal_spi_set_settings+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030230 	.word	0x00030230

000d5958 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <hal_spi_acquire+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030230 	.word	0x00030230

000d5968 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <hal_spi_release+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030230 	.word	0x00030230

000d5978 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <hal_usart_init+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	681b      	ldr	r3, [r3, #0]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	0003023c 	.word	0x0003023c

000d5988 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <hal_usart_write+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	68db      	ldr	r3, [r3, #12]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	0003023c 	.word	0x0003023c

000d5998 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <hal_usart_available+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	691b      	ldr	r3, [r3, #16]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	0003023c 	.word	0x0003023c

000d59a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <hal_usart_read+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	695b      	ldr	r3, [r3, #20]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	0003023c 	.word	0x0003023c

000d59b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <hal_usart_peek+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	699b      	ldr	r3, [r3, #24]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	0003023c 	.word	0x0003023c

000d59c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <hal_usart_flush+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	69db      	ldr	r3, [r3, #28]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	0003023c 	.word	0x0003023c

000d59d8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <hal_usart_is_enabled+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	6a1b      	ldr	r3, [r3, #32]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	0003023c 	.word	0x0003023c

000d59e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <hal_usart_available_data_for_write+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	0003023c 	.word	0x0003023c

000d59f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <HAL_USB_USART_Init+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	681b      	ldr	r3, [r3, #0]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003024c 	.word	0x0003024c

000d5a08 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <HAL_USB_USART_Available_Data+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	691b      	ldr	r3, [r3, #16]
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	0003024c 	.word	0x0003024c

000d5a18 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	695b      	ldr	r3, [r3, #20]
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	0003024c 	.word	0x0003024c

000d5a28 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <HAL_USB_USART_Receive_Data+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	699b      	ldr	r3, [r3, #24]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	0003024c 	.word	0x0003024c

000d5a38 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <HAL_USB_USART_Send_Data+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	69db      	ldr	r3, [r3, #28]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	0003024c 	.word	0x0003024c

000d5a48 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <HAL_USB_USART_Flush_Data+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	6a1b      	ldr	r3, [r3, #32]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	0003024c 	.word	0x0003024c

000d5a58 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <LED_SetSignalingColor+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	685b      	ldr	r3, [r3, #4]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	00030260 	.word	0x00030260

000d5a68 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <LED_Signaling_Start+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	689b      	ldr	r3, [r3, #8]
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	00030260 	.word	0x00030260

000d5a78 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <LED_Signaling_Stop+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	68db      	ldr	r3, [r3, #12]
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030260 	.word	0x00030260

000d5a88 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <LED_SetBrightness+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	691b      	ldr	r3, [r3, #16]
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030260 	.word	0x00030260

000d5a98 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <LED_RGB_IsOverRidden+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	699b      	ldr	r3, [r3, #24]
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030260 	.word	0x00030260

000d5aa8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <LED_On+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	69db      	ldr	r3, [r3, #28]
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030260 	.word	0x00030260

000d5ab8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <panic_+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030260 	.word	0x00030260

000d5ac8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <log_message+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030260 	.word	0x00030260

000d5ad8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <set_system_mode+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	685b      	ldr	r3, [r3, #4]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030220 	.word	0x00030220

000d5ae8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <system_delay_ms+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	695b      	ldr	r3, [r3, #20]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	00030220 	.word	0x00030220

000d5af8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <system_thread_set_state+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	00030220 	.word	0x00030220

000d5b08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b03      	ldr	r3, [pc, #12]	; (d5b18 <system_ctrl_set_app_request_handler+0x10>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5b12:	9301      	str	r3, [sp, #4]
   d5b14:	bd08      	pop	{r3, pc}
   d5b16:	0000      	.short	0x0000
   d5b18:	00030220 	.word	0x00030220

000d5b1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b03      	ldr	r3, [pc, #12]	; (d5b2c <system_ctrl_set_result+0x10>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5b26:	9301      	str	r3, [sp, #4]
   d5b28:	bd08      	pop	{r3, pc}
   d5b2a:	0000      	.short	0x0000
   d5b2c:	00030220 	.word	0x00030220

000d5b30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030244 	.word	0x00030244

000d5b40 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <network_connect+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	685b      	ldr	r3, [r3, #4]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030240 	.word	0x00030240

000d5b50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <network_connecting+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	689b      	ldr	r3, [r3, #8]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030240 	.word	0x00030240

000d5b60 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <network_disconnect+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	68db      	ldr	r3, [r3, #12]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030240 	.word	0x00030240

000d5b70 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <network_ready+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	691b      	ldr	r3, [r3, #16]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030240 	.word	0x00030240

000d5b80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <network_on+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	695b      	ldr	r3, [r3, #20]
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030240 	.word	0x00030240

000d5b90 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <network_off+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	699b      	ldr	r3, [r3, #24]
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030240 	.word	0x00030240

000d5ba0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <network_listen+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	69db      	ldr	r3, [r3, #28]
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030240 	.word	0x00030240

000d5bb0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <network_listening+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	6a1b      	ldr	r3, [r3, #32]
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030240 	.word	0x00030240

000d5bc0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <network_set_listen_timeout+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030240 	.word	0x00030240

000d5bd0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <network_get_listen_timeout+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030240 	.word	0x00030240

000d5be0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <network_is_on+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030240 	.word	0x00030240

000d5bf0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <network_is_off+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030240 	.word	0x00030240

000d5c00 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <malloc+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	681b      	ldr	r3, [r3, #0]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	0003021c 	.word	0x0003021c

000d5c10 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <free+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	685b      	ldr	r3, [r3, #4]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	0003021c 	.word	0x0003021c

000d5c20 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <realloc+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	689b      	ldr	r3, [r3, #8]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	0003021c 	.word	0x0003021c

000d5c30 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <vsnprintf+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	0003021c 	.word	0x0003021c

000d5c40 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <abort+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	0003021c 	.word	0x0003021c

000d5c50 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <newlib_impure_ptr_callback+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	0003021c 	.word	0x0003021c

000d5c60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5c60:	2100      	movs	r1, #0
   d5c62:	f7ff bf41 	b.w	d5ae8 <system_delay_ms>

000d5c66 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5c66:	4770      	bx	lr

000d5c68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d5c68:	4770      	bx	lr

000d5c6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d5c6a:	4770      	bx	lr

000d5c6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5c6c:	4770      	bx	lr
	...

000d5c70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5c70:	4b06      	ldr	r3, [pc, #24]	; (d5c8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5c72:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5c74:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5c76:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5c7a:	d005      	beq.n	d5c88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5c7c:	4608      	mov	r0, r1
   d5c7e:	f002 f807 	bl	d7c90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5c82:	2800      	cmp	r0, #0
	return nullptr;
   d5c84:	bf08      	it	eq
   d5c86:	2400      	moveq	r4, #0
      }
   d5c88:	4620      	mov	r0, r4
   d5c8a:	bd10      	pop	{r4, pc}
   d5c8c:	000d8d24 	.word	0x000d8d24

000d5c90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5c90:	4b06      	ldr	r3, [pc, #24]	; (d5cac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5c92:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5c94:	b510      	push	{r4, lr}
   d5c96:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5c9a:	d005      	beq.n	d5ca8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5c9c:	4608      	mov	r0, r1
   d5c9e:	f001 fff7 	bl	d7c90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5ca2:	2800      	cmp	r0, #0
	return nullptr;
   d5ca4:	bf08      	it	eq
   d5ca6:	2400      	moveq	r4, #0
      }
   d5ca8:	4620      	mov	r0, r4
   d5caa:	bd10      	pop	{r4, pc}
   d5cac:	000d8d24 	.word	0x000d8d24

000d5cb0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5cb0:	4b06      	ldr	r3, [pc, #24]	; (d5ccc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5cb2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5cb4:	b510      	push	{r4, lr}
   d5cb6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5cba:	d005      	beq.n	d5cc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5cbc:	4608      	mov	r0, r1
   d5cbe:	f001 ffe7 	bl	d7c90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5cc2:	2800      	cmp	r0, #0
	return nullptr;
   d5cc4:	bf08      	it	eq
   d5cc6:	2400      	moveq	r4, #0
      }
   d5cc8:	4620      	mov	r0, r4
   d5cca:	bd10      	pop	{r4, pc}
   d5ccc:	000d8d24 	.word	0x000d8d24

000d5cd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5cd0:	b510      	push	{r4, lr}
   d5cd2:	2168      	movs	r1, #104	; 0x68
   d5cd4:	4604      	mov	r4, r0
   d5cd6:	f001 ffd4 	bl	d7c82 <_ZdlPvj>
   d5cda:	4620      	mov	r0, r4
   d5cdc:	bd10      	pop	{r4, pc}

000d5cde <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d5cde:	b510      	push	{r4, lr}
   d5ce0:	2128      	movs	r1, #40	; 0x28
   d5ce2:	4604      	mov	r4, r0
   d5ce4:	f001 ffcd 	bl	d7c82 <_ZdlPvj>
   d5ce8:	4620      	mov	r0, r4
   d5cea:	bd10      	pop	{r4, pc}

000d5cec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d5cec:	b510      	push	{r4, lr}
   d5cee:	2130      	movs	r1, #48	; 0x30
   d5cf0:	4604      	mov	r4, r0
   d5cf2:	f001 ffc6 	bl	d7c82 <_ZdlPvj>
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	bd10      	pop	{r4, pc}

000d5cfa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5cfa:	f7fe b9ce 	b.w	d409a <_ZdlPv>

000d5cfe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d5cfe:	f7fe b9cc 	b.w	d409a <_ZdlPv>

000d5d02 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d5d02:	f7fe b9ca 	b.w	d409a <_ZdlPv>

000d5d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5d06:	b510      	push	{r4, lr}
          _M_dispose();
   d5d08:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5d0a:	4604      	mov	r4, r0
          _M_dispose();
   d5d0c:	689b      	ldr	r3, [r3, #8]
   d5d0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5d10:	68a3      	ldr	r3, [r4, #8]
   d5d12:	3b01      	subs	r3, #1
   d5d14:	60a3      	str	r3, [r4, #8]
   d5d16:	b92b      	cbnz	r3, d5d24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5d18:	6823      	ldr	r3, [r4, #0]
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	68db      	ldr	r3, [r3, #12]
    }
   d5d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5d22:	4718      	bx	r3
    }
   d5d24:	bd10      	pop	{r4, pc}

000d5d26 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5d26:	b510      	push	{r4, lr}
   d5d28:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5d2a:	6800      	ldr	r0, [r0, #0]
   d5d2c:	b108      	cbz	r0, d5d32 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5d2e:	f7ff fd23 	bl	d5778 <os_mutex_recursive_destroy>
    }
   d5d32:	4620      	mov	r0, r4
   d5d34:	bd10      	pop	{r4, pc}
	...

000d5d38 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d5d38:	b510      	push	{r4, lr}
        mutex_.lock();
   d5d3a:	4b04      	ldr	r3, [pc, #16]	; (d5d4c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d5d3c:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5d3e:	6818      	ldr	r0, [r3, #0]
   d5d40:	f7ff fd22 	bl	d5788 <os_mutex_recursive_lock>
        locked_ = true;
   d5d44:	2301      	movs	r3, #1
   d5d46:	7023      	strb	r3, [r4, #0]
    }
   d5d48:	bd10      	pop	{r4, pc}
   d5d4a:	bf00      	nop
   d5d4c:	2003e64c 	.word	0x2003e64c

000d5d50 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d5d50:	b510      	push	{r4, lr}
        mutex_.unlock();
   d5d52:	4b04      	ldr	r3, [pc, #16]	; (d5d64 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d5d54:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5d56:	6818      	ldr	r0, [r3, #0]
   d5d58:	f7ff fd1e 	bl	d5798 <os_mutex_recursive_unlock>
        locked_ = false;
   d5d5c:	2300      	movs	r3, #0
   d5d5e:	7023      	strb	r3, [r4, #0]
    }
   d5d60:	bd10      	pop	{r4, pc}
   d5d62:	bf00      	nop
   d5d64:	2003e64c 	.word	0x2003e64c

000d5d68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5d6a:	2500      	movs	r5, #0
   d5d6c:	1cec      	adds	r4, r5, #3
   d5d6e:	428c      	cmp	r4, r1
   d5d70:	d80d      	bhi.n	d5d8e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5d72:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d5d74:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d5d76:	5d87      	ldrb	r7, [r0, r6]
   d5d78:	4297      	cmp	r7, r2
   d5d7a:	d105      	bne.n	d5d88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5d7c:	4426      	add	r6, r4
   d5d7e:	42b1      	cmp	r1, r6
   d5d80:	d305      	bcc.n	d5d8e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d5d82:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d5d84:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d5d88:	3401      	adds	r4, #1
   d5d8a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5d8c:	e7ee      	b.n	d5d6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d5d8e:	2000      	movs	r0, #0
   d5d90:	e7f9      	b.n	d5d86 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d5d92 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5d92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5d96:	4604      	mov	r4, r0
   d5d98:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d5d9c:	461e      	mov	r6, r3
   d5d9e:	4689      	mov	r9, r1
   d5da0:	ab01      	add	r3, sp, #4
   d5da2:	4690      	mov	r8, r2
   d5da4:	460a      	mov	r2, r1
   d5da6:	6a01      	ldr	r1, [r0, #32]
   d5da8:	f7ff ffde 	bl	d5d68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d5dac:	6a25      	ldr	r5, [r4, #32]
   d5dae:	1cb3      	adds	r3, r6, #2
   d5db0:	bb17      	cbnz	r7, d5df8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d5db2:	b308      	cbz	r0, d5df8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5db4:	195f      	adds	r7, r3, r5
   d5db6:	1a3f      	subs	r7, r7, r0
   d5db8:	2f1f      	cmp	r7, #31
   d5dba:	d819      	bhi.n	d5df0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5dbc:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5dc0:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5dc4:	eba5 0209 	sub.w	r2, r5, r9
   d5dc8:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5dca:	eb00 0109 	add.w	r1, r0, r9
   d5dce:	eb06 000a 	add.w	r0, r6, sl
   d5dd2:	b292      	uxth	r2, r2
   d5dd4:	4421      	add	r1, r4
   d5dd6:	4420      	add	r0, r4
   d5dd8:	f002 f896 	bl	d7f08 <memmove>
            selfData_[offset] = len + 1;
   d5ddc:	1c73      	adds	r3, r6, #1
   d5dde:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d5de2:	4632      	mov	r2, r6
   d5de4:	4641      	mov	r1, r8
   d5de6:	eb04 000a 	add.w	r0, r4, sl
   d5dea:	f002 f87f 	bl	d7eec <memcpy>
            selfLen_ = staLen + len + 2;
   d5dee:	6227      	str	r7, [r4, #32]
}
   d5df0:	6a20      	ldr	r0, [r4, #32]
   d5df2:	b002      	add	sp, #8
   d5df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5df8:	442b      	add	r3, r5
   d5dfa:	2b1f      	cmp	r3, #31
   d5dfc:	d8f8      	bhi.n	d5df0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d5dfe:	1c73      	adds	r3, r6, #1
   d5e00:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5e02:	1ca8      	adds	r0, r5, #2
   d5e04:	4425      	add	r5, r4
   d5e06:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5e08:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5e0a:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5e0e:	4641      	mov	r1, r8
   d5e10:	4420      	add	r0, r4
   d5e12:	f002 f86b 	bl	d7eec <memcpy>
        selfLen_ += len;
   d5e16:	6a23      	ldr	r3, [r4, #32]
   d5e18:	4433      	add	r3, r6
   d5e1a:	6223      	str	r3, [r4, #32]
   d5e1c:	e7e8      	b.n	d5df0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d5e20 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5e20:	4a02      	ldr	r2, [pc, #8]	; (d5e2c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d5e22:	2100      	movs	r1, #0
   d5e24:	200a      	movs	r0, #10
   d5e26:	f7ff be47 	b.w	d5ab8 <panic_>
   d5e2a:	bf00      	nop
   d5e2c:	000d57b9 	.word	0x000d57b9

000d5e30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e30:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e32:	b538      	push	{r3, r4, r5, lr}
   d5e34:	4604      	mov	r4, r0
	  switch (__op)
   d5e36:	d007      	beq.n	d5e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d5e38:	2a03      	cmp	r2, #3
   d5e3a:	d011      	beq.n	d5e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d5e3c:	2a01      	cmp	r2, #1
   d5e3e:	d101      	bne.n	d5e44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5e40:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d5e42:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5e44:	2000      	movs	r0, #0
   d5e46:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5e48:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d5e4a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5e4c:	f7fe f921 	bl	d4092 <_Znwj>
   d5e50:	4603      	mov	r3, r0
   d5e52:	2800      	cmp	r0, #0
   d5e54:	d0f5      	beq.n	d5e42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d5e56:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5e5a:	e883 0003 	stmia.w	r3, {r0, r1}
   d5e5e:	e7f0      	b.n	d5e42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d5e60:	6800      	ldr	r0, [r0, #0]
   d5e62:	2800      	cmp	r0, #0
   d5e64:	d0ee      	beq.n	d5e44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d5e66:	2108      	movs	r1, #8
   d5e68:	f001 ff0b 	bl	d7c82 <_ZdlPvj>
   d5e6c:	e7ea      	b.n	d5e44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d5e6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e6e:	b430      	push	{r4, r5}
   d5e70:	460d      	mov	r5, r1
   d5e72:	4611      	mov	r1, r2
   d5e74:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d5e76:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5e78:	6809      	ldr	r1, [r1, #0]
   d5e7a:	6828      	ldr	r0, [r5, #0]
   d5e7c:	e9d3 4300 	ldrd	r4, r3, [r3]
   d5e80:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d5e82:	bc30      	pop	{r4, r5}
   d5e84:	4760      	bx	ip

000d5e86 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5e86:	b510      	push	{r4, lr}
      if (_M_manager)
   d5e88:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5e8a:	4604      	mov	r4, r0
      if (_M_manager)
   d5e8c:	b113      	cbz	r3, d5e94 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e8e:	2203      	movs	r2, #3
   d5e90:	4601      	mov	r1, r0
   d5e92:	4798      	blx	r3
    }
   d5e94:	4620      	mov	r0, r4
   d5e96:	bd10      	pop	{r4, pc}

000d5e98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5e98:	b510      	push	{r4, lr}
   d5e9a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e9c:	3058      	adds	r0, #88	; 0x58
   d5e9e:	f7ff fff2 	bl	d5e86 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d5ea2:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d5ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5eaa:	f001 bba5 	b.w	d75f8 <_ZN6StringD1Ev>

000d5eae <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5eae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5eb2:	b2da      	uxtb	r2, r3
   d5eb4:	2a09      	cmp	r2, #9
   d5eb6:	d801      	bhi.n	d5ebc <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5eb8:	4618      	mov	r0, r3
   d5eba:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5ebc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5ec0:	2b05      	cmp	r3, #5
   d5ec2:	d801      	bhi.n	d5ec8 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5ec4:	3857      	subs	r0, #87	; 0x57
   d5ec6:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5ec8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5ecc:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5ece:	bf94      	ite	ls
   d5ed0:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5ed2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d5ed6:	4770      	bx	lr

000d5ed8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d5ed8:	b510      	push	{r4, lr}
            locked_(false) {
   d5eda:	2300      	movs	r3, #0
    WiringBleLock() :
   d5edc:	4604      	mov	r4, r0
            locked_(false) {
   d5ede:	7003      	strb	r3, [r0, #0]
        lock();
   d5ee0:	f7ff ff2a 	bl	d5d38 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	bd10      	pop	{r4, pc}

000d5ee8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d5ee8:	b510      	push	{r4, lr}
        if (locked_) {
   d5eea:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d5eec:	4604      	mov	r4, r0
        if (locked_) {
   d5eee:	b10b      	cbz	r3, d5ef4 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d5ef0:	f7ff ff2e 	bl	d5d50 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	bd10      	pop	{r4, pc}

000d5ef8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d5ef8:	b082      	sub	sp, #8
   d5efa:	4603      	mov	r3, r0
    address_ = addr;
   d5efc:	6808      	ldr	r0, [r1, #0]
   d5efe:	6849      	ldr	r1, [r1, #4]
   d5f00:	466a      	mov	r2, sp
   d5f02:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d5f04:	466a      	mov	r2, sp
   d5f06:	ca03      	ldmia	r2!, {r0, r1}
   d5f08:	6018      	str	r0, [r3, #0]
}
   d5f0a:	4618      	mov	r0, r3
    address_ = addr.address_;
   d5f0c:	6059      	str	r1, [r3, #4]
}
   d5f0e:	b002      	add	sp, #8
   d5f10:	4770      	bx	lr

000d5f12 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d5f12:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5f14:	7982      	ldrb	r2, [r0, #6]
   d5f16:	798b      	ldrb	r3, [r1, #6]
   d5f18:	429a      	cmp	r2, r3
   d5f1a:	d106      	bne.n	d5f2a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5f1c:	2206      	movs	r2, #6
   d5f1e:	f001 ffd7 	bl	d7ed0 <memcmp>
   d5f22:	fab0 f080 	clz	r0, r0
   d5f26:	0940      	lsrs	r0, r0, #5
}
   d5f28:	bd08      	pop	{r3, pc}
    return false;
   d5f2a:	2000      	movs	r0, #0
   d5f2c:	e7fc      	b.n	d5f28 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d5f2e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d5f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5f32:	6003      	str	r3, [r0, #0]
   d5f34:	8083      	strh	r3, [r0, #4]
}
   d5f36:	2000      	movs	r0, #0
   d5f38:	4770      	bx	lr

000d5f3a <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d5f3a:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d5f3c:	b508      	push	{r3, lr}
        : address_{} {
   d5f3e:	6001      	str	r1, [r0, #0]
   d5f40:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d5f42:	4602      	mov	r2, r0
    clear();
   d5f44:	f7ff fff3 	bl	d5f2e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d5f48:	7191      	strb	r1, [r2, #6]
}
   d5f4a:	4610      	mov	r0, r2
   d5f4c:	bd08      	pop	{r3, pc}
	...

000d5f50 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d5f50:	2201      	movs	r2, #1
   d5f52:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5f54:	4a06      	ldr	r2, [pc, #24]	; (d5f70 <_ZN8particle7BleUuidC1Ev+0x20>)
   d5f56:	6811      	ldr	r1, [r2, #0]
   d5f58:	6001      	str	r1, [r0, #0]
   d5f5a:	6851      	ldr	r1, [r2, #4]
   d5f5c:	6041      	str	r1, [r0, #4]
   d5f5e:	8911      	ldrh	r1, [r2, #8]
   d5f60:	7a92      	ldrb	r2, [r2, #10]
   d5f62:	7282      	strb	r2, [r0, #10]
   d5f64:	2200      	movs	r2, #0
   d5f66:	8101      	strh	r1, [r0, #8]
   d5f68:	f8c0 200b 	str.w	r2, [r0, #11]
   d5f6c:	73c2      	strb	r2, [r0, #15]
}
   d5f6e:	4770      	bx	lr
   d5f70:	000d8d2c 	.word	0x000d8d2c

000d5f74 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d5f74:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d5f76:	690b      	ldr	r3, [r1, #16]
   d5f78:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5f7a:	f101 0210 	add.w	r2, r1, #16
   d5f7e:	4603      	mov	r3, r0
   d5f80:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f84:	f843 4b04 	str.w	r4, [r3], #4
   d5f88:	4291      	cmp	r1, r2
   d5f8a:	d1f9      	bne.n	d5f80 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5f8c:	bd10      	pop	{r4, pc}

000d5f8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5f8e:	b510      	push	{r4, lr}
    if (uuid128) {
   d5f90:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5f92:	4604      	mov	r4, r0
    if (uuid128) {
   d5f94:	b1b1      	cbz	r1, d5fc4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d5f96:	2a01      	cmp	r2, #1
   d5f98:	f101 0210 	add.w	r2, r1, #16
   d5f9c:	d10a      	bne.n	d5fb4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5f9e:	4601      	mov	r1, r0
   d5fa0:	f853 0b04 	ldr.w	r0, [r3], #4
   d5fa4:	f841 0b04 	str.w	r0, [r1], #4
   d5fa8:	4293      	cmp	r3, r2
   d5faa:	d1f9      	bne.n	d5fa0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d5fac:	2301      	movs	r3, #1
   d5fae:	6123      	str	r3, [r4, #16]
}
   d5fb0:	4620      	mov	r0, r4
   d5fb2:	bd10      	pop	{r4, pc}
   d5fb4:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d5fb6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d5fba:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5fbe:	429a      	cmp	r2, r3
   d5fc0:	d1f9      	bne.n	d5fb6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d5fc2:	e7f3      	b.n	d5fac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5fc4:	2210      	movs	r2, #16
   d5fc6:	f001 ffb9 	bl	d7f3c <memset>
   d5fca:	e7f1      	b.n	d5fb0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d5fcc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5fcc:	b538      	push	{r3, r4, r5, lr}
   d5fce:	4604      	mov	r4, r0
   d5fd0:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5fd2:	461a      	mov	r2, r3
   d5fd4:	f7ff ffdb 	bl	d5f8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5fd8:	81a5      	strh	r5, [r4, #12]
}
   d5fda:	4620      	mov	r0, r4
   d5fdc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5fe0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d5fe0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d5fe2:	6902      	ldr	r2, [r0, #16]
   d5fe4:	b922      	cbnz	r2, d5ff0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d5fe6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5fe8:	3800      	subs	r0, #0
   d5fea:	bf18      	it	ne
   d5fec:	2001      	movne	r0, #1
}
   d5fee:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5ff0:	4902      	ldr	r1, [pc, #8]	; (d5ffc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d5ff2:	2210      	movs	r2, #16
   d5ff4:	f001 ff6c 	bl	d7ed0 <memcmp>
   d5ff8:	e7f6      	b.n	d5fe8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d5ffa:	bf00      	nop
   d5ffc:	000d8d4c 	.word	0x000d8d4c

000d6000 <_ZNK8particle7BleUuid4typeEv>:
}
   d6000:	6900      	ldr	r0, [r0, #16]
   d6002:	4770      	bx	lr

000d6004 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6004:	b538      	push	{r3, r4, r5, lr}
   d6006:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6008:	2214      	movs	r2, #20
   d600a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d600c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d600e:	f001 ff95 	bl	d7f3c <memset>
    if (type_ == BleUuidType::SHORT) {
   d6012:	6923      	ldr	r3, [r4, #16]
   d6014:	b93b      	cbnz	r3, d6026 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6016:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6018:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d601a:	7b23      	ldrb	r3, [r4, #12]
   d601c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6020:	802b      	strh	r3, [r5, #0]
}
   d6022:	4628      	mov	r0, r5
   d6024:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d6026:	2301      	movs	r3, #1
   d6028:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d602a:	f104 0210 	add.w	r2, r4, #16
   d602e:	462b      	mov	r3, r5
   d6030:	f854 1b04 	ldr.w	r1, [r4], #4
   d6034:	f843 1b04 	str.w	r1, [r3], #4
   d6038:	4294      	cmp	r4, r2
   d603a:	d1f9      	bne.n	d6030 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d603c:	e7f1      	b.n	d6022 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d603e <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d603e:	7b42      	ldrb	r2, [r0, #13]
   d6040:	7b00      	ldrb	r0, [r0, #12]
}
   d6042:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6046:	4770      	bx	lr

000d6048 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6048:	4770      	bx	lr

000d604a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d604a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d604c:	6902      	ldr	r2, [r0, #16]
   d604e:	690b      	ldr	r3, [r1, #16]
   d6050:	429a      	cmp	r2, r3
   d6052:	d106      	bne.n	d6062 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6054:	2210      	movs	r2, #16
   d6056:	f001 ff3b 	bl	d7ed0 <memcmp>
   d605a:	fab0 f080 	clz	r0, r0
   d605e:	0940      	lsrs	r0, r0, #5
}
   d6060:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6062:	2000      	movs	r0, #0
   d6064:	e7fc      	b.n	d6060 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6068 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6068:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d606a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d606e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6070:	4b32      	ldr	r3, [pc, #200]	; (d613c <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	6002      	str	r2, [r0, #0]
   d6076:	685a      	ldr	r2, [r3, #4]
   d6078:	6042      	str	r2, [r0, #4]
   d607a:	2500      	movs	r5, #0
   d607c:	891a      	ldrh	r2, [r3, #8]
   d607e:	7a9b      	ldrb	r3, [r3, #10]
   d6080:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d6082:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6084:	7283      	strb	r3, [r0, #10]
   d6086:	f8c0 500b 	str.w	r5, [r0, #11]
   d608a:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d608c:	460e      	mov	r6, r1
   d608e:	b321      	cbz	r1, d60da <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6090:	2124      	movs	r1, #36	; 0x24
   d6092:	4630      	mov	r0, r6
   d6094:	f001 ffa3 	bl	d7fde <strnlen>
   d6098:	2804      	cmp	r0, #4
   d609a:	d121      	bne.n	d60e0 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d609c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d60a0:	af01      	add	r7, sp, #4
   d60a2:	1cb5      	adds	r5, r6, #2
   d60a4:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d60a6:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d60aa:	f7ff ff00 	bl	d5eae <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d60ae:	f1b0 0800 	subs.w	r8, r0, #0
   d60b2:	db10      	blt.n	d60d6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d60b4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d60b8:	f7ff fef9 	bl	d5eae <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d60bc:	2800      	cmp	r0, #0
   d60be:	db0a      	blt.n	d60d6 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d60c0:	3502      	adds	r5, #2
   d60c2:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d60c6:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d60c8:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d60cc:	d1eb      	bne.n	d60a6 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d60ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d60d2:	ba5b      	rev16	r3, r3
   d60d4:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d60d6:	2300      	movs	r3, #0
   d60d8:	6123      	str	r3, [r4, #16]
}
   d60da:	b002      	add	sp, #8
   d60dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d60e0:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d60e2:	2124      	movs	r1, #36	; 0x24
   d60e4:	4630      	mov	r0, r6
   d60e6:	f001 ff7a 	bl	d7fde <strnlen>
   d60ea:	42a8      	cmp	r0, r5
   d60ec:	d806      	bhi.n	d60fc <_ZN8particle7BleUuid9constructEPKc+0x94>
   d60ee:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d60f0:	2300      	movs	r3, #0
    while (len > 0) {
   d60f2:	42bc      	cmp	r4, r7
   d60f4:	d0f1      	beq.n	d60da <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d60f6:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d60fa:	e7fa      	b.n	d60f2 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d60fc:	2f00      	cmp	r7, #0
   d60fe:	d0ec      	beq.n	d60da <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d6100:	5d70      	ldrb	r0, [r6, r5]
   d6102:	f7ff fed4 	bl	d5eae <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6106:	0603      	lsls	r3, r0, #24
   d6108:	d415      	bmi.n	d6136 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d610a:	0100      	lsls	r0, r0, #4
   d610c:	3f01      	subs	r7, #1
   d610e:	fa5f f880 	uxtb.w	r8, r0
   d6112:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6116:	2124      	movs	r1, #36	; 0x24
   d6118:	4630      	mov	r0, r6
   d611a:	f001 ff60 	bl	d7fde <strnlen>
   d611e:	3501      	adds	r5, #1
   d6120:	42a8      	cmp	r0, r5
   d6122:	d908      	bls.n	d6136 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6124:	5d70      	ldrb	r0, [r6, r5]
   d6126:	f7ff fec2 	bl	d5eae <_ZN8particle11hexToNibbleEc>
   d612a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d612c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d612e:	bfa4      	itt	ge
   d6130:	ea40 0008 	orrge.w	r0, r0, r8
   d6134:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6136:	3501      	adds	r5, #1
   d6138:	e7d3      	b.n	d60e2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d613a:	bf00      	nop
   d613c:	000d8d2c 	.word	0x000d8d2c

000d6140 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6140:	b513      	push	{r0, r1, r4, lr}
   d6142:	4604      	mov	r4, r0
   d6144:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6146:	f7ff ff03 	bl	d5f50 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d614a:	4620      	mov	r0, r4
   d614c:	9901      	ldr	r1, [sp, #4]
   d614e:	f7ff ff8b 	bl	d6068 <_ZN8particle7BleUuid9constructEPKc>
}
   d6152:	4620      	mov	r0, r4
   d6154:	b002      	add	sp, #8
   d6156:	bd10      	pop	{r4, pc}

000d6158 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6158:	b430      	push	{r4, r5}
   d615a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d615e:	b912      	cbnz	r2, d6166 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6160:	6a00      	ldr	r0, [r0, #32]
}
   d6162:	bc30      	pop	{r4, r5}
   d6164:	4770      	bx	lr
   d6166:	9502      	str	r5, [sp, #8]
   d6168:	bc30      	pop	{r4, r5}
   d616a:	f7ff be12 	b.w	d5d92 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d616e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d616e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6170:	4604      	mov	r4, r0
          selfLen_(0) {
   d6172:	4602      	mov	r2, r0
   d6174:	f100 011f 	add.w	r1, r0, #31
   d6178:	2300      	movs	r3, #0
   d617a:	f802 3b01 	strb.w	r3, [r2], #1
   d617e:	4291      	cmp	r1, r2
   d6180:	d1fb      	bne.n	d617a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d6182:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6184:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6186:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6188:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d618a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d618e:	4619      	mov	r1, r3
   d6190:	f10d 020f 	add.w	r2, sp, #15
   d6194:	4620      	mov	r0, r4
   d6196:	f7ff ffdf 	bl	d6158 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d619a:	4620      	mov	r0, r4
   d619c:	b004      	add	sp, #16
   d619e:	bd10      	pop	{r4, pc}

000d61a0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d61a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d61a2:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d61a4:	460e      	mov	r6, r1
   d61a6:	ab01      	add	r3, sp, #4
   d61a8:	6a01      	ldr	r1, [r0, #32]
   d61aa:	4604      	mov	r4, r0
   d61ac:	f7ff fddc 	bl	d5d68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d61b0:	4605      	mov	r5, r0
   d61b2:	b178      	cbz	r0, d61d4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d61b4:	9801      	ldr	r0, [sp, #4]
   d61b6:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d61b8:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d61ba:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d61bc:	4421      	add	r1, r4
   d61be:	1b52      	subs	r2, r2, r5
   d61c0:	4420      	add	r0, r4
   d61c2:	f001 fe93 	bl	d7eec <memcpy>
        selfLen_ -= len;
   d61c6:	6a20      	ldr	r0, [r4, #32]
   d61c8:	1b40      	subs	r0, r0, r5
   d61ca:	6220      	str	r0, [r4, #32]
        remove(type);
   d61cc:	4631      	mov	r1, r6
   d61ce:	4620      	mov	r0, r4
   d61d0:	f7ff ffe6 	bl	d61a0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d61d4:	b002      	add	sp, #8
   d61d6:	bd70      	pop	{r4, r5, r6, pc}

000d61d8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d61d8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d61da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d61de:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d61e0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d61e2:	8043      	strh	r3, [r0, #2]
   d61e4:	220e      	movs	r2, #14
   d61e6:	4629      	mov	r1, r5
   d61e8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d61ea:	7105      	strb	r5, [r0, #4]
   d61ec:	3006      	adds	r0, #6
   d61ee:	f001 fea5 	bl	d7f3c <memset>
   d61f2:	f104 0014 	add.w	r0, r4, #20
   d61f6:	f7ff feab 	bl	d5f50 <_ZN8particle7BleUuidC1Ev>
   d61fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d61fe:	f7ff fea7 	bl	d5f50 <_ZN8particle7BleUuidC1Ev>
   d6202:	4904      	ldr	r1, [pc, #16]	; (d6214 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d6204:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6208:	f001 fa41 	bl	d768e <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d620c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d620e:	4620      	mov	r0, r4
   d6210:	bd38      	pop	{r3, r4, r5, pc}
   d6212:	bf00      	nop
   d6214:	000d8608 	.word	0x000d8608

000d6218 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6218:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d621a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d621e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d6222:	4293      	cmp	r3, r2
   d6224:	4618      	mov	r0, r3
   d6226:	d006      	beq.n	d6236 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6228:	6804      	ldr	r4, [r0, #0]
   d622a:	8824      	ldrh	r4, [r4, #0]
   d622c:	428c      	cmp	r4, r1
   d622e:	f103 0308 	add.w	r3, r3, #8
   d6232:	d1f6      	bne.n	d6222 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6234:	bd10      	pop	{r4, pc}
        return nullptr;
   d6236:	2000      	movs	r0, #0
   d6238:	e7fc      	b.n	d6234 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d623c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d623c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d623e:	4606      	mov	r6, r0
   d6240:	b085      	sub	sp, #20
   d6242:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6244:	460d      	mov	r5, r1
   d6246:	2900      	cmp	r1, #0
   d6248:	d050      	beq.n	d62ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d624a:	2a00      	cmp	r2, #0
   d624c:	d04e      	beq.n	d62ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d624e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d6250:	7823      	ldrb	r3, [r4, #0]
   d6252:	2af4      	cmp	r2, #244	; 0xf4
   d6254:	bf28      	it	cs
   d6256:	22f4      	movcs	r2, #244	; 0xf4
   d6258:	b343      	cbz	r3, d62ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d625a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d625c:	0798      	lsls	r0, r3, #30
   d625e:	d509      	bpl.n	d6274 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6260:	89a0      	ldrh	r0, [r4, #12]
   d6262:	9203      	str	r2, [sp, #12]
   d6264:	2300      	movs	r3, #0
   d6266:	f7ff fa1f 	bl	d56a8 <hal_ble_gatt_server_set_characteristic_value>
   d626a:	2800      	cmp	r0, #0
   d626c:	9a03      	ldr	r2, [sp, #12]
   d626e:	da03      	bge.n	d6278 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6270:	b005      	add	sp, #20
   d6272:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6274:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6278:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d627a:	7923      	ldrb	r3, [r4, #4]
   d627c:	06d9      	lsls	r1, r3, #27
   d627e:	d509      	bpl.n	d6294 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d6280:	2f01      	cmp	r7, #1
   d6282:	d007      	beq.n	d6294 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6284:	89a0      	ldrh	r0, [r4, #12]
   d6286:	2300      	movs	r3, #0
   d6288:	4629      	mov	r1, r5
}
   d628a:	b005      	add	sp, #20
   d628c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6290:	f7ff ba46 	b.w	d5720 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6294:	069b      	lsls	r3, r3, #26
   d6296:	d5eb      	bpl.n	d6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6298:	2f02      	cmp	r7, #2
   d629a:	d0e9      	beq.n	d6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d629c:	89a0      	ldrh	r0, [r4, #12]
   d629e:	2300      	movs	r3, #0
   d62a0:	4629      	mov	r1, r5
}
   d62a2:	b005      	add	sp, #20
   d62a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d62a8:	f7ff ba44 	b.w	d5734 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d62ac:	8860      	ldrh	r0, [r4, #2]
   d62ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d62b2:	4288      	cmp	r0, r1
   d62b4:	d01c      	beq.n	d62f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d62b6:	7921      	ldrb	r1, [r4, #4]
   d62b8:	074e      	lsls	r6, r1, #29
   d62ba:	d501      	bpl.n	d62c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d62bc:	2f01      	cmp	r7, #1
   d62be:	d104      	bne.n	d62ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d62c0:	070b      	lsls	r3, r1, #28
   d62c2:	d409      	bmi.n	d62d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d62c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d62c8:	e7d2      	b.n	d6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d62ca:	89a1      	ldrh	r1, [r4, #12]
   d62cc:	9300      	str	r3, [sp, #0]
   d62ce:	4613      	mov	r3, r2
   d62d0:	462a      	mov	r2, r5
   d62d2:	f7ff f9fd 	bl	d56d0 <hal_ble_gatt_client_write_without_response>
   d62d6:	e7cb      	b.n	d6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d62d8:	2f02      	cmp	r7, #2
   d62da:	d0f3      	beq.n	d62c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d62dc:	2300      	movs	r3, #0
   d62de:	89a1      	ldrh	r1, [r4, #12]
   d62e0:	9300      	str	r3, [sp, #0]
   d62e2:	4613      	mov	r3, r2
   d62e4:	462a      	mov	r2, r5
   d62e6:	f7ff f9e9 	bl	d56bc <hal_ble_gatt_client_write_with_response>
   d62ea:	e7c1      	b.n	d6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d62ec:	4802      	ldr	r0, [pc, #8]	; (d62f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d62ee:	e7bf      	b.n	d6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d62f0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d62f4:	e7bc      	b.n	d6270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d62f6:	bf00      	nop
   d62f8:	fffffef2 	.word	0xfffffef2

000d62fc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d62fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6300:	2600      	movs	r6, #0
   d6302:	6006      	str	r6, [r0, #0]
   d6304:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6306:	2028      	movs	r0, #40	; 0x28
   d6308:	460c      	mov	r4, r1
   d630a:	f7fd fec2 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d630e:	1e05      	subs	r5, r0, #0
   d6310:	f105 080c 	add.w	r8, r5, #12
   d6314:	d00f      	beq.n	d6336 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d6316:	2301      	movs	r3, #1
   d6318:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d631c:	4b08      	ldr	r3, [pc, #32]	; (d6340 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d631e:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d6320:	4640      	mov	r0, r8
   d6322:	f7ff fe15 	bl	d5f50 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d6326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6328:	622e      	str	r6, [r5, #32]
   d632a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d632e:	4646      	mov	r6, r8
   d6330:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6332:	6823      	ldr	r3, [r4, #0]
   d6334:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d6336:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d633a:	4638      	mov	r0, r7
   d633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6340:	000d8cf4 	.word	0x000d8cf4

000d6344 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6344:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6346:	2500      	movs	r5, #0
   d6348:	6005      	str	r5, [r0, #0]
   d634a:	4606      	mov	r6, r0
   d634c:	2030      	movs	r0, #48	; 0x30
   d634e:	f7fd fea0 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6352:	4604      	mov	r4, r0
   d6354:	b188      	cbz	r0, d637a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6356:	2301      	movs	r3, #1
   d6358:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d635c:	4b09      	ldr	r3, [pc, #36]	; (d6384 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d635e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d6360:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6364:	8183      	strh	r3, [r0, #12]
   d6366:	300e      	adds	r0, #14
   d6368:	f7ff fde7 	bl	d5f3a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d636c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d6370:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d6374:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d6378:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d637a:	6074      	str	r4, [r6, #4]
   d637c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d637e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6380:	4630      	mov	r0, r6
   d6382:	bd70      	pop	{r4, r5, r6, pc}
   d6384:	000d8d10 	.word	0x000d8d10

000d6388 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d6388:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d638a:	460d      	mov	r5, r1
   d638c:	4604      	mov	r4, r0
    WiringBleLock lk;
   d638e:	a801      	add	r0, sp, #4
   d6390:	f7ff fda2 	bl	d5ed8 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d6394:	682a      	ldr	r2, [r5, #0]
   d6396:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d639a:	6023      	str	r3, [r4, #0]
   d639c:	6853      	ldr	r3, [r2, #4]
   d639e:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d63a0:	a801      	add	r0, sp, #4
   d63a2:	f7ff fda1 	bl	d5ee8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d63a6:	4620      	mov	r0, r4
   d63a8:	b003      	add	sp, #12
   d63aa:	bd30      	pop	{r4, r5, pc}

000d63ac <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d63ac:	b530      	push	{r4, r5, lr}
   d63ae:	4605      	mov	r5, r0
   d63b0:	b087      	sub	sp, #28
   d63b2:	460c      	mov	r4, r1
    WiringBleLock lk;
   d63b4:	a801      	add	r0, sp, #4
   d63b6:	f7ff fd8f 	bl	d5ed8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d63ba:	682a      	ldr	r2, [r5, #0]
   d63bc:	6823      	ldr	r3, [r4, #0]
   d63be:	8812      	ldrh	r2, [r2, #0]
   d63c0:	881b      	ldrh	r3, [r3, #0]
   d63c2:	429a      	cmp	r2, r3
   d63c4:	d10d      	bne.n	d63e2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d63c6:	4629      	mov	r1, r5
   d63c8:	a802      	add	r0, sp, #8
   d63ca:	f7ff ffdd 	bl	d6388 <_ZNK8particle13BlePeerDevice7addressEv>
   d63ce:	4621      	mov	r1, r4
   d63d0:	a804      	add	r0, sp, #16
   d63d2:	f7ff ffd9 	bl	d6388 <_ZNK8particle13BlePeerDevice7addressEv>
   d63d6:	a904      	add	r1, sp, #16
   d63d8:	a802      	add	r0, sp, #8
   d63da:	f7ff fd9a 	bl	d5f12 <_ZNK8particle10BleAddresseqERKS0_>
   d63de:	4604      	mov	r4, r0
   d63e0:	b900      	cbnz	r0, d63e4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d63e2:	2400      	movs	r4, #0
    WiringBleLock lk;
   d63e4:	a801      	add	r0, sp, #4
   d63e6:	f7ff fd7f 	bl	d5ee8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d63ea:	4620      	mov	r0, r4
   d63ec:	b007      	add	sp, #28
   d63ee:	bd30      	pop	{r4, r5, pc}

000d63f0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d63f0:	b510      	push	{r4, lr}
   d63f2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d63f4:	2054      	movs	r0, #84	; 0x54
   d63f6:	f7fd fe4c 	bl	d4092 <_Znwj>
   d63fa:	4601      	mov	r1, r0
   d63fc:	b160      	cbz	r0, d6418 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d63fe:	2300      	movs	r3, #0
   d6400:	e9c0 3300 	strd	r3, r3, [r0]
   d6404:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6408:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d640c:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d6410:	6203      	str	r3, [r0, #32]
   d6412:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6414:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6416:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6418:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d641a:	b919      	cbnz	r1, d6424 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d641c:	4a09      	ldr	r2, [pc, #36]	; (d6444 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d641e:	200a      	movs	r0, #10
   d6420:	f7ff fb4a 	bl	d5ab8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6424:	2000      	movs	r0, #0
   d6426:	f7ff f90b 	bl	d5640 <hal_ble_stack_init>
   d642a:	b120      	cbz	r0, d6436 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d642c:	4a05      	ldr	r2, [pc, #20]	; (d6444 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d642e:	2100      	movs	r1, #0
   d6430:	200a      	movs	r0, #10
   d6432:	f7ff fb41 	bl	d5ab8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6436:	6821      	ldr	r1, [r4, #0]
   d6438:	4803      	ldr	r0, [pc, #12]	; (d6448 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d643a:	2200      	movs	r2, #0
   d643c:	f7ff f966 	bl	d570c <hal_ble_set_callback_on_periph_link_events>
}
   d6440:	4620      	mov	r0, r4
   d6442:	bd10      	pop	{r4, pc}
   d6444:	000d57b9 	.word	0x000d57b9
   d6448:	000d6859 	.word	0x000d6859

000d644c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d644c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d644e:	4c0b      	ldr	r4, [pc, #44]	; (d647c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6450:	7823      	ldrb	r3, [r4, #0]
   d6452:	f3bf 8f5b 	dmb	ish
   d6456:	07db      	lsls	r3, r3, #31
   d6458:	d40e      	bmi.n	d6478 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d645a:	4620      	mov	r0, r4
   d645c:	f7fd fe2a 	bl	d40b4 <__cxa_guard_acquire>
   d6460:	b150      	cbz	r0, d6478 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6462:	4807      	ldr	r0, [pc, #28]	; (d6480 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6464:	f7ff ffc4 	bl	d63f0 <_ZN8particle14BleLocalDeviceC1Ev>
   d6468:	4620      	mov	r0, r4
   d646a:	f7fd fe28 	bl	d40be <__cxa_guard_release>
   d646e:	4a05      	ldr	r2, [pc, #20]	; (d6484 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6470:	4905      	ldr	r1, [pc, #20]	; (d6488 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d6472:	4803      	ldr	r0, [pc, #12]	; (d6480 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6474:	f001 fc00 	bl	d7c78 <__aeabi_atexit>
    return instance;
}
   d6478:	4801      	ldr	r0, [pc, #4]	; (d6480 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d647a:	bd10      	pop	{r4, pc}
   d647c:	2003e644 	.word	0x2003e644
   d6480:	2003e650 	.word	0x2003e650
   d6484:	2003e56c 	.word	0x2003e56c
   d6488:	000d6661 	.word	0x000d6661

000d648c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d648c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d648e:	6803      	ldr	r3, [r0, #0]
   d6490:	3b09      	subs	r3, #9
   d6492:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6494:	b08d      	sub	sp, #52	; 0x34
   d6496:	4604      	mov	r4, r0
   d6498:	460d      	mov	r5, r1
    switch (event->type) {
   d649a:	d811      	bhi.n	d64c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d649c:	f7ff ffd6 	bl	d644c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d64a0:	88a1      	ldrh	r1, [r4, #4]
   d64a2:	6800      	ldr	r0, [r0, #0]
   d64a4:	f7ff feb8 	bl	d6218 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d64a8:	4603      	mov	r3, r0
   d64aa:	b958      	cbnz	r0, d64c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d64ac:	2220      	movs	r2, #32
   d64ae:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d64b2:	4a0b      	ldr	r2, [pc, #44]	; (d64e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d64b4:	9200      	str	r2, [sp, #0]
   d64b6:	490b      	ldr	r1, [pc, #44]	; (d64e4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d64b8:	aa04      	add	r2, sp, #16
   d64ba:	2032      	movs	r0, #50	; 0x32
   d64bc:	f7ff fb04 	bl	d5ac8 <log_message>
}
   d64c0:	b00d      	add	sp, #52	; 0x34
   d64c2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d64c4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d64c6:	2a00      	cmp	r2, #0
   d64c8:	d0fa      	beq.n	d64c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d64ca:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64ce:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d64d2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d64d6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d64d8:	aa04      	add	r2, sp, #16
   d64da:	a903      	add	r1, sp, #12
   d64dc:	47a0      	blx	r4
}
   d64de:	e7ef      	b.n	d64c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d64e0:	000d8c03 	.word	0x000d8c03
   d64e4:	000d8bdc 	.word	0x000d8bdc

000d64e8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d64e8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d64ea:	2000      	movs	r0, #0
   d64ec:	f7ff f8a8 	bl	d5640 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d64f0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d64f4:	bd08      	pop	{r3, pc}

000d64f6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d64f6:	4608      	mov	r0, r1
   d64f8:	b911      	cbnz	r1, d6500 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d64fa:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d64fc:	f7ff b8a8 	b.w	d5650 <hal_ble_gap_set_advertising_data>
   d6500:	6a09      	ldr	r1, [r1, #32]
   d6502:	2200      	movs	r2, #0
   d6504:	e7fa      	b.n	d64fc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6506 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6506:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6508:	4608      	mov	r0, r1
   d650a:	b929      	cbnz	r1, d6518 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d650c:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d650e:	b003      	add	sp, #12
   d6510:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6514:	f7ff b8a4 	b.w	d5660 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6518:	2101      	movs	r1, #1
   d651a:	9001      	str	r0, [sp, #4]
   d651c:	f7ff fe40 	bl	d61a0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6520:	9801      	ldr	r0, [sp, #4]
   d6522:	2200      	movs	r2, #0
   d6524:	6a01      	ldr	r1, [r0, #32]
   d6526:	e7f2      	b.n	d650e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6528 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6528:	b538      	push	{r3, r4, r5, lr}
   d652a:	4604      	mov	r4, r0
   d652c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d652e:	f7ff ffe2 	bl	d64f6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6532:	2800      	cmp	r0, #0
   d6534:	db0a      	blt.n	d654c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6536:	4629      	mov	r1, r5
   d6538:	4620      	mov	r0, r4
   d653a:	f7ff ffe4 	bl	d6506 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d653e:	2800      	cmp	r0, #0
   d6540:	db04      	blt.n	d654c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6546:	2000      	movs	r0, #0
   d6548:	f7ff b892 	b.w	d5670 <hal_ble_gap_start_advertising>
}
   d654c:	bd38      	pop	{r3, r4, r5, pc}

000d654e <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d654e:	6803      	ldr	r3, [r0, #0]
   d6550:	69d8      	ldr	r0, [r3, #28]
}
   d6552:	2800      	cmp	r0, #0
   d6554:	bfd4      	ite	le
   d6556:	2000      	movle	r0, #0
   d6558:	2001      	movgt	r0, #1
   d655a:	4770      	bx	lr

000d655c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d655c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d655e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6560:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6562:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6564:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6566:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6568:	f7fd fd93 	bl	d4092 <_Znwj>
   d656c:	b118      	cbz	r0, d6576 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d656e:	682b      	ldr	r3, [r5, #0]
   d6570:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6572:	686b      	ldr	r3, [r5, #4]
   d6574:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6576:	4b03      	ldr	r3, [pc, #12]	; (d6584 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6578:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d657a:	4b03      	ldr	r3, [pc, #12]	; (d6588 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d657c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d657e:	60a3      	str	r3, [r4, #8]
      }
   d6580:	4620      	mov	r0, r4
   d6582:	bd38      	pop	{r3, r4, r5, pc}
   d6584:	000d5e6f 	.word	0x000d5e6f
   d6588:	000d5e31 	.word	0x000d5e31

000d658c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d658c:	680b      	ldr	r3, [r1, #0]
   d658e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6590:	b113      	cbz	r3, d6598 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6592:	685a      	ldr	r2, [r3, #4]
   d6594:	3201      	adds	r2, #1
   d6596:	605a      	str	r2, [r3, #4]
      }
   d6598:	4770      	bx	lr

000d659a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d659a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d659c:	f851 3b04 	ldr.w	r3, [r1], #4
   d65a0:	4604      	mov	r4, r0
   d65a2:	f840 3b04 	str.w	r3, [r0], #4
   d65a6:	f7ff fff1 	bl	d658c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d65aa:	6823      	ldr	r3, [r4, #0]
   d65ac:	b90b      	cbnz	r3, d65b2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d65ae:	f7ff fc37 	bl	d5e20 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d65b2:	4620      	mov	r0, r4
   d65b4:	bd10      	pop	{r4, pc}

000d65b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d65b6:	b510      	push	{r4, lr}
   d65b8:	f851 3b04 	ldr.w	r3, [r1], #4
   d65bc:	4604      	mov	r4, r0
   d65be:	f840 3b04 	str.w	r3, [r0], #4
   d65c2:	f7ff ffe3 	bl	d658c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d65c6:	4620      	mov	r0, r4
   d65c8:	bd10      	pop	{r4, pc}

000d65ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d65ca:	b510      	push	{r4, lr}
   d65cc:	f851 3b04 	ldr.w	r3, [r1], #4
   d65d0:	4604      	mov	r4, r0
   d65d2:	f840 3b04 	str.w	r3, [r0], #4
   d65d6:	f7ff ffd9 	bl	d658c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d65da:	4620      	mov	r0, r4
   d65dc:	bd10      	pop	{r4, pc}

000d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d65de:	b510      	push	{r4, lr}
   d65e0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d65e2:	6800      	ldr	r0, [r0, #0]
   d65e4:	b128      	cbz	r0, d65f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d65e6:	6843      	ldr	r3, [r0, #4]
   d65e8:	3b01      	subs	r3, #1
   d65ea:	6043      	str	r3, [r0, #4]
   d65ec:	b90b      	cbnz	r3, d65f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d65ee:	f7ff fb8a 	bl	d5d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d65f2:	4620      	mov	r0, r4
   d65f4:	bd10      	pop	{r4, pc}

000d65f6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d65f6:	b510      	push	{r4, lr}
   d65f8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d65fa:	3004      	adds	r0, #4
   d65fc:	f7ff ffef 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6600:	4620      	mov	r0, r4
   d6602:	bd10      	pop	{r4, pc}

000d6604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6604:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6606:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d660a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d660c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6610:	42ae      	cmp	r6, r5
   d6612:	d004      	beq.n	d661e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6614:	1d28      	adds	r0, r5, #4
   d6616:	f7ff ffe2 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d661a:	3508      	adds	r5, #8
   d661c:	e7f8      	b.n	d6610 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d661e:	6820      	ldr	r0, [r4, #0]
   d6620:	f7ff faf6 	bl	d5c10 <free>
}
   d6624:	4620      	mov	r0, r4
   d6626:	bd70      	pop	{r4, r5, r6, pc}

000d6628 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6628:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d662a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d662e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6630:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6634:	42ae      	cmp	r6, r5
   d6636:	d004      	beq.n	d6642 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6638:	1d28      	adds	r0, r5, #4
   d663a:	f7ff ffd0 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d663e:	3508      	adds	r5, #8
   d6640:	e7f8      	b.n	d6634 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6642:	6820      	ldr	r0, [r4, #0]
   d6644:	f7ff fae4 	bl	d5c10 <free>
}
   d6648:	4620      	mov	r0, r4
   d664a:	bd70      	pop	{r4, r5, r6, pc}

000d664c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d664c:	b510      	push	{r4, lr}
   d664e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6650:	3024      	adds	r0, #36	; 0x24
   d6652:	f7ff ffe9 	bl	d6628 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6656:	f104 0018 	add.w	r0, r4, #24
   d665a:	f7ff ffd3 	bl	d6604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d665e:	bd10      	pop	{r4, pc}

000d6660 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6662:	6804      	ldr	r4, [r0, #0]
   d6664:	4606      	mov	r6, r0
   d6666:	b324      	cbz	r4, d66b2 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6668:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d666c:	f7ff fc0b 	bl	d5e86 <_ZNSt14_Function_baseD1Ev>
   d6670:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6674:	f7ff fc07 	bl	d5e86 <_ZNSt14_Function_baseD1Ev>
   d6678:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d667c:	f7ff fc03 	bl	d5e86 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6680:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6684:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6688:	42af      	cmp	r7, r5
   d668a:	d004      	beq.n	d6696 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d668c:	1d28      	adds	r0, r5, #4
   d668e:	f7ff ffa6 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6692:	3508      	adds	r5, #8
   d6694:	e7f8      	b.n	d6688 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d6696:	69a0      	ldr	r0, [r4, #24]
   d6698:	f7ff faba 	bl	d5c10 <free>
    ~BleLocalDeviceImpl() = default;
   d669c:	f104 000c 	add.w	r0, r4, #12
   d66a0:	f7ff ffc2 	bl	d6628 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d66a4:	4620      	mov	r0, r4
   d66a6:	f7ff ffad 	bl	d6604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d66aa:	2154      	movs	r1, #84	; 0x54
   d66ac:	4620      	mov	r0, r4
   d66ae:	f001 fae8 	bl	d7c82 <_ZdlPvj>
   d66b2:	4630      	mov	r0, r6
   d66b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66b6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d66b6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d66b8:	b510      	push	{r4, lr}
      if (_M_empty())
   d66ba:	b90a      	cbnz	r2, d66c0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d66bc:	f001 fae5 	bl	d7c8a <_ZSt25__throw_bad_function_callv>
    }
   d66c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d66c4:	68c3      	ldr	r3, [r0, #12]
   d66c6:	4718      	bx	r3

000d66c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d66c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d66ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66cc:	4604      	mov	r4, r0
   d66ce:	460d      	mov	r5, r1
   d66d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d66d2:	d914      	bls.n	d66fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d66d4:	4290      	cmp	r0, r2
   d66d6:	d213      	bcs.n	d6700 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d66d8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d66dc:	1a75      	subs	r5, r6, r1
   d66de:	f1a1 0708 	sub.w	r7, r1, #8
   d66e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d66e4:	42b7      	cmp	r7, r6
   d66e6:	d018      	beq.n	d671a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d66e8:	b11c      	cbz	r4, d66f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d66ea:	4631      	mov	r1, r6
   d66ec:	4620      	mov	r0, r4
   d66ee:	f7ff ff6c 	bl	d65ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d66f2:	1d30      	adds	r0, r6, #4
   d66f4:	f7ff ff73 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d66f8:	3e08      	subs	r6, #8
   d66fa:	3c08      	subs	r4, #8
   d66fc:	e7f2      	b.n	d66e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d66fe:	d00c      	beq.n	d671a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6700:	42b5      	cmp	r5, r6
   d6702:	d00a      	beq.n	d671a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6704:	b11c      	cbz	r4, d670e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6706:	4629      	mov	r1, r5
   d6708:	4620      	mov	r0, r4
   d670a:	f7ff ff5e 	bl	d65ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d670e:	1d28      	adds	r0, r5, #4
   d6710:	f7ff ff65 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6714:	3508      	adds	r5, #8
   d6716:	3408      	adds	r4, #8
   d6718:	e7f2      	b.n	d6700 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d671a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d671c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6720:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6724:	4605      	mov	r5, r0
   d6726:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6728:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d672c:	42a7      	cmp	r7, r4
   d672e:	d103      	bne.n	d6738 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6730:	2600      	movs	r6, #0
}
   d6732:	4630      	mov	r0, r6
   d6734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6738:	4641      	mov	r1, r8
   d673a:	4620      	mov	r0, r4
   d673c:	f7ff fe36 	bl	d63ac <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6740:	4606      	mov	r6, r0
   d6742:	b908      	cbnz	r0, d6748 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6744:	3408      	adds	r4, #8
   d6746:	e7f1      	b.n	d672c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6748:	2c00      	cmp	r4, #0
   d674a:	d0f1      	beq.n	d6730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d674c:	1d20      	adds	r0, r4, #4
   d674e:	f7ff ff46 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6752:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6756:	f104 0108 	add.w	r1, r4, #8
   d675a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d675e:	4620      	mov	r0, r4
   d6760:	f7ff ffb2 	bl	d66c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6764:	686b      	ldr	r3, [r5, #4]
   d6766:	3b01      	subs	r3, #1
   d6768:	606b      	str	r3, [r5, #4]
    return true;
   d676a:	e7e2      	b.n	d6732 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d676c <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d676c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d676e:	4607      	mov	r7, r0
   d6770:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d6772:	4668      	mov	r0, sp
   d6774:	f7ff fbb0 	bl	d5ed8 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6778:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d677a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d677e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d6782:	42ac      	cmp	r4, r5
   d6784:	d02b      	beq.n	d67de <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d6786:	2224      	movs	r2, #36	; 0x24
   d6788:	2100      	movs	r1, #0
   d678a:	a801      	add	r0, sp, #4
   d678c:	f001 fbd6 	bl	d7f3c <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d6790:	6823      	ldr	r3, [r4, #0]
   d6792:	2200      	movs	r2, #0
   d6794:	8818      	ldrh	r0, [r3, #0]
   d6796:	a901      	add	r1, sp, #4
   d6798:	f7fe ffa4 	bl	d56e4 <hal_ble_gap_get_connection_info>
   d679c:	4606      	mov	r6, r0
   d679e:	b108      	cbz	r0, d67a4 <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d67a0:	3408      	adds	r4, #8
   d67a2:	e7ee      	b.n	d6782 <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d67a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d67a8:	2b01      	cmp	r3, #1
   d67aa:	d1f9      	bne.n	d67a0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d67ac:	4668      	mov	r0, sp
   d67ae:	f7ff facf 	bl	d5d50 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d67b2:	6823      	ldr	r3, [r4, #0]
   d67b4:	4631      	mov	r1, r6
   d67b6:	8818      	ldrh	r0, [r3, #0]
   d67b8:	f7fe ff62 	bl	d5680 <hal_ble_gap_disconnect>
   d67bc:	1e05      	subs	r5, r0, #0
   d67be:	db08      	blt.n	d67d2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d67c0:	4668      	mov	r0, sp
   d67c2:	f7ff fab9 	bl	d5d38 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d67c6:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d67c8:	4621      	mov	r1, r4
   d67ca:	3018      	adds	r0, #24
   d67cc:	f7ff ffa6 	bl	d671c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d67d0:	4635      	mov	r5, r6
    WiringBleLock lk;
   d67d2:	4668      	mov	r0, sp
   d67d4:	f7ff fb88 	bl	d5ee8 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d67d8:	4628      	mov	r0, r5
   d67da:	b00b      	add	sp, #44	; 0x2c
   d67dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d67de:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d67e2:	e7f6      	b.n	d67d2 <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d67e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d67e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d67e6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d67e8:	6846      	ldr	r6, [r0, #4]
   d67ea:	4668      	mov	r0, sp
   d67ec:	f7ff feed 	bl	d65ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d67f0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d67f4:	429f      	cmp	r7, r3
   d67f6:	db12      	blt.n	d681e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d67f8:	3701      	adds	r7, #1
        if (n > 0) {
   d67fa:	2f00      	cmp	r7, #0
   d67fc:	dd29      	ble.n	d6852 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d67fe:	00f8      	lsls	r0, r7, #3
   d6800:	f7ff f9fe 	bl	d5c00 <malloc>
            if (!d) {
   d6804:	4605      	mov	r5, r0
   d6806:	b1f0      	cbz	r0, d6846 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6808:	e9d4 1200 	ldrd	r1, r2, [r4]
   d680c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6810:	f7ff ff5a 	bl	d66c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6814:	6820      	ldr	r0, [r4, #0]
   d6816:	f7ff f9fb 	bl	d5c10 <free>
        data_ = d;
   d681a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d681c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d681e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6820:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6822:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6826:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d682a:	4631      	mov	r1, r6
   d682c:	f106 0008 	add.w	r0, r6, #8
   d6830:	f7ff ff4a 	bl	d66c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6834:	b11e      	cbz	r6, d683e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6836:	4669      	mov	r1, sp
   d6838:	4630      	mov	r0, r6
   d683a:	f7ff fec6 	bl	d65ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d683e:	6863      	ldr	r3, [r4, #4]
   d6840:	3301      	adds	r3, #1
   d6842:	6063      	str	r3, [r4, #4]
    return true;
   d6844:	2501      	movs	r5, #1
   d6846:	a801      	add	r0, sp, #4
   d6848:	f7ff fec9 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d684c:	4628      	mov	r0, r5
   d684e:	b003      	add	sp, #12
   d6850:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6852:	2500      	movs	r5, #0
   d6854:	e7de      	b.n	d6814 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6858 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d685c:	4605      	mov	r5, r0
   d685e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6860:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6862:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6864:	f7ff fb38 	bl	d5ed8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6868:	682e      	ldr	r6, [r5, #0]
   d686a:	2e04      	cmp	r6, #4
   d686c:	d06b      	beq.n	d6946 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d686e:	d807      	bhi.n	d6880 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6870:	2e03      	cmp	r6, #3
   d6872:	d028      	beq.n	d68c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6874:	a803      	add	r0, sp, #12
   d6876:	f7ff fb37 	bl	d5ee8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d687a:	b00e      	add	sp, #56	; 0x38
   d687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6880:	f1a6 030c 	sub.w	r3, r6, #12
   d6884:	2b03      	cmp	r3, #3
   d6886:	d8f5      	bhi.n	d6874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6888:	89a9      	ldrh	r1, [r5, #12]
   d688a:	4620      	mov	r0, r4
   d688c:	f7ff fcc4 	bl	d6218 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6890:	4607      	mov	r7, r0
   d6892:	2800      	cmp	r0, #0
   d6894:	d0ee      	beq.n	d6874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6896:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6898:	2b00      	cmp	r3, #0
   d689a:	d0eb      	beq.n	d6874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d689c:	2210      	movs	r2, #16
   d689e:	2100      	movs	r1, #0
   d68a0:	a807      	add	r0, sp, #28
   d68a2:	f001 fb4b 	bl	d7f3c <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d68a6:	2e0d      	cmp	r6, #13
                        };
   d68a8:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d68aa:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d68ae:	f040 8092 	bne.w	d69d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d68b2:	686b      	ldr	r3, [r5, #4]
   d68b4:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d68b6:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d68b8:	9308      	str	r3, [sp, #32]
   d68ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d68bc:	a906      	add	r1, sp, #24
   d68be:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d68c2:	4798      	blx	r3
   d68c4:	e7d6      	b.n	d6874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d68c6:	a804      	add	r0, sp, #16
   d68c8:	f7ff fd3c 	bl	d6344 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d68cc:	9b04      	ldr	r3, [sp, #16]
   d68ce:	89aa      	ldrh	r2, [r5, #12]
   d68d0:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d68d2:	6869      	ldr	r1, [r5, #4]
   d68d4:	9804      	ldr	r0, [sp, #16]
   d68d6:	3108      	adds	r1, #8
   d68d8:	3002      	adds	r0, #2
   d68da:	f7ff fb0d 	bl	d5ef8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d68de:	a904      	add	r1, sp, #16
   d68e0:	a806      	add	r0, sp, #24
   d68e2:	f7ff fe72 	bl	d65ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d68e6:	a906      	add	r1, sp, #24
   d68e8:	f104 0018 	add.w	r0, r4, #24
   d68ec:	f7ff ff7a 	bl	d67e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d68f0:	4605      	mov	r5, r0
   d68f2:	a807      	add	r0, sp, #28
   d68f4:	f7ff fe73 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68f8:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d68fa:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d68fc:	b98d      	cbnz	r5, d6922 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d68fe:	4b3e      	ldr	r3, [pc, #248]	; (d69f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6900:	493e      	ldr	r1, [pc, #248]	; (d69fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6902:	9300      	str	r3, [sp, #0]
   d6904:	2032      	movs	r0, #50	; 0x32
   d6906:	462b      	mov	r3, r5
   d6908:	aa06      	add	r2, sp, #24
   d690a:	9507      	str	r5, [sp, #28]
   d690c:	f7ff f8dc 	bl	d5ac8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6910:	9b04      	ldr	r3, [sp, #16]
   d6912:	4629      	mov	r1, r5
   d6914:	8818      	ldrh	r0, [r3, #0]
   d6916:	f7fe feb3 	bl	d5680 <hal_ble_gap_disconnect>
   d691a:	a805      	add	r0, sp, #20
   d691c:	f7ff fe5f 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6920:	e7a8      	b.n	d6874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6922:	4a37      	ldr	r2, [pc, #220]	; (d6a00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6924:	9200      	str	r2, [sp, #0]
   d6926:	2300      	movs	r3, #0
   d6928:	4934      	ldr	r1, [pc, #208]	; (d69fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d692a:	9307      	str	r3, [sp, #28]
   d692c:	aa06      	add	r2, sp, #24
   d692e:	2001      	movs	r0, #1
   d6930:	f7ff f8ca 	bl	d5ac8 <log_message>
                if (impl->connectedCallback_) {
   d6934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6936:	2b00      	cmp	r3, #0
   d6938:	d0ef      	beq.n	d691a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d693a:	a904      	add	r1, sp, #16
   d693c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6940:	f7ff feb9 	bl	d66b6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6944:	e7e9      	b.n	d691a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6946:	89a9      	ldrh	r1, [r5, #12]
   d6948:	4620      	mov	r0, r4
   d694a:	f7ff fc65 	bl	d6218 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d694e:	4606      	mov	r6, r0
   d6950:	2800      	cmp	r0, #0
   d6952:	d08f      	beq.n	d6874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6954:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6956:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d695a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d695e:	802a      	strh	r2, [r5, #0]
   d6960:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6964:	4299      	cmp	r1, r3
   d6966:	d003      	beq.n	d6970 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6968:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d696c:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d696e:	e7f9      	b.n	d6964 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6970:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6974:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6978:	45b8      	cmp	r8, r7
   d697a:	d004      	beq.n	d6986 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d697c:	1d38      	adds	r0, r7, #4
   d697e:	f7ff fe2e 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6982:	3708      	adds	r7, #8
   d6984:	e7f8      	b.n	d6978 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6986:	2300      	movs	r3, #0
   d6988:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d698a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d698e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6992:	45b8      	cmp	r8, r7
   d6994:	d004      	beq.n	d69a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6996:	1d38      	adds	r0, r7, #4
   d6998:	f7ff fe21 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d699c:	3708      	adds	r7, #8
   d699e:	e7f8      	b.n	d6992 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d69a0:	2300      	movs	r3, #0
   d69a2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d69a4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d69a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d69a8:	b123      	cbz	r3, d69b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d69aa:	4631      	mov	r1, r6
   d69ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d69b0:	f7ff fe81 	bl	d66b6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d69b4:	2300      	movs	r3, #0
   d69b6:	2220      	movs	r2, #32
   d69b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d69bc:	4a11      	ldr	r2, [pc, #68]	; (d6a04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d69be:	9200      	str	r2, [sp, #0]
   d69c0:	490e      	ldr	r1, [pc, #56]	; (d69fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d69c2:	aa06      	add	r2, sp, #24
   d69c4:	2001      	movs	r0, #1
   d69c6:	f7ff f87f 	bl	d5ac8 <log_message>
                    impl->peers_.removeOne(*peer);
   d69ca:	4631      	mov	r1, r6
   d69cc:	f104 0018 	add.w	r0, r4, #24
   d69d0:	f7ff fea4 	bl	d671c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d69d4:	e74e      	b.n	d6874 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d69d6:	2e0f      	cmp	r6, #15
   d69d8:	f47f af6f 	bne.w	d68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d69dc:	686b      	ldr	r3, [r5, #4]
   d69de:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d69e0:	7a2b      	ldrb	r3, [r5, #8]
   d69e2:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d69e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d69ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d69ee:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d69f2:	2308      	movs	r3, #8
   d69f4:	e760      	b.n	d68b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d69f6:	bf00      	nop
   d69f8:	000d8c1b 	.word	0x000d8c1b
   d69fc:	000d8bdc 	.word	0x000d8bdc
   d6a00:	000d8c41 	.word	0x000d8c41
   d6a04:	000d8c5e 	.word	0x000d8c5e

000d6a08 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6a08:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6a0a:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6a0c:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6a0e:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6a12:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6a16:	6823      	ldr	r3, [r4, #0]
   d6a18:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a1a:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6a1c:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d6a1e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d6a20:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d6a22:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d6a24:	f7ff fddb 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d6a28:	4620      	mov	r0, r4
   d6a2a:	b002      	add	sp, #8
   d6a2c:	bd10      	pop	{r4, pc}

000d6a2e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6a2e:	b513      	push	{r0, r1, r4, lr}
   d6a30:	460b      	mov	r3, r1
   d6a32:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a34:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6a38:	466c      	mov	r4, sp
   d6a3a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6a3e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6a42:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6a46:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6a4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6a4e:	b002      	add	sp, #8
   d6a50:	bd10      	pop	{r4, pc}

000d6a52 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d6a52:	b538      	push	{r3, r4, r5, lr}
   d6a54:	4605      	mov	r5, r0
   d6a56:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d6a58:	f7ff ffe9 	bl	d6a2e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a5c:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6a5e:	68a2      	ldr	r2, [r4, #8]
   d6a60:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a62:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a64:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6a66:	68e2      	ldr	r2, [r4, #12]
   d6a68:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a6a:	60e3      	str	r3, [r4, #12]
      }
   d6a6c:	bd38      	pop	{r3, r4, r5, pc}

000d6a6e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d6a6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6a70:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d6a72:	4604      	mov	r4, r0
   d6a74:	4608      	mov	r0, r1
	__x.swap(*this);
   d6a76:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d6a78:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d6a7a:	f7ff ffea 	bl	d6a52 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d6a7e:	4621      	mov	r1, r4
   d6a80:	4668      	mov	r0, sp
   d6a82:	f7ff ffe6 	bl	d6a52 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d6a86:	4668      	mov	r0, sp
   d6a88:	f7ff f9fd 	bl	d5e86 <_ZNSt14_Function_baseD1Ev>
      }
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	b004      	add	sp, #16
   d6a90:	bd10      	pop	{r4, pc}

000d6a92 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d6a92:	b570      	push	{r4, r5, r6, lr}
   d6a94:	460e      	mov	r6, r1
   d6a96:	b088      	sub	sp, #32
   d6a98:	4604      	mov	r4, r0
   d6a9a:	9201      	str	r2, [sp, #4]
   d6a9c:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d6a9e:	f7ff fb9b 	bl	d61d8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d6aa2:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d6aa4:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d6aa6:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d6aa8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6aac:	f000 fe03 	bl	d76b6 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d6ab0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d6ab4:	b185      	cbz	r5, d6ad8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d6ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6ab8:	9502      	str	r5, [sp, #8]
   d6aba:	a902      	add	r1, sp, #8
   d6abc:	a804      	add	r0, sp, #16
   d6abe:	9303      	str	r3, [sp, #12]
   d6ac0:	f7ff fd4c 	bl	d655c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d6ac4:	a904      	add	r1, sp, #16
   d6ac6:	4630      	mov	r0, r6
   d6ac8:	f7ff ffd1 	bl	d6a6e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d6acc:	a804      	add	r0, sp, #16
   d6ace:	f7ff f9da 	bl	d5e86 <_ZNSt14_Function_baseD1Ev>
    }
   d6ad2:	4620      	mov	r0, r4
   d6ad4:	b008      	add	sp, #32
   d6ad6:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d6ad8:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d6ada:	e7f3      	b.n	d6ac4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d6adc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ae0:	b086      	sub	sp, #24
   d6ae2:	4607      	mov	r7, r0
   d6ae4:	461d      	mov	r5, r3
   d6ae6:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6ae8:	2300      	movs	r3, #0
   d6aea:	4689      	mov	r9, r1
   d6aec:	4692      	mov	sl, r2
   d6aee:	9304      	str	r3, [sp, #16]
   d6af0:	f7fd facf 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6af4:	1e06      	subs	r6, r0, #0
   d6af6:	f106 080c 	add.w	r8, r6, #12
   d6afa:	d01d      	beq.n	d6b38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d6afc:	2301      	movs	r3, #1
	: _M_impl(__a)
   d6afe:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d6b00:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d6b04:	4b15      	ldr	r3, [pc, #84]	; (d6b5c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d6b06:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d6b0a:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d6b0e:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d6b12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6b14:	9300      	str	r3, [sp, #0]
   d6b16:	464a      	mov	r2, r9
   d6b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6b1a:	a903      	add	r1, sp, #12
   d6b1c:	4640      	mov	r0, r8
   d6b1e:	f7ff ffb8 	bl	d6a92 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d6b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b26:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d6b28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d6b2a:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d6b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b2e:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d6b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b34:	682b      	ldr	r3, [r5, #0]
   d6b36:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d6b38:	a904      	add	r1, sp, #16
   d6b3a:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d6b3c:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d6b40:	f7ff ff62 	bl	d6a08 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d6b44:	a805      	add	r0, sp, #20
   d6b46:	f7ff fd4a 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d6b4a:	6839      	ldr	r1, [r7, #0]
   d6b4c:	b919      	cbnz	r1, d6b56 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d6b4e:	4a04      	ldr	r2, [pc, #16]	; (d6b60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d6b50:	200a      	movs	r0, #10
   d6b52:	f7fe ffb1 	bl	d5ab8 <panic_>
}
   d6b56:	b006      	add	sp, #24
   d6b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b5c:	000d8cd8 	.word	0x000d8cd8
   d6b60:	000d57b9 	.word	0x000d57b9

000d6b64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6b64:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b68:	4604      	mov	r4, r0
   d6b6a:	460d      	mov	r5, r1
   d6b6c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6b6e:	d914      	bls.n	d6b9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6b70:	4290      	cmp	r0, r2
   d6b72:	d213      	bcs.n	d6b9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6b74:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6b78:	1a75      	subs	r5, r6, r1
   d6b7a:	f1a1 0708 	sub.w	r7, r1, #8
   d6b7e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6b80:	42b7      	cmp	r7, r6
   d6b82:	d018      	beq.n	d6bb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6b84:	b11c      	cbz	r4, d6b8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d6b86:	4631      	mov	r1, r6
   d6b88:	4620      	mov	r0, r4
   d6b8a:	f7ff fd14 	bl	d65b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6b8e:	1d30      	adds	r0, r6, #4
   d6b90:	f7ff fd25 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6b94:	3e08      	subs	r6, #8
   d6b96:	3c08      	subs	r4, #8
   d6b98:	e7f2      	b.n	d6b80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6b9a:	d00c      	beq.n	d6bb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6b9c:	42b5      	cmp	r5, r6
   d6b9e:	d00a      	beq.n	d6bb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6ba0:	b11c      	cbz	r4, d6baa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6ba2:	4629      	mov	r1, r5
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	f7ff fd06 	bl	d65b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6baa:	1d28      	adds	r0, r5, #4
   d6bac:	f7ff fd17 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6bb0:	3508      	adds	r5, #8
   d6bb2:	3408      	adds	r4, #8
   d6bb4:	e7f2      	b.n	d6b9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6bb8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6bba:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6bbc:	4605      	mov	r5, r0
        if (n > 0) {
   d6bbe:	dd11      	ble.n	d6be4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6bc0:	00f0      	lsls	r0, r6, #3
   d6bc2:	f7ff f81d 	bl	d5c00 <malloc>
            if (!d) {
   d6bc6:	4604      	mov	r4, r0
   d6bc8:	b158      	cbz	r0, d6be2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6bca:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6bce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6bd2:	f7ff ffc7 	bl	d6b64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6bd6:	6828      	ldr	r0, [r5, #0]
   d6bd8:	f7ff f81a 	bl	d5c10 <free>
        data_ = d;
   d6bdc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6bde:	60ae      	str	r6, [r5, #8]
        return true;
   d6be0:	2001      	movs	r0, #1
    }
   d6be2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6be4:	2400      	movs	r4, #0
   d6be6:	e7f6      	b.n	d6bd6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6be8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6bea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6bec:	6845      	ldr	r5, [r0, #4]
   d6bee:	4668      	mov	r0, sp
   d6bf0:	f7ff fce1 	bl	d65b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6bf4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6bf8:	4299      	cmp	r1, r3
   d6bfa:	da10      	bge.n	d6c1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6bfc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6bfe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6c00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6c04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6c08:	4629      	mov	r1, r5
   d6c0a:	f105 0008 	add.w	r0, r5, #8
   d6c0e:	f7ff ffa9 	bl	d6b64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6c12:	b98d      	cbnz	r5, d6c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6c14:	6863      	ldr	r3, [r4, #4]
   d6c16:	3301      	adds	r3, #1
   d6c18:	6063      	str	r3, [r4, #4]
    return true;
   d6c1a:	2601      	movs	r6, #1
   d6c1c:	e006      	b.n	d6c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c1e:	3101      	adds	r1, #1
   d6c20:	4620      	mov	r0, r4
   d6c22:	f7ff ffc9 	bl	d6bb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6c26:	4606      	mov	r6, r0
   d6c28:	2800      	cmp	r0, #0
   d6c2a:	d1e7      	bne.n	d6bfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6c2c:	a801      	add	r0, sp, #4
   d6c2e:	f7ff fcd6 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6c32:	4630      	mov	r0, r6
   d6c34:	b002      	add	sp, #8
   d6c36:	bd70      	pop	{r4, r5, r6, pc}
   d6c38:	4669      	mov	r1, sp
   d6c3a:	4628      	mov	r0, r5
   d6c3c:	f7ff fcbb 	bl	d65b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6c40:	e7e8      	b.n	d6c14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6c42:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c46:	4604      	mov	r4, r0
   d6c48:	460d      	mov	r5, r1
   d6c4a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6c4c:	d914      	bls.n	d6c78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6c4e:	4290      	cmp	r0, r2
   d6c50:	d213      	bcs.n	d6c7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6c52:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6c56:	1a75      	subs	r5, r6, r1
   d6c58:	f1a1 0708 	sub.w	r7, r1, #8
   d6c5c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6c5e:	42b7      	cmp	r7, r6
   d6c60:	d018      	beq.n	d6c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6c62:	b11c      	cbz	r4, d6c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6c64:	4631      	mov	r1, r6
   d6c66:	4620      	mov	r0, r4
   d6c68:	f7ff fc97 	bl	d659a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6c6c:	1d30      	adds	r0, r6, #4
   d6c6e:	f7ff fcb6 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6c72:	3e08      	subs	r6, #8
   d6c74:	3c08      	subs	r4, #8
   d6c76:	e7f2      	b.n	d6c5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6c78:	d00c      	beq.n	d6c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6c7a:	42b5      	cmp	r5, r6
   d6c7c:	d00a      	beq.n	d6c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6c7e:	b11c      	cbz	r4, d6c88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6c80:	4629      	mov	r1, r5
   d6c82:	4620      	mov	r0, r4
   d6c84:	f7ff fc89 	bl	d659a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6c88:	1d28      	adds	r0, r5, #4
   d6c8a:	f7ff fca8 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6c8e:	3508      	adds	r5, #8
   d6c90:	3408      	adds	r4, #8
   d6c92:	e7f2      	b.n	d6c7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6c96:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6c98:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6c9a:	4605      	mov	r5, r0
        if (n > 0) {
   d6c9c:	dd11      	ble.n	d6cc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6c9e:	00f0      	lsls	r0, r6, #3
   d6ca0:	f7fe ffae 	bl	d5c00 <malloc>
            if (!d) {
   d6ca4:	4604      	mov	r4, r0
   d6ca6:	b158      	cbz	r0, d6cc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6ca8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6cac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6cb0:	f7ff ffc7 	bl	d6c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6cb4:	6828      	ldr	r0, [r5, #0]
   d6cb6:	f7fe ffab 	bl	d5c10 <free>
        data_ = d;
   d6cba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6cbc:	60ae      	str	r6, [r5, #8]
        return true;
   d6cbe:	2001      	movs	r0, #1
    }
   d6cc0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6cc2:	2400      	movs	r4, #0
   d6cc4:	e7f6      	b.n	d6cb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6cc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6cc8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6cca:	6845      	ldr	r5, [r0, #4]
   d6ccc:	4668      	mov	r0, sp
   d6cce:	f7ff fc64 	bl	d659a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6cd2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6cd6:	4299      	cmp	r1, r3
   d6cd8:	da10      	bge.n	d6cfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6cda:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6cdc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6cde:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6ce2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6ce6:	4629      	mov	r1, r5
   d6ce8:	f105 0008 	add.w	r0, r5, #8
   d6cec:	f7ff ffa9 	bl	d6c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6cf0:	b98d      	cbnz	r5, d6d16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6cf2:	6863      	ldr	r3, [r4, #4]
   d6cf4:	3301      	adds	r3, #1
   d6cf6:	6063      	str	r3, [r4, #4]
    return true;
   d6cf8:	2601      	movs	r6, #1
   d6cfa:	e006      	b.n	d6d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6cfc:	3101      	adds	r1, #1
   d6cfe:	4620      	mov	r0, r4
   d6d00:	f7ff ffc9 	bl	d6c96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6d04:	4606      	mov	r6, r0
   d6d06:	2800      	cmp	r0, #0
   d6d08:	d1e7      	bne.n	d6cda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6d0a:	a801      	add	r0, sp, #4
   d6d0c:	f7ff fc67 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6d10:	4630      	mov	r0, r6
   d6d12:	b002      	add	sp, #8
   d6d14:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d6d16:	4669      	mov	r1, sp
   d6d18:	4628      	mov	r0, r5
   d6d1a:	f7ff fc3e 	bl	d659a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6d1e:	e7e8      	b.n	d6cf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d24:	4617      	mov	r7, r2
   d6d26:	b0a1      	sub	sp, #132	; 0x84
   d6d28:	4680      	mov	r8, r0
    WiringBleLock lk;
   d6d2a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6d2c:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6d2e:	f7ff f8d3 	bl	d5ed8 <_ZN8particle3ble13WiringBleLockC1Ev>
   d6d32:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d6d34:	7923      	ldrb	r3, [r4, #4]
   d6d36:	b953      	cbnz	r3, d6d4e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d6d38:	4639      	mov	r1, r7
   d6d3a:	4640      	mov	r0, r8
   d6d3c:	f7ff fc2d 	bl	d659a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d6d40:	a80a      	add	r0, sp, #40	; 0x28
   d6d42:	f7ff f8d1 	bl	d5ee8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6d46:	4640      	mov	r0, r8
   d6d48:	b021      	add	sp, #132	; 0x84
   d6d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d4e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d6d50:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d6d54:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d6d58:	9303      	str	r3, [sp, #12]
   d6d5a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d6d5e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d6d62:	9b03      	ldr	r3, [sp, #12]
   d6d64:	429d      	cmp	r5, r3
   d6d66:	d021      	beq.n	d6dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d6d68:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d6d6c:	4658      	mov	r0, fp
   d6d6e:	f109 0114 	add.w	r1, r9, #20
   d6d72:	f7ff f96a 	bl	d604a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d6d76:	b1b8      	cbz	r0, d6da8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d6d78:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6d7c:	4650      	mov	r0, sl
   d6d7e:	f7ff f964 	bl	d604a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d6d82:	b188      	cbz	r0, d6da8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d6d84:	6823      	ldr	r3, [r4, #0]
   d6d86:	f8d9 2000 	ldr.w	r2, [r9]
   d6d8a:	4053      	eors	r3, r2
   d6d8c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d6d90:	d10a      	bne.n	d6da8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6d92:	2220      	movs	r2, #32
   d6d94:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d6d98:	4a5e      	ldr	r2, [pc, #376]	; (d6f14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d6d9a:	9200      	str	r2, [sp, #0]
   d6d9c:	aa15      	add	r2, sp, #84	; 0x54
   d6d9e:	495e      	ldr	r1, [pc, #376]	; (d6f18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d6da0:	2032      	movs	r0, #50	; 0x32
   d6da2:	f7fe fe91 	bl	d5ac8 <log_message>
   d6da6:	e7c7      	b.n	d6d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d6da8:	3508      	adds	r5, #8
   d6daa:	e7da      	b.n	d6d62 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d6dac:	4650      	mov	r0, sl
   d6dae:	f7ff f917 	bl	d5fe0 <_ZNK8particle7BleUuid7isValidEv>
   d6db2:	b960      	cbnz	r0, d6dce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d6db4:	4959      	ldr	r1, [pc, #356]	; (d6f1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d6db6:	2201      	movs	r2, #1
   d6db8:	a815      	add	r0, sp, #84	; 0x54
   d6dba:	ad15      	add	r5, sp, #84	; 0x54
   d6dbc:	f7ff f8e7 	bl	d5f8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6dc2:	46d4      	mov	ip, sl
   d6dc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d6dc8:	682b      	ldr	r3, [r5, #0]
   d6dca:	f8cc 3000 	str.w	r3, [ip]
   d6dce:	6833      	ldr	r3, [r6, #0]
   d6dd0:	e9d3 5300 	ldrd	r5, r3, [r3]
   d6dd4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d6dd8:	455d      	cmp	r5, fp
   d6dda:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d6ddc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d6dde:	d06e      	beq.n	d6ebe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6de0:	f855 0b08 	ldr.w	r0, [r5], #8
   d6de4:	f7ff f931 	bl	d604a <_ZNK8particle7BleUuideqERKS0_>
   d6de8:	2800      	cmp	r0, #0
   d6dea:	d0f5      	beq.n	d6dd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d6dec:	f104 0a14 	add.w	sl, r4, #20
   d6df0:	4650      	mov	r0, sl
   d6df2:	f7ff f8f5 	bl	d5fe0 <_ZNK8particle7BleUuid7isValidEv>
   d6df6:	b988      	cbnz	r0, d6e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d6df8:	4b49      	ldr	r3, [pc, #292]	; (d6f20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6dfa:	4948      	ldr	r1, [pc, #288]	; (d6f1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d6dfc:	881a      	ldrh	r2, [r3, #0]
   d6dfe:	3201      	adds	r2, #1
   d6e00:	b292      	uxth	r2, r2
   d6e02:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6e04:	a815      	add	r0, sp, #84	; 0x54
   d6e06:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d6e08:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6e0a:	f7ff f8df 	bl	d5fcc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d6e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e10:	46d4      	mov	ip, sl
   d6e12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d6e16:	682b      	ldr	r3, [r5, #0]
   d6e18:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d6e1c:	2228      	movs	r2, #40	; 0x28
   d6e1e:	2100      	movs	r1, #0
   d6e20:	a816      	add	r0, sp, #88	; 0x58
   d6e22:	f001 f88b 	bl	d7f3c <memset>
    charInit.version = BLE_API_VERSION;
   d6e26:	4b3f      	ldr	r3, [pc, #252]	; (d6f24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d6e28:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d6e2a:	4651      	mov	r1, sl
   d6e2c:	a804      	add	r0, sp, #16
   d6e2e:	f7ff f8e9 	bl	d6004 <_ZN8particle7BleUuid7halUUIDEv>
   d6e32:	ab04      	add	r3, sp, #16
   d6e34:	aa18      	add	r2, sp, #96	; 0x60
   d6e36:	f10d 0c20 	add.w	ip, sp, #32
   d6e3a:	6818      	ldr	r0, [r3, #0]
   d6e3c:	6859      	ldr	r1, [r3, #4]
   d6e3e:	4615      	mov	r5, r2
   d6e40:	c503      	stmia	r5!, {r0, r1}
   d6e42:	3308      	adds	r3, #8
   d6e44:	4563      	cmp	r3, ip
   d6e46:	462a      	mov	r2, r5
   d6e48:	d1f7      	bne.n	d6e3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d6e4a:	6818      	ldr	r0, [r3, #0]
   d6e4c:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d6e4e:	7923      	ldrb	r3, [r4, #4]
   d6e50:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d6e54:	f8d9 3000 	ldr.w	r3, [r9]
   d6e58:	8a9b      	ldrh	r3, [r3, #20]
   d6e5a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d6e5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6e60:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d6e62:	4b31      	ldr	r3, [pc, #196]	; (d6f28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6e64:	2200      	movs	r2, #0
   d6e66:	1da1      	adds	r1, r4, #6
   d6e68:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d6e6a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6e6e:	f7fe fc43 	bl	d56f8 <hal_ble_gatt_server_add_characteristic>
   d6e72:	2800      	cmp	r0, #0
   d6e74:	f47f af60 	bne.w	d6d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d6e78:	2301      	movs	r3, #1
   d6e7a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d6e7c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d6e7e:	4639      	mov	r1, r7
        return characteristics_;
   d6e80:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d6e82:	a80d      	add	r0, sp, #52	; 0x34
   d6e84:	f7ff fb89 	bl	d659a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6e88:	4620      	mov	r0, r4
   d6e8a:	a90d      	add	r1, sp, #52	; 0x34
   d6e8c:	f7ff ff1b 	bl	d6cc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6e90:	4604      	mov	r4, r0
   d6e92:	a80e      	add	r0, sp, #56	; 0x38
   d6e94:	f7ff fba3 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e98:	2c00      	cmp	r4, #0
   d6e9a:	f47f af4d 	bne.w	d6d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d6e9e:	2320      	movs	r3, #32
   d6ea0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d6ea4:	4b21      	ldr	r3, [pc, #132]	; (d6f2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d6ea6:	9300      	str	r3, [sp, #0]
   d6ea8:	aa0d      	add	r2, sp, #52	; 0x34
   d6eaa:	4623      	mov	r3, r4
   d6eac:	e777      	b.n	d6d9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d6eae:	4639      	mov	r1, r7
   d6eb0:	4640      	mov	r0, r8
   d6eb2:	f7ff fb72 	bl	d659a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6eb6:	a80c      	add	r0, sp, #48	; 0x30
   d6eb8:	f7ff fb91 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ebc:	e740      	b.n	d6d40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d6ebe:	a80b      	add	r0, sp, #44	; 0x2c
   d6ec0:	f7ff fa1c 	bl	d62fc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d6ec4:	4651      	mov	r1, sl
   d6ec6:	a815      	add	r0, sp, #84	; 0x54
   d6ec8:	f7ff f89c 	bl	d6004 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6ece:	2300      	movs	r3, #0
   d6ed0:	3214      	adds	r2, #20
   d6ed2:	a915      	add	r1, sp, #84	; 0x54
   d6ed4:	2001      	movs	r0, #1
   d6ed6:	f7fe fbdd 	bl	d5694 <hal_ble_gatt_server_add_service>
   d6eda:	2800      	cmp	r0, #0
   d6edc:	d1e7      	bne.n	d6eae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d6ede:	6835      	ldr	r5, [r6, #0]
   d6ee0:	a90b      	add	r1, sp, #44	; 0x2c
   d6ee2:	a80d      	add	r0, sp, #52	; 0x34
   d6ee4:	f7ff fb67 	bl	d65b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d6ee8:	4628      	mov	r0, r5
   d6eea:	a90d      	add	r1, sp, #52	; 0x34
   d6eec:	f7ff fe7c 	bl	d6be8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6ef0:	4605      	mov	r5, r0
   d6ef2:	a80e      	add	r0, sp, #56	; 0x38
   d6ef4:	f7ff fb73 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ef8:	2d00      	cmp	r5, #0
   d6efa:	d0d8      	beq.n	d6eae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d6efc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d6efe:	6853      	ldr	r3, [r2, #4]
   d6f00:	6812      	ldr	r2, [r2, #0]
   d6f02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6f06:	3b01      	subs	r3, #1
   d6f08:	a80c      	add	r0, sp, #48	; 0x30
   d6f0a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d6f0e:	f7ff fb66 	bl	d65de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f12:	e76b      	b.n	d6dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d6f14:	000d8c7d 	.word	0x000d8c7d
   d6f18:	000d8bdc 	.word	0x000d8bdc
   d6f1c:	000d8d3c 	.word	0x000d8d3c
   d6f20:	2003e648 	.word	0x2003e648
   d6f24:	002c0001 	.word	0x002c0001
   d6f28:	000d648d 	.word	0x000d648d
   d6f2c:	000d8ca8 	.word	0x000d8ca8

000d6f30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6f30:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6f32:	4c06      	ldr	r4, [pc, #24]	; (d6f4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6f34:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6f36:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6f38:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6f3a:	f7fe fc15 	bl	d5768 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6f3e:	4620      	mov	r0, r4
   d6f40:	4a03      	ldr	r2, [pc, #12]	; (d6f50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6f42:	4904      	ldr	r1, [pc, #16]	; (d6f54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6f48:	f000 be96 	b.w	d7c78 <__aeabi_atexit>
   d6f4c:	2003e64c 	.word	0x2003e64c
   d6f50:	2003e56c 	.word	0x2003e56c
   d6f54:	000d5d27 	.word	0x000d5d27

000d6f58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f58:	2200      	movs	r2, #0
   d6f5a:	6840      	ldr	r0, [r0, #4]
   d6f5c:	4611      	mov	r1, r2
   d6f5e:	f7fe be27 	b.w	d5bb0 <network_listening>

000d6f62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6f62:	2200      	movs	r2, #0
   d6f64:	6840      	ldr	r0, [r0, #4]
   d6f66:	4611      	mov	r1, r2
   d6f68:	f7fe be32 	b.w	d5bd0 <network_get_listen_timeout>

000d6f6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6f6c:	6840      	ldr	r0, [r0, #4]
   d6f6e:	2200      	movs	r2, #0
   d6f70:	f7fe be26 	b.w	d5bc0 <network_set_listen_timeout>

000d6f74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f74:	6840      	ldr	r0, [r0, #4]
   d6f76:	2200      	movs	r2, #0
   d6f78:	f081 0101 	eor.w	r1, r1, #1
   d6f7c:	f7fe be10 	b.w	d5ba0 <network_listen>

000d6f80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6f80:	2300      	movs	r3, #0
   d6f82:	6840      	ldr	r0, [r0, #4]
   d6f84:	461a      	mov	r2, r3
   d6f86:	4619      	mov	r1, r3
   d6f88:	f7fe be02 	b.w	d5b90 <network_off>

000d6f8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6f8c:	2300      	movs	r3, #0
   d6f8e:	6840      	ldr	r0, [r0, #4]
   d6f90:	461a      	mov	r2, r3
   d6f92:	4619      	mov	r1, r3
   d6f94:	f7fe bdf4 	b.w	d5b80 <network_on>

000d6f98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f98:	2200      	movs	r2, #0
   d6f9a:	6840      	ldr	r0, [r0, #4]
   d6f9c:	4611      	mov	r1, r2
   d6f9e:	f7fe bde7 	b.w	d5b70 <network_ready>

000d6fa2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6fa2:	2200      	movs	r2, #0
   d6fa4:	6840      	ldr	r0, [r0, #4]
   d6fa6:	4611      	mov	r1, r2
   d6fa8:	f7fe bdd2 	b.w	d5b50 <network_connecting>

000d6fac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6fac:	6840      	ldr	r0, [r0, #4]
   d6fae:	2200      	movs	r2, #0
   d6fb0:	2102      	movs	r1, #2
   d6fb2:	f7fe bdd5 	b.w	d5b60 <network_disconnect>

000d6fb6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6fb6:	2300      	movs	r3, #0
   d6fb8:	6840      	ldr	r0, [r0, #4]
   d6fba:	461a      	mov	r2, r3
   d6fbc:	f7fe bdc0 	b.w	d5b40 <network_connect>

000d6fc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6fc0:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6fc2:	2203      	movs	r2, #3
   d6fc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6fc6:	4a02      	ldr	r2, [pc, #8]	; (d6fd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6fc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6fca:	4770      	bx	lr
   d6fcc:	2003e654 	.word	0x2003e654
   d6fd0:	000d8d64 	.word	0x000d8d64

000d6fd4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6fd4:	4770      	bx	lr

000d6fd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fd8:	4606      	mov	r6, r0
   d6fda:	4615      	mov	r5, r2
   d6fdc:	460c      	mov	r4, r1
   d6fde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6fe0:	42bc      	cmp	r4, r7
   d6fe2:	d006      	beq.n	d6ff2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6fe4:	6833      	ldr	r3, [r6, #0]
   d6fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6fea:	689b      	ldr	r3, [r3, #8]
   d6fec:	4630      	mov	r0, r6
   d6fee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6ff0:	e7f6      	b.n	d6fe0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6ff2:	4628      	mov	r0, r5
   d6ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ff6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6ff6:	7c00      	ldrb	r0, [r0, #16]
   d6ff8:	2200      	movs	r2, #0
   d6ffa:	f7fe bc2d 	b.w	d5858 <hal_i2c_write>

000d6ffe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6ffe:	7c00      	ldrb	r0, [r0, #16]
   d7000:	2100      	movs	r1, #0
   d7002:	f7fe bc31 	b.w	d5868 <hal_i2c_available>

000d7006 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7006:	7c00      	ldrb	r0, [r0, #16]
   d7008:	2100      	movs	r1, #0
   d700a:	f7fe bc35 	b.w	d5878 <hal_i2c_read>

000d700e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d700e:	7c00      	ldrb	r0, [r0, #16]
   d7010:	2100      	movs	r1, #0
   d7012:	f7fe bc39 	b.w	d5888 <hal_i2c_peek>

000d7016 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7016:	7c00      	ldrb	r0, [r0, #16]
   d7018:	2100      	movs	r1, #0
   d701a:	f7fe bc3d 	b.w	d5898 <hal_i2c_flush>

000d701e <_ZN7TwoWireD0Ev>:
   d701e:	b510      	push	{r4, lr}
   d7020:	2114      	movs	r1, #20
   d7022:	4604      	mov	r4, r0
   d7024:	f000 fe2d 	bl	d7c82 <_ZdlPvj>
   d7028:	4620      	mov	r0, r4
   d702a:	bd10      	pop	{r4, pc}

000d702c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d702c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d702e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7032:	4604      	mov	r4, r0
   d7034:	4608      	mov	r0, r1
   d7036:	2100      	movs	r1, #0
   d7038:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d703c:	4b03      	ldr	r3, [pc, #12]	; (d704c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d703e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7040:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7042:	4611      	mov	r1, r2
   d7044:	f7fe fc38 	bl	d58b8 <hal_i2c_init>
}
   d7048:	4620      	mov	r0, r4
   d704a:	bd10      	pop	{r4, pc}
   d704c:	000d8da0 	.word	0x000d8da0

000d7050 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d7050:	7c00      	ldrb	r0, [r0, #16]
   d7052:	2200      	movs	r2, #0
   d7054:	f7fe bbe0 	b.w	d5818 <hal_i2c_set_speed>

000d7058 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7058:	2300      	movs	r3, #0
   d705a:	7c00      	ldrb	r0, [r0, #16]
   d705c:	461a      	mov	r2, r3
   d705e:	4619      	mov	r1, r3
   d7060:	f7fe bbe2 	b.w	d5828 <hal_i2c_begin>

000d7064 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7064:	7c00      	ldrb	r0, [r0, #16]
   d7066:	2200      	movs	r2, #0
   d7068:	f7fe bbe6 	b.w	d5838 <hal_i2c_begin_transmission>

000d706c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d706c:	b2c9      	uxtb	r1, r1
   d706e:	f7ff bff9 	b.w	d7064 <_ZN7TwoWire17beginTransmissionEh>

000d7072 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7072:	7c00      	ldrb	r0, [r0, #16]
   d7074:	2200      	movs	r2, #0
   d7076:	f7fe bbe7 	b.w	d5848 <hal_i2c_end_transmission>

000d707a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d707a:	2101      	movs	r1, #1
   d707c:	f7ff bff9 	b.w	d7072 <_ZN7TwoWire15endTransmissionEh>

000d7080 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7080:	4770      	bx	lr

000d7082 <_ZN9IPAddressD0Ev>:
   d7082:	b510      	push	{r4, lr}
   d7084:	2118      	movs	r1, #24
   d7086:	4604      	mov	r4, r0
   d7088:	f000 fdfb 	bl	d7c82 <_ZdlPvj>
   d708c:	4620      	mov	r0, r4
   d708e:	bd10      	pop	{r4, pc}

000d7090 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7090:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7092:	7d03      	ldrb	r3, [r0, #20]
   d7094:	2b06      	cmp	r3, #6
{
   d7096:	b08d      	sub	sp, #52	; 0x34
   d7098:	460e      	mov	r6, r1
   d709a:	f100 0704 	add.w	r7, r0, #4
   d709e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d70a2:	d012      	beq.n	d70ca <_ZNK9IPAddress7printToER5Print+0x3a>
   d70a4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d70a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d70ac:	220a      	movs	r2, #10
   d70ae:	4630      	mov	r0, r6
   d70b0:	f000 f95f 	bl	d7372 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d70b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d70b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d70b8:	d019      	beq.n	d70ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d70ba:	2c00      	cmp	r4, #0
   d70bc:	d0f4      	beq.n	d70a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d70be:	212e      	movs	r1, #46	; 0x2e
   d70c0:	4630      	mov	r0, r6
   d70c2:	f000 f93d 	bl	d7340 <_ZN5Print5printEc>
   d70c6:	4404      	add	r4, r0
   d70c8:	e7ee      	b.n	d70a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70ca:	232f      	movs	r3, #47	; 0x2f
   d70cc:	466a      	mov	r2, sp
   d70ce:	4639      	mov	r1, r7
   d70d0:	200a      	movs	r0, #10
		buf[0] = 0;
   d70d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70d6:	f7fe fbf7 	bl	d58c8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d70da:	4668      	mov	r0, sp
   d70dc:	f000 ff64 	bl	d7fa8 <strlen>
   d70e0:	6833      	ldr	r3, [r6, #0]
   d70e2:	4602      	mov	r2, r0
   d70e4:	68db      	ldr	r3, [r3, #12]
   d70e6:	4669      	mov	r1, sp
   d70e8:	4630      	mov	r0, r6
   d70ea:	4798      	blx	r3
   d70ec:	4604      	mov	r4, r0
    }
    return n;
}
   d70ee:	4620      	mov	r0, r4
   d70f0:	b00d      	add	sp, #52	; 0x34
   d70f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d70f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d70f4:	b510      	push	{r4, lr}
   d70f6:	4b05      	ldr	r3, [pc, #20]	; (d710c <_ZN9IPAddressC1Ev+0x18>)
   d70f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d70fa:	2211      	movs	r2, #17
   d70fc:	f840 3b04 	str.w	r3, [r0], #4
   d7100:	2100      	movs	r1, #0
   d7102:	f000 ff1b 	bl	d7f3c <memset>
}
   d7106:	4620      	mov	r0, r4
   d7108:	bd10      	pop	{r4, pc}
   d710a:	bf00      	nop
   d710c:	000d8dc8 	.word	0x000d8dc8

000d7110 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7110:	4603      	mov	r3, r0
   d7112:	4a07      	ldr	r2, [pc, #28]	; (d7130 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7114:	b510      	push	{r4, lr}
   d7116:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d711a:	f101 0210 	add.w	r2, r1, #16
   d711e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7122:	f843 4b04 	str.w	r4, [r3], #4
   d7126:	4291      	cmp	r1, r2
   d7128:	d1f9      	bne.n	d711e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d712a:	780a      	ldrb	r2, [r1, #0]
   d712c:	701a      	strb	r2, [r3, #0]
}
   d712e:	bd10      	pop	{r4, pc}
   d7130:	000d8dc8 	.word	0x000d8dc8

000d7134 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7134:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7136:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d713a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d713e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7142:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7146:	2304      	movs	r3, #4
   d7148:	6041      	str	r1, [r0, #4]
   d714a:	7503      	strb	r3, [r0, #20]
}
   d714c:	bd10      	pop	{r4, pc}
	...

000d7150 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7150:	b513      	push	{r0, r1, r4, lr}
   d7152:	4b05      	ldr	r3, [pc, #20]	; (d7168 <_ZN9IPAddressC1EPKh+0x18>)
   d7154:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7156:	78cb      	ldrb	r3, [r1, #3]
   d7158:	9300      	str	r3, [sp, #0]
   d715a:	788b      	ldrb	r3, [r1, #2]
   d715c:	784a      	ldrb	r2, [r1, #1]
   d715e:	7809      	ldrb	r1, [r1, #0]
   d7160:	f7ff ffe8 	bl	d7134 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7164:	b002      	add	sp, #8
   d7166:	bd10      	pop	{r4, pc}
   d7168:	000d8dc8 	.word	0x000d8dc8

000d716c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d716c:	4b01      	ldr	r3, [pc, #4]	; (d7174 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d716e:	4a02      	ldr	r2, [pc, #8]	; (d7178 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7170:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7172:	4770      	bx	lr
   d7174:	2003e65c 	.word	0x2003e65c
   d7178:	000d8dd4 	.word	0x000d8dd4

000d717c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d717c:	2300      	movs	r3, #0
   d717e:	6840      	ldr	r0, [r0, #4]
   d7180:	461a      	mov	r2, r3
   d7182:	f7fe bcdd 	b.w	d5b40 <network_connect>

000d7186 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7186:	6840      	ldr	r0, [r0, #4]
   d7188:	2200      	movs	r2, #0
   d718a:	2102      	movs	r1, #2
   d718c:	f7fe bce8 	b.w	d5b60 <network_disconnect>

000d7190 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7190:	2200      	movs	r2, #0
   d7192:	6840      	ldr	r0, [r0, #4]
   d7194:	4611      	mov	r1, r2
   d7196:	f7fe bcdb 	b.w	d5b50 <network_connecting>

000d719a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d719a:	2200      	movs	r2, #0
   d719c:	6840      	ldr	r0, [r0, #4]
   d719e:	4611      	mov	r1, r2
   d71a0:	f7fe bce6 	b.w	d5b70 <network_ready>

000d71a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d71a4:	2300      	movs	r3, #0
   d71a6:	6840      	ldr	r0, [r0, #4]
   d71a8:	461a      	mov	r2, r3
   d71aa:	4619      	mov	r1, r3
   d71ac:	f7fe bce8 	b.w	d5b80 <network_on>

000d71b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d71b0:	2300      	movs	r3, #0
   d71b2:	6840      	ldr	r0, [r0, #4]
   d71b4:	461a      	mov	r2, r3
   d71b6:	4619      	mov	r1, r3
   d71b8:	f7fe bcea 	b.w	d5b90 <network_off>

000d71bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d71bc:	6840      	ldr	r0, [r0, #4]
   d71be:	2100      	movs	r1, #0
   d71c0:	f7fe bd0e 	b.w	d5be0 <network_is_on>

000d71c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d71c4:	6840      	ldr	r0, [r0, #4]
   d71c6:	2100      	movs	r1, #0
   d71c8:	f7fe bd12 	b.w	d5bf0 <network_is_off>

000d71cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d71cc:	6840      	ldr	r0, [r0, #4]
   d71ce:	2200      	movs	r2, #0
   d71d0:	f081 0101 	eor.w	r1, r1, #1
   d71d4:	f7fe bce4 	b.w	d5ba0 <network_listen>

000d71d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d71d8:	6840      	ldr	r0, [r0, #4]
   d71da:	2200      	movs	r2, #0
   d71dc:	f7fe bcf0 	b.w	d5bc0 <network_set_listen_timeout>

000d71e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d71e0:	2200      	movs	r2, #0
   d71e2:	6840      	ldr	r0, [r0, #4]
   d71e4:	4611      	mov	r1, r2
   d71e6:	f7fe bcf3 	b.w	d5bd0 <network_get_listen_timeout>

000d71ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d71ea:	2200      	movs	r2, #0
   d71ec:	6840      	ldr	r0, [r0, #4]
   d71ee:	4611      	mov	r1, r2
   d71f0:	f7fe bcde 	b.w	d5bb0 <network_listening>

000d71f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d71f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d71f8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d71fa:	b095      	sub	sp, #84	; 0x54
   d71fc:	4616      	mov	r6, r2
   d71fe:	460d      	mov	r5, r1
   d7200:	4607      	mov	r7, r0
    IPAddress addr;
   d7202:	f7ff ff77 	bl	d70f4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7206:	4621      	mov	r1, r4
   d7208:	2218      	movs	r2, #24
   d720a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d720c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d720e:	f000 fe95 	bl	d7f3c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7212:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7214:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7218:	4621      	mov	r1, r4
   d721a:	466b      	mov	r3, sp
   d721c:	aa0c      	add	r2, sp, #48	; 0x30
   d721e:	4630      	mov	r0, r6
   d7220:	f7fe fb62 	bl	d58e8 <netdb_getaddrinfo>
    if (!r) {
   d7224:	4604      	mov	r4, r0
   d7226:	2800      	cmp	r0, #0
   d7228:	d14c      	bne.n	d72c4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d722a:	4602      	mov	r2, r0
   d722c:	2101      	movs	r1, #1
   d722e:	6868      	ldr	r0, [r5, #4]
   d7230:	f7fe fc9e 	bl	d5b70 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7234:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7236:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7238:	4622      	mov	r2, r4
   d723a:	6868      	ldr	r0, [r5, #4]
   d723c:	f7fe fc98 	bl	d5b70 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7240:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7242:	4681      	mov	r9, r0
        bool ok = false;
   d7244:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7246:	2e00      	cmp	r6, #0
   d7248:	d03c      	beq.n	d72c4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d724a:	2900      	cmp	r1, #0
   d724c:	d13a      	bne.n	d72c4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d724e:	6873      	ldr	r3, [r6, #4]
   d7250:	2b02      	cmp	r3, #2
   d7252:	d003      	beq.n	d725c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7254:	2b0a      	cmp	r3, #10
   d7256:	d011      	beq.n	d727c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7258:	69f6      	ldr	r6, [r6, #28]
   d725a:	e7f4      	b.n	d7246 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d725c:	f1b8 0f00 	cmp.w	r8, #0
   d7260:	d00a      	beq.n	d7278 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7262:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7264:	a806      	add	r0, sp, #24
   d7266:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7268:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d726a:	f7ff ff71 	bl	d7150 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d726e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7270:	1d3c      	adds	r4, r7, #4
   d7272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7274:	682b      	ldr	r3, [r5, #0]
   d7276:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7278:	4641      	mov	r1, r8
   d727a:	e7ed      	b.n	d7258 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d727c:	f1b9 0f00 	cmp.w	r9, #0
   d7280:	d101      	bne.n	d7286 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7282:	4649      	mov	r1, r9
   d7284:	e7e8      	b.n	d7258 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7286:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7288:	2210      	movs	r2, #16
   d728a:	a801      	add	r0, sp, #4
   d728c:	f000 fe56 	bl	d7f3c <memset>
                    a.v = 6;
   d7290:	2306      	movs	r3, #6
   d7292:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7296:	ad01      	add	r5, sp, #4
   d7298:	f104 0308 	add.w	r3, r4, #8
   d729c:	3418      	adds	r4, #24
   d729e:	6818      	ldr	r0, [r3, #0]
   d72a0:	6859      	ldr	r1, [r3, #4]
   d72a2:	462a      	mov	r2, r5
   d72a4:	c203      	stmia	r2!, {r0, r1}
   d72a6:	3308      	adds	r3, #8
   d72a8:	42a3      	cmp	r3, r4
   d72aa:	4615      	mov	r5, r2
   d72ac:	d1f7      	bne.n	d729e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d72ae:	a901      	add	r1, sp, #4
   d72b0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d72b2:	ad07      	add	r5, sp, #28
   d72b4:	f7ff ff2c 	bl	d7110 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d72b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d72ba:	1d3c      	adds	r4, r7, #4
   d72bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d72be:	682b      	ldr	r3, [r5, #0]
   d72c0:	7023      	strb	r3, [r4, #0]
   d72c2:	e7de      	b.n	d7282 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d72c4:	9800      	ldr	r0, [sp, #0]
   d72c6:	f7fe fb07 	bl	d58d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d72ca:	4638      	mov	r0, r7
   d72cc:	b015      	add	sp, #84	; 0x54
   d72ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d72d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d72d4:	4b02      	ldr	r3, [pc, #8]	; (d72e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d72d6:	4a03      	ldr	r2, [pc, #12]	; (d72e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d72d8:	601a      	str	r2, [r3, #0]
   d72da:	2200      	movs	r2, #0
   d72dc:	605a      	str	r2, [r3, #4]

} // spark
   d72de:	4770      	bx	lr
   d72e0:	2003e660 	.word	0x2003e660
   d72e4:	000d8de0 	.word	0x000d8de0

000d72e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d72e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72ea:	4606      	mov	r6, r0
   d72ec:	460d      	mov	r5, r1
  size_t n = 0;
   d72ee:	188f      	adds	r7, r1, r2
   d72f0:	2400      	movs	r4, #0
  while (size--) {
   d72f2:	42bd      	cmp	r5, r7
   d72f4:	d00c      	beq.n	d7310 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d72f6:	6833      	ldr	r3, [r6, #0]
   d72f8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d72fc:	689b      	ldr	r3, [r3, #8]
   d72fe:	4630      	mov	r0, r6
   d7300:	4798      	blx	r3
     if (chunk>=0)
   d7302:	1e03      	subs	r3, r0, #0
   d7304:	db01      	blt.n	d730a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7306:	441c      	add	r4, r3
  while (size--) {
   d7308:	e7f3      	b.n	d72f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d730a:	2c00      	cmp	r4, #0
   d730c:	bf08      	it	eq
   d730e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7310:	4620      	mov	r0, r4
   d7312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7314 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7314:	b513      	push	{r0, r1, r4, lr}
   d7316:	4604      	mov	r4, r0
    }
   d7318:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d731a:	b159      	cbz	r1, d7334 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d731c:	9101      	str	r1, [sp, #4]
   d731e:	f000 fe43 	bl	d7fa8 <strlen>
   d7322:	6823      	ldr	r3, [r4, #0]
   d7324:	9901      	ldr	r1, [sp, #4]
   d7326:	68db      	ldr	r3, [r3, #12]
   d7328:	4602      	mov	r2, r0
   d732a:	4620      	mov	r0, r4
    }
   d732c:	b002      	add	sp, #8
   d732e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7332:	4718      	bx	r3
    }
   d7334:	b002      	add	sp, #8
   d7336:	bd10      	pop	{r4, pc}

000d7338 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7338:	b508      	push	{r3, lr}
  return write(str);
   d733a:	f7ff ffeb 	bl	d7314 <_ZN5Print5writeEPKc>
}
   d733e:	bd08      	pop	{r3, pc}

000d7340 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7340:	6803      	ldr	r3, [r0, #0]
   d7342:	689b      	ldr	r3, [r3, #8]
   d7344:	4718      	bx	r3

000d7346 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7346:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7348:	210d      	movs	r1, #13
{
   d734a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d734c:	f7ff fff8 	bl	d7340 <_ZN5Print5printEc>
  n += print('\n');
   d7350:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7352:	4604      	mov	r4, r0
  n += print('\n');
   d7354:	4628      	mov	r0, r5
   d7356:	f7ff fff3 	bl	d7340 <_ZN5Print5printEc>
  return n;
}
   d735a:	4420      	add	r0, r4
   d735c:	bd38      	pop	{r3, r4, r5, pc}

000d735e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d735e:	b538      	push	{r3, r4, r5, lr}
   d7360:	4605      	mov	r5, r0
  return write(str);
   d7362:	f7ff ffd7 	bl	d7314 <_ZN5Print5writeEPKc>
   d7366:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7368:	4628      	mov	r0, r5
   d736a:	f7ff ffec 	bl	d7346 <_ZN5Print7printlnEv>
  return n;
}
   d736e:	4420      	add	r0, r4
   d7370:	bd38      	pop	{r3, r4, r5, pc}

000d7372 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7372:	b530      	push	{r4, r5, lr}
   d7374:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7376:	2300      	movs	r3, #0
   d7378:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d737c:	2a01      	cmp	r2, #1
   d737e:	bf98      	it	ls
   d7380:	220a      	movls	r2, #10
   d7382:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7384:	460d      	mov	r5, r1
   d7386:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d738a:	fb01 5312 	mls	r3, r1, r2, r5
   d738e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7392:	2b09      	cmp	r3, #9
   d7394:	bf94      	ite	ls
   d7396:	3330      	addls	r3, #48	; 0x30
   d7398:	3337      	addhi	r3, #55	; 0x37
   d739a:	b2db      	uxtb	r3, r3
  } while(n);
   d739c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d739e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d73a2:	d9ef      	bls.n	d7384 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d73a4:	4621      	mov	r1, r4
   d73a6:	f7ff ffb5 	bl	d7314 <_ZN5Print5writeEPKc>
}
   d73aa:	b00b      	add	sp, #44	; 0x2c
   d73ac:	bd30      	pop	{r4, r5, pc}

000d73ae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d73ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73b2:	b086      	sub	sp, #24
   d73b4:	af00      	add	r7, sp, #0
   d73b6:	4605      	mov	r5, r0
   d73b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d73ba:	1d38      	adds	r0, r7, #4
   d73bc:	2114      	movs	r1, #20
{
   d73be:	4614      	mov	r4, r2
    va_copy(args2, args);
   d73c0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d73c2:	f7fe fc35 	bl	d5c30 <vsnprintf>

    if (n<bufsize)
   d73c6:	2813      	cmp	r0, #19
   d73c8:	d80e      	bhi.n	d73e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d73ca:	1d39      	adds	r1, r7, #4
   d73cc:	4628      	mov	r0, r5
   d73ce:	f7ff ffa1 	bl	d7314 <_ZN5Print5writeEPKc>
   d73d2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d73d4:	b11e      	cbz	r6, d73de <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d73d6:	4628      	mov	r0, r5
   d73d8:	f7ff ffb5 	bl	d7346 <_ZN5Print7printlnEv>
   d73dc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d73de:	4620      	mov	r0, r4
   d73e0:	3718      	adds	r7, #24
   d73e2:	46bd      	mov	sp, r7
   d73e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d73e8:	f100 0308 	add.w	r3, r0, #8
   d73ec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d73f0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d73f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d73f6:	4622      	mov	r2, r4
   d73f8:	1c41      	adds	r1, r0, #1
   d73fa:	683b      	ldr	r3, [r7, #0]
   d73fc:	4668      	mov	r0, sp
   d73fe:	f7fe fc17 	bl	d5c30 <vsnprintf>
  return write(str);
   d7402:	4669      	mov	r1, sp
   d7404:	4628      	mov	r0, r5
   d7406:	f7ff ff85 	bl	d7314 <_ZN5Print5writeEPKc>
   d740a:	4604      	mov	r4, r0
   d740c:	46c5      	mov	sp, r8
   d740e:	e7e1      	b.n	d73d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7410 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7410:	b510      	push	{r4, lr}
   d7412:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d7414:	f7fe fd37 	bl	d5e86 <_ZNSt14_Function_baseD1Ev>
   d7418:	4620      	mov	r0, r4
   d741a:	bd10      	pop	{r4, pc}

000d741c <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d741c:	b510      	push	{r4, lr}
   d741e:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d7420:	f7fe fb3a 	bl	d5a98 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d7424:	4284      	cmp	r4, r0
   d7426:	d008      	beq.n	d743a <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7428:	b11c      	cbz	r4, d7432 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d742a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d742e:	f7fe bb1b 	b.w	d5a68 <LED_Signaling_Start>
}
   d7432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d7436:	f7fe bb1f 	b.w	d5a78 <LED_Signaling_Stop>
}
   d743a:	bd10      	pop	{r4, pc}

000d743c <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d743c:	b570      	push	{r4, r5, r6, lr}
   d743e:	4605      	mov	r5, r0
   d7440:	460e      	mov	r6, r1
   d7442:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d7444:	f7fe fb28 	bl	d5a98 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d7448:	b150      	cbz	r0, d7460 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d744a:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d744e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d7452:	f7fe fb01 	bl	d5a58 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   d7456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   d745a:	20e7      	movs	r0, #231	; 0xe7
   d745c:	f7fe bb24 	b.w	d5aa8 <LED_On>
}
   d7460:	bd70      	pop	{r4, r5, r6, pc}

000d7462 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d7462:	b510      	push	{r4, lr}
   d7464:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d7466:	f7fe fb0f 	bl	d5a88 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d746a:	f7fe fb15 	bl	d5a98 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d746e:	b128      	cbz	r0, d747c <_ZN8RGBClass10brightnessEhb+0x1a>
   d7470:	b124      	cbz	r4, d747c <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   d7472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   d7476:	20e7      	movs	r0, #231	; 0xe7
   d7478:	f7fe bb16 	b.w	d5aa8 <LED_On>
}
   d747c:	bd10      	pop	{r4, pc}
	...

000d7480 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7480:	4803      	ldr	r0, [pc, #12]	; (d7490 <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
   d7482:	4a04      	ldr	r2, [pc, #16]	; (d7494 <_GLOBAL__sub_I_RGB+0x14>)
   d7484:	4904      	ldr	r1, [pc, #16]	; (d7498 <_GLOBAL__sub_I_RGB+0x18>)
   d7486:	2300      	movs	r3, #0
   d7488:	6083      	str	r3, [r0, #8]
   d748a:	f000 bbf5 	b.w	d7c78 <__aeabi_atexit>
   d748e:	bf00      	nop
   d7490:	2003e668 	.word	0x2003e668
   d7494:	2003e56c 	.word	0x2003e56c
   d7498:	000d7411 	.word	0x000d7411

000d749c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d749c:	2100      	movs	r1, #0
   d749e:	f7fe ba5b 	b.w	d5958 <hal_spi_acquire>

000d74a2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d74a2:	2100      	movs	r1, #0
   d74a4:	f7fe ba60 	b.w	d5968 <hal_spi_release>

000d74a8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d74a8:	b510      	push	{r4, lr}
   d74aa:	4604      	mov	r4, r0
   d74ac:	4608      	mov	r0, r1
{
    _spi = spi;
   d74ae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d74b0:	f7fe fa32 	bl	d5918 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d74b4:	2300      	movs	r3, #0
   d74b6:	6063      	str	r3, [r4, #4]
}
   d74b8:	4620      	mov	r0, r4
   d74ba:	bd10      	pop	{r4, pc}

000d74bc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d74bc:	b510      	push	{r4, lr}
   d74be:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d74c0:	7800      	ldrb	r0, [r0, #0]
   d74c2:	f7ff ffeb 	bl	d749c <_ZN8SPIClass4lockEv.isra.0>
   d74c6:	b948      	cbnz	r0, d74dc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d74c8:	7820      	ldrb	r0, [r4, #0]
   d74ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d74ce:	f7fe fa13 	bl	d58f8 <hal_spi_begin>
        unlock();
   d74d2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d74d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d74d8:	f7ff bfe3 	b.w	d74a2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d74dc:	bd10      	pop	{r4, pc}

000d74de <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d74de:	7800      	ldrb	r0, [r0, #0]
   d74e0:	f7ff bfdf 	b.w	d74a2 <_ZN8SPIClass6unlockEv.isra.0>

000d74e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d74e4:	0840      	lsrs	r0, r0, #1
{
   d74e6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d74e8:	6018      	str	r0, [r3, #0]
   d74ea:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d74ec:	6818      	ldr	r0, [r3, #0]
   d74ee:	4288      	cmp	r0, r1
   d74f0:	b2e5      	uxtb	r5, r4
   d74f2:	d906      	bls.n	d7502 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d74f4:	3401      	adds	r4, #1
   d74f6:	2c08      	cmp	r4, #8
   d74f8:	d002      	beq.n	d7500 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d74fa:	0840      	lsrs	r0, r0, #1
   d74fc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d74fe:	e7f5      	b.n	d74ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7500:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d7502:	4b02      	ldr	r3, [pc, #8]	; (d750c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7504:	5d5b      	ldrb	r3, [r3, r5]
   d7506:	7013      	strb	r3, [r2, #0]
}
   d7508:	bd30      	pop	{r4, r5, pc}
   d750a:	bf00      	nop
   d750c:	000d8e14 	.word	0x000d8e14

000d7510 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d7510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7514:	4606      	mov	r6, r0
   d7516:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d7518:	7800      	ldrb	r0, [r0, #0]
{
   d751a:	460c      	mov	r4, r1
    CHECK(lock());
   d751c:	f7ff ffbe 	bl	d749c <_ZN8SPIClass4lockEv.isra.0>
   d7520:	2800      	cmp	r0, #0
   d7522:	db1b      	blt.n	d755c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d7524:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7526:	2214      	movs	r2, #20
   d7528:	2100      	movs	r1, #0
   d752a:	a809      	add	r0, sp, #36	; 0x24
   d752c:	f000 fd06 	bl	d7f3c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7530:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7532:	2200      	movs	r2, #0
   d7534:	a909      	add	r1, sp, #36	; 0x24
   d7536:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d7538:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d753c:	f7fe f9fc 	bl	d5938 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7540:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d7544:	b113      	cbz	r3, d754c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d7546:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d754a:	b155      	cbz	r5, d7562 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d754c:	2700      	movs	r7, #0
   d754e:	46b9      	mov	r9, r7
   d7550:	46b8      	mov	r8, r7
   d7552:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d7554:	7923      	ldrb	r3, [r4, #4]
   d7556:	b15d      	cbz	r5, d7570 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d7558:	b1c3      	cbz	r3, d758c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d755a:	2000      	movs	r0, #0
}
   d755c:	b00f      	add	sp, #60	; 0x3c
   d755e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d7562:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7566:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d756a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d756e:	e7f1      	b.n	d7554 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7570:	2b00      	cmp	r3, #0
   d7572:	d135      	bne.n	d75e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d7574:	68a3      	ldr	r3, [r4, #8]
   d7576:	4543      	cmp	r3, r8
   d7578:	d108      	bne.n	d758c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d757a:	f88d 9020 	strb.w	r9, [sp, #32]
   d757e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7582:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7586:	89a3      	ldrh	r3, [r4, #12]
   d7588:	429a      	cmp	r2, r3
   d758a:	d0e6      	beq.n	d755a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d758c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d758e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7590:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7594:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7596:	ab04      	add	r3, sp, #16
   d7598:	f10d 020f 	add.w	r2, sp, #15
   d759c:	f7ff ffa2 	bl	d74e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d75a0:	7921      	ldrb	r1, [r4, #4]
   d75a2:	b985      	cbnz	r5, d75c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d75a4:	b989      	cbnz	r1, d75ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d75a6:	68a3      	ldr	r3, [r4, #8]
   d75a8:	4543      	cmp	r3, r8
   d75aa:	d30e      	bcc.n	d75ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d75ac:	f88d 9020 	strb.w	r9, [sp, #32]
   d75b0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d75b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d75b8:	89a3      	ldrh	r3, [r4, #12]
   d75ba:	429a      	cmp	r2, r3
   d75bc:	d105      	bne.n	d75ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d75be:	9b04      	ldr	r3, [sp, #16]
   d75c0:	4543      	cmp	r3, r8
   d75c2:	d102      	bne.n	d75ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d75c4:	e7c9      	b.n	d755a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d75c6:	2900      	cmp	r1, #0
   d75c8:	d1f9      	bne.n	d75be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d75ca:	2300      	movs	r3, #0
   d75cc:	9301      	str	r3, [sp, #4]
   d75ce:	7b63      	ldrb	r3, [r4, #13]
   d75d0:	9300      	str	r3, [sp, #0]
   d75d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d75d6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d75d8:	7830      	ldrb	r0, [r6, #0]
   d75da:	f7fe f9b5 	bl	d5948 <hal_spi_set_settings>
   d75de:	e7bc      	b.n	d755a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d75e0:	e9cd 5500 	strd	r5, r5, [sp]
   d75e4:	462b      	mov	r3, r5
   d75e6:	462a      	mov	r2, r5
   d75e8:	2101      	movs	r1, #1
   d75ea:	e7f5      	b.n	d75d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d75ec <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d75ec:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d75ee:	7800      	ldrb	r0, [r0, #0]
   d75f0:	f7fe f98a 	bl	d5908 <hal_spi_transfer>
}
   d75f4:	b2c0      	uxtb	r0, r0
   d75f6:	bd08      	pop	{r3, pc}

000d75f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d75f8:	b510      	push	{r4, lr}
   d75fa:	4604      	mov	r4, r0
{
	free(buffer);
   d75fc:	6800      	ldr	r0, [r0, #0]
   d75fe:	f7fe fb07 	bl	d5c10 <free>
}
   d7602:	4620      	mov	r0, r4
   d7604:	bd10      	pop	{r4, pc}

000d7606 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7606:	b510      	push	{r4, lr}
   d7608:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d760a:	6800      	ldr	r0, [r0, #0]
   d760c:	b108      	cbz	r0, d7612 <_ZN6String10invalidateEv+0xc>
   d760e:	f7fe faff 	bl	d5c10 <free>
	buffer = NULL;
   d7612:	2300      	movs	r3, #0
	capacity = len = 0;
   d7614:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7618:	6023      	str	r3, [r4, #0]
}
   d761a:	bd10      	pop	{r4, pc}

000d761c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d761c:	b538      	push	{r3, r4, r5, lr}
   d761e:	4604      	mov	r4, r0
   d7620:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7622:	6800      	ldr	r0, [r0, #0]
   d7624:	3101      	adds	r1, #1
   d7626:	f7fe fafb 	bl	d5c20 <realloc>
	if (newbuffer) {
   d762a:	b110      	cbz	r0, d7632 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d762c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7630:	2001      	movs	r0, #1
	}
	return 0;
}
   d7632:	bd38      	pop	{r3, r4, r5, pc}

000d7634 <_ZN6String7reserveEj>:
{
   d7634:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7636:	6803      	ldr	r3, [r0, #0]
{
   d7638:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d763a:	b123      	cbz	r3, d7646 <_ZN6String7reserveEj+0x12>
   d763c:	6843      	ldr	r3, [r0, #4]
   d763e:	428b      	cmp	r3, r1
   d7640:	d301      	bcc.n	d7646 <_ZN6String7reserveEj+0x12>
   d7642:	2001      	movs	r0, #1
}
   d7644:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7646:	4620      	mov	r0, r4
   d7648:	f7ff ffe8 	bl	d761c <_ZN6String12changeBufferEj>
   d764c:	2800      	cmp	r0, #0
   d764e:	d0f9      	beq.n	d7644 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7650:	68a3      	ldr	r3, [r4, #8]
   d7652:	2b00      	cmp	r3, #0
   d7654:	d1f5      	bne.n	d7642 <_ZN6String7reserveEj+0xe>
   d7656:	6822      	ldr	r2, [r4, #0]
   d7658:	7013      	strb	r3, [r2, #0]
   d765a:	e7f2      	b.n	d7642 <_ZN6String7reserveEj+0xe>

000d765c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d765c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d765e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7660:	4611      	mov	r1, r2
   d7662:	9201      	str	r2, [sp, #4]
{
   d7664:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7666:	f7ff ffe5 	bl	d7634 <_ZN6String7reserveEj>
   d766a:	9a01      	ldr	r2, [sp, #4]
   d766c:	b928      	cbnz	r0, d767a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d766e:	4620      	mov	r0, r4
   d7670:	f7ff ffc9 	bl	d7606 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7674:	4620      	mov	r0, r4
   d7676:	b003      	add	sp, #12
   d7678:	bd30      	pop	{r4, r5, pc}
	len = length;
   d767a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d767c:	4629      	mov	r1, r5
   d767e:	6820      	ldr	r0, [r4, #0]
   d7680:	f000 fc34 	bl	d7eec <memcpy>
	buffer[len] = 0;
   d7684:	6822      	ldr	r2, [r4, #0]
   d7686:	68a3      	ldr	r3, [r4, #8]
   d7688:	2100      	movs	r1, #0
   d768a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d768c:	e7f2      	b.n	d7674 <_ZN6String4copyEPKcj+0x18>

000d768e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d768e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7690:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7692:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7696:	4604      	mov	r4, r0
	len = 0;
   d7698:	6083      	str	r3, [r0, #8]
	flags = 0;
   d769a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d769c:	b141      	cbz	r1, d76b0 <_ZN6StringC1EPKc+0x22>
   d769e:	4608      	mov	r0, r1
   d76a0:	9101      	str	r1, [sp, #4]
   d76a2:	f000 fc81 	bl	d7fa8 <strlen>
   d76a6:	9901      	ldr	r1, [sp, #4]
   d76a8:	4602      	mov	r2, r0
   d76aa:	4620      	mov	r0, r4
   d76ac:	f7ff ffd6 	bl	d765c <_ZN6String4copyEPKcj>
}
   d76b0:	4620      	mov	r0, r4
   d76b2:	b002      	add	sp, #8
   d76b4:	bd10      	pop	{r4, pc}

000d76b6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d76b6:	b513      	push	{r0, r1, r4, lr}
   d76b8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d76ba:	b159      	cbz	r1, d76d4 <_ZN6StringaSEPKc+0x1e>
   d76bc:	4608      	mov	r0, r1
   d76be:	9101      	str	r1, [sp, #4]
   d76c0:	f000 fc72 	bl	d7fa8 <strlen>
   d76c4:	9901      	ldr	r1, [sp, #4]
   d76c6:	4602      	mov	r2, r0
   d76c8:	4620      	mov	r0, r4
   d76ca:	f7ff ffc7 	bl	d765c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d76ce:	4620      	mov	r0, r4
   d76d0:	b002      	add	sp, #8
   d76d2:	bd10      	pop	{r4, pc}
	else invalidate();
   d76d4:	f7ff ff97 	bl	d7606 <_ZN6String10invalidateEv>
   d76d8:	e7f9      	b.n	d76ce <_ZN6StringaSEPKc+0x18>

000d76da <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d76da:	b558      	push	{r3, r4, r6, lr}
   d76dc:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d76de:	b12a      	cbz	r2, d76ec <_ZNK6String8getBytesEPhjj+0x12>
   d76e0:	b121      	cbz	r1, d76ec <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d76e2:	6884      	ldr	r4, [r0, #8]
   d76e4:	42a3      	cmp	r3, r4
   d76e6:	d302      	bcc.n	d76ee <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d76e8:	2300      	movs	r3, #0
   d76ea:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d76ec:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d76ee:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d76f0:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d76f2:	6801      	ldr	r1, [r0, #0]
   d76f4:	4294      	cmp	r4, r2
   d76f6:	bf28      	it	cs
   d76f8:	4614      	movcs	r4, r2
   d76fa:	4419      	add	r1, r3
   d76fc:	4622      	mov	r2, r4
   d76fe:	4630      	mov	r0, r6
   d7700:	f000 fc5a 	bl	d7fb8 <strncpy>
	buf[n] = 0;
   d7704:	2300      	movs	r3, #0
   d7706:	5533      	strb	r3, [r6, r4]
   d7708:	e7f0      	b.n	d76ec <_ZNK6String8getBytesEPhjj+0x12>
	...

000d770c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d770c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d770e:	4b09      	ldr	r3, [pc, #36]	; (d7734 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7710:	4c09      	ldr	r4, [pc, #36]	; (d7738 <_GLOBAL__sub_I_System+0x2c>)
   d7712:	2202      	movs	r2, #2
   d7714:	2000      	movs	r0, #0
   d7716:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7718:	4b08      	ldr	r3, [pc, #32]	; (d773c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d771a:	6020      	str	r0, [r4, #0]
   d771c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d771e:	71a0      	strb	r0, [r4, #6]
   d7720:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7722:	f7fe f9d9 	bl	d5ad8 <set_system_mode>
SystemClass System;
   d7726:	4620      	mov	r0, r4
   d7728:	4a05      	ldr	r2, [pc, #20]	; (d7740 <_GLOBAL__sub_I_System+0x34>)
   d772a:	4906      	ldr	r1, [pc, #24]	; (d7744 <_GLOBAL__sub_I_System+0x38>)
   d772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7730:	f000 baa2 	b.w	d7c78 <__aeabi_atexit>
   d7734:	2003e684 	.word	0x2003e684
   d7738:	2003e678 	.word	0x2003e678
   d773c:	ffff0000 	.word	0xffff0000
   d7740:	2003e56c 	.word	0x2003e56c
   d7744:	000d4125 	.word	0x000d4125

000d7748 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7748:	4b02      	ldr	r3, [pc, #8]	; (d7754 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d774a:	681a      	ldr	r2, [r3, #0]
   d774c:	4b02      	ldr	r3, [pc, #8]	; (d7758 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d774e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7750:	4770      	bx	lr
   d7752:	bf00      	nop
   d7754:	2003e504 	.word	0x2003e504
   d7758:	2003e688 	.word	0x2003e688

000d775c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d775c:	4770      	bx	lr

000d775e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d775e:	7441      	strb	r1, [r0, #17]
}
   d7760:	4770      	bx	lr

000d7762 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7762:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7764:	7c00      	ldrb	r0, [r0, #16]
   d7766:	f7fe f93f 	bl	d59e8 <hal_usart_available_data_for_write>
}
   d776a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d776e:	bd08      	pop	{r3, pc}

000d7770 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7770:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7772:	7c00      	ldrb	r0, [r0, #16]
   d7774:	f7fe f910 	bl	d5998 <hal_usart_available>
}
   d7778:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d777c:	bd08      	pop	{r3, pc}

000d777e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d777e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7780:	7c00      	ldrb	r0, [r0, #16]
   d7782:	f7fe f919 	bl	d59b8 <hal_usart_peek>
}
   d7786:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d778a:	bd08      	pop	{r3, pc}

000d778c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d778c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d778e:	7c00      	ldrb	r0, [r0, #16]
   d7790:	f7fe f90a 	bl	d59a8 <hal_usart_read>
}
   d7794:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7798:	bd08      	pop	{r3, pc}

000d779a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d779a:	7c00      	ldrb	r0, [r0, #16]
   d779c:	f7fe b914 	b.w	d59c8 <hal_usart_flush>

000d77a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d77a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77a2:	7c45      	ldrb	r5, [r0, #17]
{
   d77a4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77a6:	b12d      	cbz	r5, d77b4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d77a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d77aa:	b003      	add	sp, #12
   d77ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d77b0:	f7fe b8ea 	b.w	d5988 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77b4:	7c00      	ldrb	r0, [r0, #16]
   d77b6:	9101      	str	r1, [sp, #4]
   d77b8:	f7fe f916 	bl	d59e8 <hal_usart_available_data_for_write>
   d77bc:	2800      	cmp	r0, #0
   d77be:	9901      	ldr	r1, [sp, #4]
   d77c0:	dcf2      	bgt.n	d77a8 <_ZN11USARTSerial5writeEh+0x8>
}
   d77c2:	4628      	mov	r0, r5
   d77c4:	b003      	add	sp, #12
   d77c6:	bd30      	pop	{r4, r5, pc}

000d77c8 <_ZN11USARTSerialD0Ev>:
   d77c8:	b510      	push	{r4, lr}
   d77ca:	2114      	movs	r1, #20
   d77cc:	4604      	mov	r4, r0
   d77ce:	f000 fa58 	bl	d7c82 <_ZdlPvj>
   d77d2:	4620      	mov	r0, r4
   d77d4:	bd10      	pop	{r4, pc}
	...

000d77d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d77d8:	b510      	push	{r4, lr}
   d77da:	f04f 0c00 	mov.w	ip, #0
   d77de:	4604      	mov	r4, r0
   d77e0:	4608      	mov	r0, r1
   d77e2:	4611      	mov	r1, r2
   d77e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d77e8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d77ec:	4a04      	ldr	r2, [pc, #16]	; (d7800 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d77ee:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d77f0:	2201      	movs	r2, #1
  _serial = serial;
   d77f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d77f4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d77f6:	461a      	mov	r2, r3
   d77f8:	f7fe f8be 	bl	d5978 <hal_usart_init>
}
   d77fc:	4620      	mov	r0, r4
   d77fe:	bd10      	pop	{r4, pc}
   d7800:	000d8e40 	.word	0x000d8e40

000d7804 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7804:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7806:	4c0e      	ldr	r4, [pc, #56]	; (d7840 <_Z22__fetch_global_Serial1v+0x3c>)
   d7808:	7821      	ldrb	r1, [r4, #0]
   d780a:	f3bf 8f5b 	dmb	ish
   d780e:	f011 0101 	ands.w	r1, r1, #1
   d7812:	d112      	bne.n	d783a <_Z22__fetch_global_Serial1v+0x36>
   d7814:	4620      	mov	r0, r4
   d7816:	9101      	str	r1, [sp, #4]
   d7818:	f7fc fc4c 	bl	d40b4 <__cxa_guard_acquire>
   d781c:	9901      	ldr	r1, [sp, #4]
   d781e:	b160      	cbz	r0, d783a <_Z22__fetch_global_Serial1v+0x36>
   d7820:	4a08      	ldr	r2, [pc, #32]	; (d7844 <_Z22__fetch_global_Serial1v+0x40>)
   d7822:	4b09      	ldr	r3, [pc, #36]	; (d7848 <_Z22__fetch_global_Serial1v+0x44>)
   d7824:	4809      	ldr	r0, [pc, #36]	; (d784c <_Z22__fetch_global_Serial1v+0x48>)
   d7826:	f7ff ffd7 	bl	d77d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d782a:	4620      	mov	r0, r4
   d782c:	f7fc fc47 	bl	d40be <__cxa_guard_release>
   d7830:	4a07      	ldr	r2, [pc, #28]	; (d7850 <_Z22__fetch_global_Serial1v+0x4c>)
   d7832:	4908      	ldr	r1, [pc, #32]	; (d7854 <_Z22__fetch_global_Serial1v+0x50>)
   d7834:	4805      	ldr	r0, [pc, #20]	; (d784c <_Z22__fetch_global_Serial1v+0x48>)
   d7836:	f000 fa1f 	bl	d7c78 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d783a:	4804      	ldr	r0, [pc, #16]	; (d784c <_Z22__fetch_global_Serial1v+0x48>)
   d783c:	b002      	add	sp, #8
   d783e:	bd10      	pop	{r4, pc}
   d7840:	2003e68c 	.word	0x2003e68c
   d7844:	2003e690 	.word	0x2003e690
   d7848:	2003e714 	.word	0x2003e714
   d784c:	2003e798 	.word	0x2003e798
   d7850:	2003e56c 	.word	0x2003e56c
   d7854:	000d775d 	.word	0x000d775d

000d7858 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7858:	7441      	strb	r1, [r0, #17]
}
   d785a:	4770      	bx	lr

000d785c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d785c:	4770      	bx	lr

000d785e <_ZN9USBSerial4readEv>:
{
   d785e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7860:	2100      	movs	r1, #0
   d7862:	7c00      	ldrb	r0, [r0, #16]
   d7864:	f7fe f8e0 	bl	d5a28 <HAL_USB_USART_Receive_Data>
}
   d7868:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d786c:	bd08      	pop	{r3, pc}

000d786e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d786e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7870:	2101      	movs	r1, #1
   d7872:	7c00      	ldrb	r0, [r0, #16]
   d7874:	f7fe f8d8 	bl	d5a28 <HAL_USB_USART_Receive_Data>
}
   d7878:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d787c:	bd08      	pop	{r3, pc}

000d787e <_ZN9USBSerial17availableForWriteEv>:
{
   d787e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7880:	7c00      	ldrb	r0, [r0, #16]
   d7882:	f7fe f8c9 	bl	d5a18 <HAL_USB_USART_Available_Data_For_Write>
}
   d7886:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d788a:	bd08      	pop	{r3, pc}

000d788c <_ZN9USBSerial9availableEv>:
{
   d788c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d788e:	7c00      	ldrb	r0, [r0, #16]
   d7890:	f7fe f8ba 	bl	d5a08 <HAL_USB_USART_Available_Data>
}
   d7894:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7898:	bd08      	pop	{r3, pc}

000d789a <_ZN9USBSerial5writeEh>:
{
   d789a:	b513      	push	{r0, r1, r4, lr}
   d789c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d789e:	7c00      	ldrb	r0, [r0, #16]
{
   d78a0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d78a2:	f7fe f8b9 	bl	d5a18 <HAL_USB_USART_Available_Data_For_Write>
   d78a6:	2800      	cmp	r0, #0
   d78a8:	9901      	ldr	r1, [sp, #4]
   d78aa:	dc01      	bgt.n	d78b0 <_ZN9USBSerial5writeEh+0x16>
   d78ac:	7c60      	ldrb	r0, [r4, #17]
   d78ae:	b120      	cbz	r0, d78ba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d78b0:	7c20      	ldrb	r0, [r4, #16]
   d78b2:	f7fe f8c1 	bl	d5a38 <HAL_USB_USART_Send_Data>
   d78b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d78ba:	b002      	add	sp, #8
   d78bc:	bd10      	pop	{r4, pc}

000d78be <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d78be:	7c00      	ldrb	r0, [r0, #16]
   d78c0:	f7fe b8c2 	b.w	d5a48 <HAL_USB_USART_Flush_Data>

000d78c4 <_ZN9USBSerialD0Ev>:
   d78c4:	b510      	push	{r4, lr}
   d78c6:	2114      	movs	r1, #20
   d78c8:	4604      	mov	r4, r0
   d78ca:	f000 f9da 	bl	d7c82 <_ZdlPvj>
   d78ce:	4620      	mov	r0, r4
   d78d0:	bd10      	pop	{r4, pc}
	...

000d78d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d78d4:	b510      	push	{r4, lr}
   d78d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d78da:	4604      	mov	r4, r0
   d78dc:	4608      	mov	r0, r1
   d78de:	2100      	movs	r1, #0
   d78e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d78e4:	4b04      	ldr	r3, [pc, #16]	; (d78f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d78e6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d78e8:	2301      	movs	r3, #1
  _serial = serial;
   d78ea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d78ec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d78ee:	4611      	mov	r1, r2
   d78f0:	f7fe f882 	bl	d59f8 <HAL_USB_USART_Init>
}
   d78f4:	4620      	mov	r0, r4
   d78f6:	bd10      	pop	{r4, pc}
   d78f8:	000d8e70 	.word	0x000d8e70

000d78fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d78fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d78fe:	2214      	movs	r2, #20
{
   d7900:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7902:	2100      	movs	r1, #0
   d7904:	f000 fb1a 	bl	d7f3c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7908:	4620      	mov	r0, r4
   d790a:	bd10      	pop	{r4, pc}

000d790c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d790c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d790e:	4c10      	ldr	r4, [pc, #64]	; (d7950 <_Z16_fetch_usbserialv+0x44>)
{
   d7910:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7912:	a803      	add	r0, sp, #12
   d7914:	f7ff fff2 	bl	d78fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7918:	7821      	ldrb	r1, [r4, #0]
   d791a:	f3bf 8f5b 	dmb	ish
   d791e:	f011 0101 	ands.w	r1, r1, #1
   d7922:	d111      	bne.n	d7948 <_Z16_fetch_usbserialv+0x3c>
   d7924:	4620      	mov	r0, r4
   d7926:	9101      	str	r1, [sp, #4]
   d7928:	f7fc fbc4 	bl	d40b4 <__cxa_guard_acquire>
   d792c:	9901      	ldr	r1, [sp, #4]
   d792e:	b158      	cbz	r0, d7948 <_Z16_fetch_usbserialv+0x3c>
   d7930:	aa03      	add	r2, sp, #12
   d7932:	4808      	ldr	r0, [pc, #32]	; (d7954 <_Z16_fetch_usbserialv+0x48>)
   d7934:	f7ff ffce 	bl	d78d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7938:	4620      	mov	r0, r4
   d793a:	f7fc fbc0 	bl	d40be <__cxa_guard_release>
   d793e:	4a06      	ldr	r2, [pc, #24]	; (d7958 <_Z16_fetch_usbserialv+0x4c>)
   d7940:	4906      	ldr	r1, [pc, #24]	; (d795c <_Z16_fetch_usbserialv+0x50>)
   d7942:	4804      	ldr	r0, [pc, #16]	; (d7954 <_Z16_fetch_usbserialv+0x48>)
   d7944:	f000 f998 	bl	d7c78 <__aeabi_atexit>
	return _usbserial;
}
   d7948:	4802      	ldr	r0, [pc, #8]	; (d7954 <_Z16_fetch_usbserialv+0x48>)
   d794a:	b008      	add	sp, #32
   d794c:	bd10      	pop	{r4, pc}
   d794e:	bf00      	nop
   d7950:	2003e7ac 	.word	0x2003e7ac
   d7954:	2003e7b0 	.word	0x2003e7b0
   d7958:	2003e56c 	.word	0x2003e56c
   d795c:	000d785d 	.word	0x000d785d

000d7960 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7960:	2200      	movs	r2, #0
   d7962:	6840      	ldr	r0, [r0, #4]
   d7964:	4611      	mov	r1, r2
   d7966:	f7fe b903 	b.w	d5b70 <network_ready>

000d796a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d796a:	2200      	movs	r2, #0
   d796c:	6840      	ldr	r0, [r0, #4]
   d796e:	4611      	mov	r1, r2
   d7970:	f7fe b91e 	b.w	d5bb0 <network_listening>

000d7974 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7974:	2200      	movs	r2, #0
   d7976:	6840      	ldr	r0, [r0, #4]
   d7978:	4611      	mov	r1, r2
   d797a:	f7fe b929 	b.w	d5bd0 <network_get_listen_timeout>

000d797e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d797e:	6840      	ldr	r0, [r0, #4]
   d7980:	2200      	movs	r2, #0
   d7982:	f7fe b91d 	b.w	d5bc0 <network_set_listen_timeout>

000d7986 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7986:	6840      	ldr	r0, [r0, #4]
   d7988:	2200      	movs	r2, #0
   d798a:	f081 0101 	eor.w	r1, r1, #1
   d798e:	f7fe b907 	b.w	d5ba0 <network_listen>

000d7992 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7992:	2300      	movs	r3, #0
   d7994:	6840      	ldr	r0, [r0, #4]
   d7996:	461a      	mov	r2, r3
   d7998:	4619      	mov	r1, r3
   d799a:	f7fe b8f9 	b.w	d5b90 <network_off>

000d799e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d799e:	2300      	movs	r3, #0
   d79a0:	6840      	ldr	r0, [r0, #4]
   d79a2:	461a      	mov	r2, r3
   d79a4:	4619      	mov	r1, r3
   d79a6:	f7fe b8eb 	b.w	d5b80 <network_on>

000d79aa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d79aa:	2200      	movs	r2, #0
   d79ac:	6840      	ldr	r0, [r0, #4]
   d79ae:	4611      	mov	r1, r2
   d79b0:	f7fe b8ce 	b.w	d5b50 <network_connecting>

000d79b4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d79b4:	6840      	ldr	r0, [r0, #4]
   d79b6:	2200      	movs	r2, #0
   d79b8:	2102      	movs	r1, #2
   d79ba:	f7fe b8d1 	b.w	d5b60 <network_disconnect>

000d79be <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d79be:	2300      	movs	r3, #0
   d79c0:	6840      	ldr	r0, [r0, #4]
   d79c2:	461a      	mov	r2, r3
   d79c4:	f7fe b8bc 	b.w	d5b40 <network_connect>

000d79c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d79c8:	4b02      	ldr	r3, [pc, #8]	; (d79d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d79ca:	2204      	movs	r2, #4
   d79cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d79ce:	4a02      	ldr	r2, [pc, #8]	; (d79d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d79d0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d79d2:	4770      	bx	lr
   d79d4:	2003e7c4 	.word	0x2003e7c4
   d79d8:	000d8ea0 	.word	0x000d8ea0

000d79dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d79dc:	4b01      	ldr	r3, [pc, #4]	; (d79e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d79de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d79e0:	4770      	bx	lr
   d79e2:	bf00      	nop
   d79e4:	2003e508 	.word	0x2003e508

000d79e8 <serialEventRun>:
{
   d79e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d79ea:	4b0b      	ldr	r3, [pc, #44]	; (d7a18 <serialEventRun+0x30>)
   d79ec:	b143      	cbz	r3, d7a00 <serialEventRun+0x18>
   d79ee:	f7ff ff8d 	bl	d790c <_Z16_fetch_usbserialv>
   d79f2:	6803      	ldr	r3, [r0, #0]
   d79f4:	691b      	ldr	r3, [r3, #16]
   d79f6:	4798      	blx	r3
   d79f8:	2800      	cmp	r0, #0
   d79fa:	dd01      	ble.n	d7a00 <serialEventRun+0x18>
        serialEvent();
   d79fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7a00:	4b06      	ldr	r3, [pc, #24]	; (d7a1c <serialEventRun+0x34>)
   d7a02:	b143      	cbz	r3, d7a16 <serialEventRun+0x2e>
   d7a04:	f7ff fefe 	bl	d7804 <_Z22__fetch_global_Serial1v>
   d7a08:	6803      	ldr	r3, [r0, #0]
   d7a0a:	691b      	ldr	r3, [r3, #16]
   d7a0c:	4798      	blx	r3
   d7a0e:	2800      	cmp	r0, #0
   d7a10:	dd01      	ble.n	d7a16 <serialEventRun+0x2e>
        serialEvent1();
   d7a12:	f3af 8000 	nop.w
}
   d7a16:	bd08      	pop	{r3, pc}
	...

000d7a20 <_post_loop>:
{
   d7a20:	b508      	push	{r3, lr}
	serialEventRun();
   d7a22:	f7ff ffe1 	bl	d79e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a26:	f7fd fecf 	bl	d57c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a2a:	4b01      	ldr	r3, [pc, #4]	; (d7a30 <_post_loop+0x10>)
   d7a2c:	6018      	str	r0, [r3, #0]
}
   d7a2e:	bd08      	pop	{r3, pc}
   d7a30:	2003e7d4 	.word	0x2003e7d4

000d7a34 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a34:	4802      	ldr	r0, [pc, #8]	; (d7a40 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7a36:	4a03      	ldr	r2, [pc, #12]	; (d7a44 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7a38:	4903      	ldr	r1, [pc, #12]	; (d7a48 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7a3a:	1a12      	subs	r2, r2, r0
   d7a3c:	f000 ba56 	b.w	d7eec <memcpy>
   d7a40:	2003f400 	.word	0x2003f400
   d7a44:	2003f404 	.word	0x2003f404
   d7a48:	000d8ff0 	.word	0x000d8ff0

000d7a4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7a4c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a4e:	2300      	movs	r3, #0
   d7a50:	9300      	str	r3, [sp, #0]
   d7a52:	461a      	mov	r2, r3
   d7a54:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a58:	f7fe f860 	bl	d5b1c <system_ctrl_set_result>
}
   d7a5c:	b003      	add	sp, #12
   d7a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a64 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7a64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7a66:	8843      	ldrh	r3, [r0, #2]
   d7a68:	2b0a      	cmp	r3, #10
   d7a6a:	d008      	beq.n	d7a7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7a6c:	2b50      	cmp	r3, #80	; 0x50
   d7a6e:	d10b      	bne.n	d7a88 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7a70:	4b09      	ldr	r3, [pc, #36]	; (d7a98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7a72:	681b      	ldr	r3, [r3, #0]
   d7a74:	b14b      	cbz	r3, d7a8a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7a76:	b003      	add	sp, #12
   d7a78:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7a7c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7a7e:	f7ff ffe5 	bl	d7a4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7a82:	b003      	add	sp, #12
   d7a84:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a88:	2300      	movs	r3, #0
   d7a8a:	9300      	str	r3, [sp, #0]
   d7a8c:	461a      	mov	r2, r3
   d7a8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a92:	f7fe f843 	bl	d5b1c <system_ctrl_set_result>
}
   d7a96:	e7f4      	b.n	d7a82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7a98:	2003e7d0 	.word	0x2003e7d0

000d7a9c <module_user_init_hook>:
{
   d7a9c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7a9e:	4c12      	ldr	r4, [pc, #72]	; (d7ae8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7aa0:	4812      	ldr	r0, [pc, #72]	; (d7aec <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7aa2:	4d13      	ldr	r5, [pc, #76]	; (d7af0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7aa4:	2100      	movs	r1, #0
   d7aa6:	f7fe f8d3 	bl	d5c50 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7aaa:	6823      	ldr	r3, [r4, #0]
   d7aac:	42ab      	cmp	r3, r5
   d7aae:	4b11      	ldr	r3, [pc, #68]	; (d7af4 <module_user_init_hook+0x58>)
   d7ab0:	bf0c      	ite	eq
   d7ab2:	2201      	moveq	r2, #1
   d7ab4:	2200      	movne	r2, #0
   d7ab6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ab8:	d002      	beq.n	d7ac0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7aba:	f7ff ffbb 	bl	d7a34 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7abe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7ac0:	f7fd fe72 	bl	d57a8 <HAL_RNG_GetRandomNumber>
   d7ac4:	4604      	mov	r4, r0
    srand(seed);
   d7ac6:	f000 fa41 	bl	d7f4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7aca:	4b0b      	ldr	r3, [pc, #44]	; (d7af8 <module_user_init_hook+0x5c>)
   d7acc:	b113      	cbz	r3, d7ad4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7ace:	4620      	mov	r0, r4
   d7ad0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7ad4:	2100      	movs	r1, #0
   d7ad6:	4808      	ldr	r0, [pc, #32]	; (d7af8 <module_user_init_hook+0x5c>)
   d7ad8:	f7fe f82a 	bl	d5b30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7ae0:	4806      	ldr	r0, [pc, #24]	; (d7afc <module_user_init_hook+0x60>)
   d7ae2:	2100      	movs	r1, #0
   d7ae4:	f7fe b810 	b.w	d5b08 <system_ctrl_set_app_request_handler>
   d7ae8:	2003f400 	.word	0x2003f400
   d7aec:	000d79dd 	.word	0x000d79dd
   d7af0:	9a271c1e 	.word	0x9a271c1e
   d7af4:	2003e7cc 	.word	0x2003e7cc
   d7af8:	00000000 	.word	0x00000000
   d7afc:	000d7a65 	.word	0x000d7a65

000d7b00 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7b00:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7b02:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7b04:	d902      	bls.n	d7b0c <pinAvailable+0xc>
    return false;
   d7b06:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7b08:	b002      	add	sp, #8
   d7b0a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7b0c:	f1a0 030b 	sub.w	r3, r0, #11
   d7b10:	2b02      	cmp	r3, #2
   d7b12:	d81a      	bhi.n	d7b4a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7b14:	4c17      	ldr	r4, [pc, #92]	; (d7b74 <pinAvailable+0x74>)
   d7b16:	7821      	ldrb	r1, [r4, #0]
   d7b18:	f3bf 8f5b 	dmb	ish
   d7b1c:	f011 0101 	ands.w	r1, r1, #1
   d7b20:	d10b      	bne.n	d7b3a <pinAvailable+0x3a>
   d7b22:	4620      	mov	r0, r4
   d7b24:	9101      	str	r1, [sp, #4]
   d7b26:	f7fc fac5 	bl	d40b4 <__cxa_guard_acquire>
   d7b2a:	9901      	ldr	r1, [sp, #4]
   d7b2c:	b128      	cbz	r0, d7b3a <pinAvailable+0x3a>
   d7b2e:	4812      	ldr	r0, [pc, #72]	; (d7b78 <pinAvailable+0x78>)
   d7b30:	f7ff fcba 	bl	d74a8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7b34:	4620      	mov	r0, r4
   d7b36:	f7fc fac2 	bl	d40be <__cxa_guard_release>
   d7b3a:	4b0f      	ldr	r3, [pc, #60]	; (d7b78 <pinAvailable+0x78>)
   d7b3c:	7818      	ldrb	r0, [r3, #0]
   d7b3e:	f7fd fef3 	bl	d5928 <hal_spi_is_enabled>
   d7b42:	2800      	cmp	r0, #0
   d7b44:	d1df      	bne.n	d7b06 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7b46:	2001      	movs	r0, #1
   d7b48:	e7de      	b.n	d7b08 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7b4a:	2801      	cmp	r0, #1
   d7b4c:	d809      	bhi.n	d7b62 <pinAvailable+0x62>
   d7b4e:	f000 f86b 	bl	d7c28 <_Z19__fetch_global_Wirev>
   d7b52:	2100      	movs	r1, #0
   d7b54:	7c00      	ldrb	r0, [r0, #16]
   d7b56:	f7fd fea7 	bl	d58a8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7b5a:	f080 0001 	eor.w	r0, r0, #1
   d7b5e:	b2c0      	uxtb	r0, r0
   d7b60:	e7d2      	b.n	d7b08 <pinAvailable+0x8>
   d7b62:	3809      	subs	r0, #9
   d7b64:	2801      	cmp	r0, #1
   d7b66:	d8ee      	bhi.n	d7b46 <pinAvailable+0x46>
   d7b68:	f7ff fe4c 	bl	d7804 <_Z22__fetch_global_Serial1v>
   d7b6c:	7c00      	ldrb	r0, [r0, #16]
   d7b6e:	f7fd ff33 	bl	d59d8 <hal_usart_is_enabled>
   d7b72:	e7f2      	b.n	d7b5a <pinAvailable+0x5a>
   d7b74:	2003e638 	.word	0x2003e638
   d7b78:	2003e63c 	.word	0x2003e63c

000d7b7c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b7c:	2823      	cmp	r0, #35	; 0x23
{
   d7b7e:	b538      	push	{r3, r4, r5, lr}
   d7b80:	4604      	mov	r4, r0
   d7b82:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b84:	d80a      	bhi.n	d7b9c <pinMode+0x20>
   d7b86:	29ff      	cmp	r1, #255	; 0xff
   d7b88:	d008      	beq.n	d7b9c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7b8a:	f7ff ffb9 	bl	d7b00 <pinAvailable>
   d7b8e:	b128      	cbz	r0, d7b9c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7b90:	4629      	mov	r1, r5
   d7b92:	4620      	mov	r0, r4
}
   d7b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7b98:	f7fd be1e 	b.w	d57d8 <HAL_Pin_Mode>
}
   d7b9c:	bd38      	pop	{r3, r4, r5, pc}

000d7b9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7b9e:	b538      	push	{r3, r4, r5, lr}
   d7ba0:	4604      	mov	r4, r0
   d7ba2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ba4:	f7fd fe20 	bl	d57e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7ba8:	28ff      	cmp	r0, #255	; 0xff
   d7baa:	d010      	beq.n	d7bce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7bac:	2806      	cmp	r0, #6
   d7bae:	d804      	bhi.n	d7bba <digitalWrite+0x1c>
   d7bb0:	234d      	movs	r3, #77	; 0x4d
   d7bb2:	fa23 f000 	lsr.w	r0, r3, r0
   d7bb6:	07c3      	lsls	r3, r0, #31
   d7bb8:	d409      	bmi.n	d7bce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7bba:	4620      	mov	r0, r4
   d7bbc:	f7ff ffa0 	bl	d7b00 <pinAvailable>
   d7bc0:	b128      	cbz	r0, d7bce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bc2:	4629      	mov	r1, r5
   d7bc4:	4620      	mov	r0, r4
}
   d7bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7bca:	f7fd be15 	b.w	d57f8 <HAL_GPIO_Write>
}
   d7bce:	bd38      	pop	{r3, r4, r5, pc}

000d7bd0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7bd0:	b510      	push	{r4, lr}
   d7bd2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bd4:	f7fd fe08 	bl	d57e8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7bd8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7bda:	b2db      	uxtb	r3, r3
   d7bdc:	2b01      	cmp	r3, #1
   d7bde:	d908      	bls.n	d7bf2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7be0:	4620      	mov	r0, r4
   d7be2:	f7ff ff8d 	bl	d7b00 <pinAvailable>
   d7be6:	b120      	cbz	r0, d7bf2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7be8:	4620      	mov	r0, r4
}
   d7bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7bee:	f7fd be0b 	b.w	d5808 <HAL_GPIO_Read>
}
   d7bf2:	2000      	movs	r0, #0
   d7bf4:	bd10      	pop	{r4, pc}
	...

000d7bf8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7bf8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7bfa:	2300      	movs	r3, #0
   d7bfc:	2520      	movs	r5, #32
   d7bfe:	8043      	strh	r3, [r0, #2]
   d7c00:	2314      	movs	r3, #20
{
   d7c02:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7c04:	8003      	strh	r3, [r0, #0]
   d7c06:	6085      	str	r5, [r0, #8]
   d7c08:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c0a:	4906      	ldr	r1, [pc, #24]	; (d7c24 <_Z17acquireWireBufferv+0x2c>)
   d7c0c:	4628      	mov	r0, r5
   d7c0e:	f000 f83a 	bl	d7c86 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c12:	4904      	ldr	r1, [pc, #16]	; (d7c24 <_Z17acquireWireBufferv+0x2c>)
	};
   d7c14:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c16:	4628      	mov	r0, r5
   d7c18:	f000 f835 	bl	d7c86 <_ZnajRKSt9nothrow_t>
	};
   d7c1c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7c1e:	4620      	mov	r0, r4
   d7c20:	bd38      	pop	{r3, r4, r5, pc}
   d7c22:	bf00      	nop
   d7c24:	000d8ed4 	.word	0x000d8ed4

000d7c28 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c2a:	4d0f      	ldr	r5, [pc, #60]	; (d7c68 <_Z19__fetch_global_Wirev+0x40>)
   d7c2c:	7829      	ldrb	r1, [r5, #0]
   d7c2e:	f3bf 8f5b 	dmb	ish
   d7c32:	f011 0401 	ands.w	r4, r1, #1
{
   d7c36:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c38:	d113      	bne.n	d7c62 <_Z19__fetch_global_Wirev+0x3a>
   d7c3a:	4628      	mov	r0, r5
   d7c3c:	f7fc fa3a 	bl	d40b4 <__cxa_guard_acquire>
   d7c40:	b178      	cbz	r0, d7c62 <_Z19__fetch_global_Wirev+0x3a>
   d7c42:	a801      	add	r0, sp, #4
   d7c44:	f7ff ffd8 	bl	d7bf8 <_Z17acquireWireBufferv>
   d7c48:	aa01      	add	r2, sp, #4
   d7c4a:	4621      	mov	r1, r4
   d7c4c:	4807      	ldr	r0, [pc, #28]	; (d7c6c <_Z19__fetch_global_Wirev+0x44>)
   d7c4e:	f7ff f9ed 	bl	d702c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7c52:	4628      	mov	r0, r5
   d7c54:	f7fc fa33 	bl	d40be <__cxa_guard_release>
   d7c58:	4a05      	ldr	r2, [pc, #20]	; (d7c70 <_Z19__fetch_global_Wirev+0x48>)
   d7c5a:	4906      	ldr	r1, [pc, #24]	; (d7c74 <_Z19__fetch_global_Wirev+0x4c>)
   d7c5c:	4803      	ldr	r0, [pc, #12]	; (d7c6c <_Z19__fetch_global_Wirev+0x44>)
   d7c5e:	f000 f80b 	bl	d7c78 <__aeabi_atexit>
	return wire;
}
   d7c62:	4802      	ldr	r0, [pc, #8]	; (d7c6c <_Z19__fetch_global_Wirev+0x44>)
   d7c64:	b007      	add	sp, #28
   d7c66:	bd30      	pop	{r4, r5, pc}
   d7c68:	2003e7d8 	.word	0x2003e7d8
   d7c6c:	2003e7dc 	.word	0x2003e7dc
   d7c70:	2003e56c 	.word	0x2003e56c
   d7c74:	000d6fd5 	.word	0x000d6fd5

000d7c78 <__aeabi_atexit>:
   d7c78:	460b      	mov	r3, r1
   d7c7a:	4601      	mov	r1, r0
   d7c7c:	4618      	mov	r0, r3
   d7c7e:	f000 b919 	b.w	d7eb4 <__cxa_atexit>

000d7c82 <_ZdlPvj>:
   d7c82:	f7fc ba0a 	b.w	d409a <_ZdlPv>

000d7c86 <_ZnajRKSt9nothrow_t>:
   d7c86:	f7fc ba06 	b.w	d4096 <_Znaj>

000d7c8a <_ZSt25__throw_bad_function_callv>:
   d7c8a:	b508      	push	{r3, lr}
   d7c8c:	f7fd ffd8 	bl	d5c40 <abort>

000d7c90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7c90:	4901      	ldr	r1, [pc, #4]	; (d7c98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7c92:	f000 b8f9 	b.w	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7c96:	bf00      	nop
   d7c98:	000d8ef0 	.word	0x000d8ef0

000d7c9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7c9e:	2400      	movs	r4, #0
   d7ca0:	2310      	movs	r3, #16
   d7ca2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7ca6:	6803      	ldr	r3, [r0, #0]
   d7ca8:	9400      	str	r4, [sp, #0]
   d7caa:	699e      	ldr	r6, [r3, #24]
   d7cac:	f88d 4004 	strb.w	r4, [sp, #4]
   d7cb0:	4615      	mov	r5, r2
   d7cb2:	466b      	mov	r3, sp
   d7cb4:	6812      	ldr	r2, [r2, #0]
   d7cb6:	47b0      	blx	r6
   d7cb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7cbc:	f003 0306 	and.w	r3, r3, #6
   d7cc0:	2b06      	cmp	r3, #6
   d7cc2:	bf03      	ittte	eq
   d7cc4:	9b00      	ldreq	r3, [sp, #0]
   d7cc6:	602b      	streq	r3, [r5, #0]
   d7cc8:	2001      	moveq	r0, #1
   d7cca:	4620      	movne	r0, r4
   d7ccc:	b004      	add	sp, #16
   d7cce:	bd70      	pop	{r4, r5, r6, pc}

000d7cd0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7cd0:	9800      	ldr	r0, [sp, #0]
   d7cd2:	4290      	cmp	r0, r2
   d7cd4:	bf14      	ite	ne
   d7cd6:	2001      	movne	r0, #1
   d7cd8:	2006      	moveq	r0, #6
   d7cda:	4770      	bx	lr

000d7cdc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7cdc:	b510      	push	{r4, lr}
   d7cde:	4b03      	ldr	r3, [pc, #12]	; (d7cec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7ce0:	6003      	str	r3, [r0, #0]
   d7ce2:	4604      	mov	r4, r0
   d7ce4:	f000 f8cd 	bl	d7e82 <_ZNSt9type_infoD1Ev>
   d7ce8:	4620      	mov	r0, r4
   d7cea:	bd10      	pop	{r4, pc}
   d7cec:	000d8f30 	.word	0x000d8f30

000d7cf0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7cf0:	b510      	push	{r4, lr}
   d7cf2:	4604      	mov	r4, r0
   d7cf4:	f7ff fff2 	bl	d7cdc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7cf8:	4620      	mov	r0, r4
   d7cfa:	2108      	movs	r1, #8
   d7cfc:	f7ff ffc1 	bl	d7c82 <_ZdlPvj>
   d7d00:	4620      	mov	r0, r4
   d7d02:	bd10      	pop	{r4, pc}

000d7d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d08:	461f      	mov	r7, r3
   d7d0a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7d0e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7d12:	4598      	cmp	r8, r3
   d7d14:	4606      	mov	r6, r0
   d7d16:	4615      	mov	r5, r2
   d7d18:	d107      	bne.n	d7d2a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7d1a:	9907      	ldr	r1, [sp, #28]
   d7d1c:	f000 f8b4 	bl	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7d20:	b118      	cbz	r0, d7d2a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7d22:	7165      	strb	r5, [r4, #5]
   d7d24:	2000      	movs	r0, #0
   d7d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7d2a:	4639      	mov	r1, r7
   d7d2c:	4630      	mov	r0, r6
   d7d2e:	f000 f8ab 	bl	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7d32:	2800      	cmp	r0, #0
   d7d34:	d0f6      	beq.n	d7d24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7d36:	2301      	movs	r3, #1
   d7d38:	f8c4 8000 	str.w	r8, [r4]
   d7d3c:	7125      	strb	r5, [r4, #4]
   d7d3e:	71a3      	strb	r3, [r4, #6]
   d7d40:	e7f0      	b.n	d7d24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7d42 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7d42:	b538      	push	{r3, r4, r5, lr}
   d7d44:	4615      	mov	r5, r2
   d7d46:	461c      	mov	r4, r3
   d7d48:	f000 f89e 	bl	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7d4c:	b120      	cbz	r0, d7d58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7d4e:	2308      	movs	r3, #8
   d7d50:	60e3      	str	r3, [r4, #12]
   d7d52:	2306      	movs	r3, #6
   d7d54:	6025      	str	r5, [r4, #0]
   d7d56:	7123      	strb	r3, [r4, #4]
   d7d58:	bd38      	pop	{r3, r4, r5, pc}

000d7d5a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7d5c:	4605      	mov	r5, r0
   d7d5e:	460c      	mov	r4, r1
   d7d60:	9201      	str	r2, [sp, #4]
   d7d62:	461e      	mov	r6, r3
   d7d64:	f000 f890 	bl	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7d68:	b950      	cbnz	r0, d7d80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7d6a:	2e03      	cmp	r6, #3
   d7d6c:	d808      	bhi.n	d7d80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7d6e:	6823      	ldr	r3, [r4, #0]
   d7d70:	9a01      	ldr	r2, [sp, #4]
   d7d72:	695b      	ldr	r3, [r3, #20]
   d7d74:	4629      	mov	r1, r5
   d7d76:	4620      	mov	r0, r4
   d7d78:	b002      	add	sp, #8
   d7d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7d7e:	4718      	bx	r3
   d7d80:	b002      	add	sp, #8
   d7d82:	bd70      	pop	{r4, r5, r6, pc}

000d7d84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7d84:	b510      	push	{r4, lr}
   d7d86:	4b03      	ldr	r3, [pc, #12]	; (d7d94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7d88:	6003      	str	r3, [r0, #0]
   d7d8a:	4604      	mov	r4, r0
   d7d8c:	f7ff ffa6 	bl	d7cdc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7d90:	4620      	mov	r0, r4
   d7d92:	bd10      	pop	{r4, pc}
   d7d94:	000d8f90 	.word	0x000d8f90

000d7d98 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7d98:	b510      	push	{r4, lr}
   d7d9a:	4604      	mov	r4, r0
   d7d9c:	f7ff fff2 	bl	d7d84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7da0:	4620      	mov	r0, r4
   d7da2:	210c      	movs	r1, #12
   d7da4:	f7ff ff6d 	bl	d7c82 <_ZdlPvj>
   d7da8:	4620      	mov	r0, r4
   d7daa:	bd10      	pop	{r4, pc}

000d7dac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7dae:	9f08      	ldr	r7, [sp, #32]
   d7db0:	4297      	cmp	r7, r2
   d7db2:	4605      	mov	r5, r0
   d7db4:	460e      	mov	r6, r1
   d7db6:	4614      	mov	r4, r2
   d7db8:	d00a      	beq.n	d7dd0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7dba:	68a8      	ldr	r0, [r5, #8]
   d7dbc:	6802      	ldr	r2, [r0, #0]
   d7dbe:	9708      	str	r7, [sp, #32]
   d7dc0:	6a15      	ldr	r5, [r2, #32]
   d7dc2:	4631      	mov	r1, r6
   d7dc4:	4622      	mov	r2, r4
   d7dc6:	46ac      	mov	ip, r5
   d7dc8:	b003      	add	sp, #12
   d7dca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7dce:	4760      	bx	ip
   d7dd0:	4619      	mov	r1, r3
   d7dd2:	9301      	str	r3, [sp, #4]
   d7dd4:	f000 f858 	bl	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7dd8:	9b01      	ldr	r3, [sp, #4]
   d7dda:	2800      	cmp	r0, #0
   d7ddc:	d0ed      	beq.n	d7dba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7dde:	2006      	movs	r0, #6
   d7de0:	b003      	add	sp, #12
   d7de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7de4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7de8:	460d      	mov	r5, r1
   d7dea:	4619      	mov	r1, r3
   d7dec:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7df0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7df4:	4681      	mov	r9, r0
   d7df6:	4617      	mov	r7, r2
   d7df8:	4698      	mov	r8, r3
   d7dfa:	f000 f845 	bl	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7dfe:	b190      	cbz	r0, d7e26 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7e00:	2d00      	cmp	r5, #0
   d7e02:	6034      	str	r4, [r6, #0]
   d7e04:	7137      	strb	r7, [r6, #4]
   d7e06:	db09      	blt.n	d7e1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7e08:	1961      	adds	r1, r4, r5
   d7e0a:	458a      	cmp	sl, r1
   d7e0c:	bf0c      	ite	eq
   d7e0e:	2106      	moveq	r1, #6
   d7e10:	2101      	movne	r1, #1
   d7e12:	71b1      	strb	r1, [r6, #6]
   d7e14:	2000      	movs	r0, #0
   d7e16:	b001      	add	sp, #4
   d7e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e1c:	3502      	adds	r5, #2
   d7e1e:	d1f9      	bne.n	d7e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7e20:	2301      	movs	r3, #1
   d7e22:	71b3      	strb	r3, [r6, #6]
   d7e24:	e7f6      	b.n	d7e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7e26:	4554      	cmp	r4, sl
   d7e28:	d106      	bne.n	d7e38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7e2a:	4659      	mov	r1, fp
   d7e2c:	4648      	mov	r0, r9
   d7e2e:	f000 f82b 	bl	d7e88 <_ZNKSt9type_infoeqERKS_>
   d7e32:	b108      	cbz	r0, d7e38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7e34:	7177      	strb	r7, [r6, #5]
   d7e36:	e7ed      	b.n	d7e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7e38:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7e3c:	6803      	ldr	r3, [r0, #0]
   d7e3e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7e42:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7e46:	69dc      	ldr	r4, [r3, #28]
   d7e48:	463a      	mov	r2, r7
   d7e4a:	4643      	mov	r3, r8
   d7e4c:	4629      	mov	r1, r5
   d7e4e:	46a4      	mov	ip, r4
   d7e50:	b001      	add	sp, #4
   d7e52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e56:	4760      	bx	ip

000d7e58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e5c:	4607      	mov	r7, r0
   d7e5e:	460c      	mov	r4, r1
   d7e60:	4615      	mov	r5, r2
   d7e62:	461e      	mov	r6, r3
   d7e64:	f7ff ff6d 	bl	d7d42 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7e68:	b948      	cbnz	r0, d7e7e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7e6a:	68b8      	ldr	r0, [r7, #8]
   d7e6c:	6803      	ldr	r3, [r0, #0]
   d7e6e:	699f      	ldr	r7, [r3, #24]
   d7e70:	462a      	mov	r2, r5
   d7e72:	4633      	mov	r3, r6
   d7e74:	4621      	mov	r1, r4
   d7e76:	46bc      	mov	ip, r7
   d7e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7e7c:	4760      	bx	ip
   d7e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7e82 <_ZNSt9type_infoD1Ev>:
   d7e82:	4770      	bx	lr

000d7e84 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7e84:	2000      	movs	r0, #0
   d7e86:	4770      	bx	lr

000d7e88 <_ZNKSt9type_infoeqERKS_>:
   d7e88:	4281      	cmp	r1, r0
   d7e8a:	b508      	push	{r3, lr}
   d7e8c:	d00e      	beq.n	d7eac <_ZNKSt9type_infoeqERKS_+0x24>
   d7e8e:	6840      	ldr	r0, [r0, #4]
   d7e90:	7803      	ldrb	r3, [r0, #0]
   d7e92:	2b2a      	cmp	r3, #42	; 0x2a
   d7e94:	d00c      	beq.n	d7eb0 <_ZNKSt9type_infoeqERKS_+0x28>
   d7e96:	6849      	ldr	r1, [r1, #4]
   d7e98:	780b      	ldrb	r3, [r1, #0]
   d7e9a:	2b2a      	cmp	r3, #42	; 0x2a
   d7e9c:	bf08      	it	eq
   d7e9e:	3101      	addeq	r1, #1
   d7ea0:	f000 f878 	bl	d7f94 <strcmp>
   d7ea4:	fab0 f080 	clz	r0, r0
   d7ea8:	0940      	lsrs	r0, r0, #5
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	2001      	movs	r0, #1
   d7eae:	e7fc      	b.n	d7eaa <_ZNKSt9type_infoeqERKS_+0x22>
   d7eb0:	2000      	movs	r0, #0
   d7eb2:	e7fa      	b.n	d7eaa <_ZNKSt9type_infoeqERKS_+0x22>

000d7eb4 <__cxa_atexit>:
   d7eb4:	b510      	push	{r4, lr}
   d7eb6:	4c05      	ldr	r4, [pc, #20]	; (d7ecc <__cxa_atexit+0x18>)
   d7eb8:	4613      	mov	r3, r2
   d7eba:	b12c      	cbz	r4, d7ec8 <__cxa_atexit+0x14>
   d7ebc:	460a      	mov	r2, r1
   d7ebe:	4601      	mov	r1, r0
   d7ec0:	2002      	movs	r0, #2
   d7ec2:	f3af 8000 	nop.w
   d7ec6:	bd10      	pop	{r4, pc}
   d7ec8:	4620      	mov	r0, r4
   d7eca:	e7fc      	b.n	d7ec6 <__cxa_atexit+0x12>
   d7ecc:	00000000 	.word	0x00000000

000d7ed0 <memcmp>:
   d7ed0:	b530      	push	{r4, r5, lr}
   d7ed2:	3901      	subs	r1, #1
   d7ed4:	2400      	movs	r4, #0
   d7ed6:	42a2      	cmp	r2, r4
   d7ed8:	d101      	bne.n	d7ede <memcmp+0xe>
   d7eda:	2000      	movs	r0, #0
   d7edc:	e005      	b.n	d7eea <memcmp+0x1a>
   d7ede:	5d03      	ldrb	r3, [r0, r4]
   d7ee0:	3401      	adds	r4, #1
   d7ee2:	5d0d      	ldrb	r5, [r1, r4]
   d7ee4:	42ab      	cmp	r3, r5
   d7ee6:	d0f6      	beq.n	d7ed6 <memcmp+0x6>
   d7ee8:	1b58      	subs	r0, r3, r5
   d7eea:	bd30      	pop	{r4, r5, pc}

000d7eec <memcpy>:
   d7eec:	440a      	add	r2, r1
   d7eee:	4291      	cmp	r1, r2
   d7ef0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7ef4:	d100      	bne.n	d7ef8 <memcpy+0xc>
   d7ef6:	4770      	bx	lr
   d7ef8:	b510      	push	{r4, lr}
   d7efa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7efe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7f02:	4291      	cmp	r1, r2
   d7f04:	d1f9      	bne.n	d7efa <memcpy+0xe>
   d7f06:	bd10      	pop	{r4, pc}

000d7f08 <memmove>:
   d7f08:	4288      	cmp	r0, r1
   d7f0a:	b510      	push	{r4, lr}
   d7f0c:	eb01 0402 	add.w	r4, r1, r2
   d7f10:	d902      	bls.n	d7f18 <memmove+0x10>
   d7f12:	4284      	cmp	r4, r0
   d7f14:	4623      	mov	r3, r4
   d7f16:	d807      	bhi.n	d7f28 <memmove+0x20>
   d7f18:	1e43      	subs	r3, r0, #1
   d7f1a:	42a1      	cmp	r1, r4
   d7f1c:	d008      	beq.n	d7f30 <memmove+0x28>
   d7f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7f22:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7f26:	e7f8      	b.n	d7f1a <memmove+0x12>
   d7f28:	4402      	add	r2, r0
   d7f2a:	4601      	mov	r1, r0
   d7f2c:	428a      	cmp	r2, r1
   d7f2e:	d100      	bne.n	d7f32 <memmove+0x2a>
   d7f30:	bd10      	pop	{r4, pc}
   d7f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7f3a:	e7f7      	b.n	d7f2c <memmove+0x24>

000d7f3c <memset>:
   d7f3c:	4402      	add	r2, r0
   d7f3e:	4603      	mov	r3, r0
   d7f40:	4293      	cmp	r3, r2
   d7f42:	d100      	bne.n	d7f46 <memset+0xa>
   d7f44:	4770      	bx	lr
   d7f46:	f803 1b01 	strb.w	r1, [r3], #1
   d7f4a:	e7f9      	b.n	d7f40 <memset+0x4>

000d7f4c <srand>:
   d7f4c:	b538      	push	{r3, r4, r5, lr}
   d7f4e:	4b0d      	ldr	r3, [pc, #52]	; (d7f84 <srand+0x38>)
   d7f50:	681d      	ldr	r5, [r3, #0]
   d7f52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7f54:	4604      	mov	r4, r0
   d7f56:	b97b      	cbnz	r3, d7f78 <srand+0x2c>
   d7f58:	2018      	movs	r0, #24
   d7f5a:	f7fd fe51 	bl	d5c00 <malloc>
   d7f5e:	4a0a      	ldr	r2, [pc, #40]	; (d7f88 <srand+0x3c>)
   d7f60:	4b0a      	ldr	r3, [pc, #40]	; (d7f8c <srand+0x40>)
   d7f62:	63a8      	str	r0, [r5, #56]	; 0x38
   d7f64:	e9c0 2300 	strd	r2, r3, [r0]
   d7f68:	4b09      	ldr	r3, [pc, #36]	; (d7f90 <srand+0x44>)
   d7f6a:	6083      	str	r3, [r0, #8]
   d7f6c:	230b      	movs	r3, #11
   d7f6e:	8183      	strh	r3, [r0, #12]
   d7f70:	2201      	movs	r2, #1
   d7f72:	2300      	movs	r3, #0
   d7f74:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7f78:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7f7a:	2200      	movs	r2, #0
   d7f7c:	611c      	str	r4, [r3, #16]
   d7f7e:	615a      	str	r2, [r3, #20]
   d7f80:	bd38      	pop	{r3, r4, r5, pc}
   d7f82:	bf00      	nop
   d7f84:	2003e508 	.word	0x2003e508
   d7f88:	abcd330e 	.word	0xabcd330e
   d7f8c:	e66d1234 	.word	0xe66d1234
   d7f90:	0005deec 	.word	0x0005deec

000d7f94 <strcmp>:
   d7f94:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f98:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7f9c:	2a01      	cmp	r2, #1
   d7f9e:	bf28      	it	cs
   d7fa0:	429a      	cmpcs	r2, r3
   d7fa2:	d0f7      	beq.n	d7f94 <strcmp>
   d7fa4:	1ad0      	subs	r0, r2, r3
   d7fa6:	4770      	bx	lr

000d7fa8 <strlen>:
   d7fa8:	4603      	mov	r3, r0
   d7faa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7fae:	2a00      	cmp	r2, #0
   d7fb0:	d1fb      	bne.n	d7faa <strlen+0x2>
   d7fb2:	1a18      	subs	r0, r3, r0
   d7fb4:	3801      	subs	r0, #1
   d7fb6:	4770      	bx	lr

000d7fb8 <strncpy>:
   d7fb8:	b510      	push	{r4, lr}
   d7fba:	3901      	subs	r1, #1
   d7fbc:	4603      	mov	r3, r0
   d7fbe:	b132      	cbz	r2, d7fce <strncpy+0x16>
   d7fc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7fc4:	f803 4b01 	strb.w	r4, [r3], #1
   d7fc8:	3a01      	subs	r2, #1
   d7fca:	2c00      	cmp	r4, #0
   d7fcc:	d1f7      	bne.n	d7fbe <strncpy+0x6>
   d7fce:	441a      	add	r2, r3
   d7fd0:	2100      	movs	r1, #0
   d7fd2:	4293      	cmp	r3, r2
   d7fd4:	d100      	bne.n	d7fd8 <strncpy+0x20>
   d7fd6:	bd10      	pop	{r4, pc}
   d7fd8:	f803 1b01 	strb.w	r1, [r3], #1
   d7fdc:	e7f9      	b.n	d7fd2 <strncpy+0x1a>

000d7fde <strnlen>:
   d7fde:	b510      	push	{r4, lr}
   d7fe0:	4602      	mov	r2, r0
   d7fe2:	4401      	add	r1, r0
   d7fe4:	428a      	cmp	r2, r1
   d7fe6:	4613      	mov	r3, r2
   d7fe8:	d101      	bne.n	d7fee <strnlen+0x10>
   d7fea:	1a18      	subs	r0, r3, r0
   d7fec:	bd10      	pop	{r4, pc}
   d7fee:	781c      	ldrb	r4, [r3, #0]
   d7ff0:	3201      	adds	r2, #1
   d7ff2:	2c00      	cmp	r4, #0
   d7ff4:	d1f6      	bne.n	d7fe4 <strnlen+0x6>
   d7ff6:	e7f8      	b.n	d7fea <strnlen+0xc>

000d7ff8 <dynalib_user>:
   d7ff8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d8008:	0000 0000 2031 6177 2073 6573 746e 4500     ....1 was sent.E
   d8018:	656c 6870 6e61 7374 6120 6572 7020 6572     lephants are pre
   d8028:	7474 2079 6f63 6c6f 3600 3445 3030 3030     tty cool.6E40000
   d8038:	2d31 3542 3341 462d 3933 2d33 3045 3941     1-B5A3-F393-E0A9
   d8048:	452d 3035 3245 4434 4343 3941 0045 4536     -E50E24DCCA9E.6E
   d8058:	3034 3030 3230 422d 4135 2d33 3346 3339     400002-B5A3-F393
   d8068:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   d8078:	4539 3600 3445 3030 3030 2d33 3542 3341     9E.6E400003-B5A3
   d8088:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   d8098:	4434 4343 3941 0045 7874 7200 0078          4DCCA9E.tx.rx.

000d80a6 <_ZL4font>:
   d80a6:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d80b6:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d80c6:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d80d6:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d80e6:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d80f6:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d8106:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d8116:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d8126:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d8136:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d8146:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d8156:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8166:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8176:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d8186:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d8196:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d81a6:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d81b6:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d81c6:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d81d6:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d81e6:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d81f6:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d8206:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8216:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8226:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8236:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8246:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8256:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8266:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8276:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d8286:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d8296:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d82a6:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d82b6:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d82c6:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d82d6:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d82e6:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d82f6:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8306:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8316:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8326:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8336:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d8346:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8356:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8366:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d8376:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8386:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d8396:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d83a6:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d83b6:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d83c6:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d83d6:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d83e6:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d83f6:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8406:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8416:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d8426:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d8436:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d8446:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d8456:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d8466:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d8476:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d8486:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d8496:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d84a6:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d84b6:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d84c6:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d84d6:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d84e6:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d84f6:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d8506:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d8516:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d8526:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d8536:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d8546:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d8556:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d8566:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d8576:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d8586:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d8596:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d85a8 <_ZTV12Adafruit_GFX>:
	...
   d85b8:	4a8d 000d 72e9 000d 40a1 000d 4495 000d     .J...r...@...D..
   d85c8:	4497 000d 44c9 000d 44a5 000d 44b7 000d     .D...D...D...D..
   d85d8:	43d9 000d 4495 000d 46c1 000d 463b 000d     .C...D...F..;F..
   d85e8:	44e1 000d 451f 000d 4559 000d 459f 000d     .D...E..YE...E..
   d85f8:	463d 000d 45bb 000d 6564 6166 6c75 2074     =F...E..default 
   d8608:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   d8618:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   d8628:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   d8638:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000d8644 <_ZTVN8particle11SPISettingsE>:
	...
   d864c:	4bc9 000d 4b9b 000d 4b9d 000d               .K...K...K..

000d8658 <_ZL12splash1_data>:
   d8658:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d8668:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d8678:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d8688:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d8698:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d86a8:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d86c0:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d86d0:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d86e0:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d86f0:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d8700:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d8710:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d8720:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d8730:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d8740:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d8750:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d8760:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d8770:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d8780:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d8790:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d87a0:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d87b0:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d87c0:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d87d0:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d87e8:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d8800:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d8810:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d8820:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d8830:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d8840:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d8850:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d8860:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d8870:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d8880:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d8890:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d88a0:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d88b0:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d88c0:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d88d0:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d88e0:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d88f0:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d8900:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d8910:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d8918 <_ZL12splash2_data>:
   d8918:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d8928:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d8938:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d8954:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d8964:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d8974:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d8984:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d8994:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d89a4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d89b4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d89c4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d89d4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d89e4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d89f4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d8a04:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d8a14:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d8a24:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d8a34:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d8a44:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d8a54:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d8a64:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d8a74:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d8a84:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d8a94:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d8aac:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d8abc:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d8acc:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d8adc:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d8aec:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d8af8 <_ZTV16Adafruit_SSD1306>:
	...
   d8b00:	4c1d 000d 4c35 000d 4a8d 000d 72e9 000d     .L..5L...J...r..
   d8b10:	4c49 000d 4495 000d 4497 000d 44c9 000d     IL...D...D...D..
   d8b20:	44a5 000d 44b7 000d 43d9 000d 4495 000d     .D...D...C...D..
   d8b30:	46c1 000d 4e03 000d 5397 000d 5349 000d     .F...N...S..IS..
   d8b40:	4559 000d 459f 000d 463d 000d 45bb 000d     YE...E..=F...E..

000d8b50 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d8b50:	8000 e0c0 f8f0 fefc                         ........

000d8b58 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d8b58:	0100 0703 1f0f 7f3f                         ......?.

000d8b60 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d8b60:	d5ae a880                                   ....

000d8b64 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d8b64:	00d3 8d40                                   ..@.

000d8b68 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d8b68:	0020 c8a1                                    ...

000d8b6c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d8b6c:	40db a6a4 af2e                              .@....

000d8b72 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d8b72:	02da 8f81                                   ....

000d8b76 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d8b76:	12da                                         ...

000d8b79 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d8b79:	02da                                         ...

000d8b7c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d8b7c:	0022 21ff 0000 0000                         "..!....

000d8b84 <_ZTV16OledWingAdafruit>:
	...
   d8b8c:	555d 000d 557d 000d 4a8d 000d 72e9 000d     ]U..}U...J...r..
   d8b9c:	4c49 000d 4495 000d 4497 000d 44c9 000d     IL...D...D...D..
   d8bac:	44a5 000d 44b7 000d 43d9 000d 4495 000d     .D...D...C...D..
   d8bbc:	46c1 000d 4e03 000d 5397 000d 5349 000d     .F...N...S..IS..
   d8bcc:	4559 000d 459f 000d 463d 000d 45bb 000d     YE...E..=F...E..
   d8bdc:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d8bec:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d8bfc:	6976 6563 2e73 5000 6565 2072 6564 6976     vices..Peer devi
   d8c0c:	6563 6920 2073 696d 7373 6e69 2167 4600     ce is missing!.F
   d8c1c:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   d8c2c:	6570 7265 4320 6e65 7274 6c61 6420 7665     peer Central dev
   d8c3c:	6369 2e65 4300 6e6f 656e 7463 6465 6220     ice..Connected b
   d8c4c:	2079 6543 746e 6172 206c 6564 6976 6563     y Central device
   d8c5c:	002e 6944 6373 6e6f 656e 7463 6465 6220     ..Disconnected b
   d8c6c:	2079 6572 6f6d 6574 6420 7665 6369 2e65     y remote device.
   d8c7c:	4400 7075 696c 6163 6574 2064 6863 7261     .Duplicated char
   d8c8c:	6361 6574 6972 7473 6369 6320 6e61 6f6e     acteristic canno
   d8c9c:	2074 6562 6120 6464 6465 002e 6146 6c69     t be added..Fail
   d8cac:	6465 7420 206f 7061 6570 646e 6c20 636f     ed to append loc
   d8cbc:	6c61 6320 6168 6172 7463 7265 7369 6974     al characteristi
   d8ccc:	2e63 0000                                   c...

000d8cd0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8cd8:	5c6d 000d 5cd1 000d 5e99 000d 5cfb 000d     m\...\...^...\..
   d8ce8:	5c71 000d                                   q\..

000d8cec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8cf4:	5c69 000d 5cdf 000d 5c6b 000d 5cff 000d     i\...\..k\...\..
   d8d04:	5c91 000d                                   .\..

000d8d08 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8d10:	5c67 000d 5ced 000d 664d 000d 5d03 000d     g\...\..Mf...]..
   d8d20:	5cb1 000d                                   .\..

000d8d24 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8d2c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d8d3c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d8d3c:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d8d4c <_ZN8particle7BleUuid9BASE_UUIDE>:
   d8d4c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d8d5c <_ZTVN5spark13EthernetClassE>:
	...
   d8d64:	6fb7 000d 6fad 000d 6fa3 000d 6f99 000d     .o...o...o...o..
   d8d74:	6f8d 000d 6f81 000d 71bd 000d 71c5 000d     .o...o...q...q..
   d8d84:	6f75 000d 6f6d 000d 6f63 000d 6f59 000d     uo..mo..co..Yo..
   d8d94:	71f5 000d                                   .q..

000d8d98 <_ZTV7TwoWire>:
	...
   d8da0:	6fd5 000d 701f 000d 6ff7 000d 6fd7 000d     .o...p...o...o..
   d8db0:	6fff 000d 7007 000d 700f 000d 7017 000d     .o...p...p...p..

000d8dc0 <_ZTV9IPAddress>:
	...
   d8dc8:	7091 000d 7081 000d 7083 000d 7061 0070     .p...p...p..app.

000d8dd8 <_ZTVN5spark12NetworkClassE>:
	...
   d8de0:	717d 000d 7187 000d 7191 000d 719b 000d     }q...q...q...q..
   d8df0:	71a5 000d 71b1 000d 71bd 000d 71c5 000d     .q...q...q...q..
   d8e00:	71cd 000d 71d9 000d 71e1 000d 71eb 000d     .q...q...q...q..
   d8e10:	71f5 000d                                   .q..

000d8e14 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8e14:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d8e24:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d8e34:	6d69 0065                                   ime.

000d8e38 <_ZTV11USARTSerial>:
	...
   d8e40:	775d 000d 77c9 000d 77a1 000d 72e9 000d     ]w...w...w...r..
   d8e50:	7771 000d 778d 000d 777f 000d 779b 000d     qw...w...w...w..
   d8e60:	775f 000d 7763 000d                         _w..cw..

000d8e68 <_ZTV9USBSerial>:
	...
   d8e70:	785d 000d 78c5 000d 789b 000d 72e9 000d     ]x...x...x...r..
   d8e80:	788d 000d 785f 000d 786f 000d 78bf 000d     .x.._x..ox...x..
   d8e90:	787f 000d 7859 000d                         .x..Yx..

000d8e98 <_ZTVN5spark9WiFiClassE>:
	...
   d8ea0:	79bf 000d 79b5 000d 79ab 000d 7961 000d     .y...y...y..ay..
   d8eb0:	799f 000d 7993 000d 71bd 000d 71c5 000d     .y...y...q...q..
   d8ec0:	7987 000d 797f 000d 7975 000d 796b 000d     .y...y..uy..ky..
   d8ed0:	71f5 000d                                   .q..

000d8ed4 <_ZSt7nothrow>:
	...

000d8ed5 <_ZTSSt19_Sp_make_shared_tag>:
   d8ed5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d8ee5:	6572 5f64 6174 0067 0000                     red_tag....

000d8ef0 <_ZTISt19_Sp_make_shared_tag>:
   d8ef0:	8f30 000d 8ed5 000d                         0.......

000d8ef8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8ef8:	8f90 000d 8f04 000d 8fb4 000d               ............

000d8f04 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8f04:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d8f14:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d8f24:	0045 0000                                   E...

000d8f28 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8f28:	0000 0000 8ef8 000d 7cdd 000d 7cf1 000d     .........|...|..
   d8f38:	7e85 000d 7e85 000d 7d5b 000d 7c9d 000d     .~...~..[}...|..
   d8f48:	7d43 000d 7d05 000d 7cd1 000d               C}...}...|..

000d8f54 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8f54:	8f90 000d 8f60 000d 8ef8 000d               ....`.......

000d8f60 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8f60:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d8f70:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d8f80:	666e 456f 0000 0000                         nfoE....

000d8f88 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8f88:	0000 0000 8f54 000d 7d85 000d 7d99 000d     ....T....}...}..
   d8f98:	7e85 000d 7e85 000d 7d5b 000d 7c9d 000d     .~...~..[}...|..
   d8fa8:	7e59 000d 7de5 000d 7dad 000d               Y~...}...}..

000d8fb4 <_ZTISt9type_info>:
   d8fb4:	8f30 000d 8fbc 000d                         0.......

000d8fbc <_ZTSSt9type_info>:
   d8fbc:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d8fc9 <link_const_variable_data_end>:
   d8fc9:	00          	.byte	0x00
	...

000d8fcc <link_constructors_location>:
   d8fcc:	000d42b5 	.word	0x000d42b5
   d8fd0:	000d6f31 	.word	0x000d6f31
   d8fd4:	000d6fc1 	.word	0x000d6fc1
   d8fd8:	000d716d 	.word	0x000d716d
   d8fdc:	000d72d5 	.word	0x000d72d5
   d8fe0:	000d7481 	.word	0x000d7481
   d8fe4:	000d770d 	.word	0x000d770d
   d8fe8:	000d7749 	.word	0x000d7749
   d8fec:	000d79c9 	.word	0x000d79c9
